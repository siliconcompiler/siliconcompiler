name: Wheels

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'
  release:
    types:
      - published

# Ensures Surelog/wheels are compatible with macOS 10.15+
env:
  MACOSX_DEPLOYMENT_TARGET: "10.15"

concurrency:
  group: wheels-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  klayout_cache:
    name: Cache kLayout
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - uses: actions/checkout@v5

      - name: klayout version
        id: version
        shell: bash
        run: |
          echo "version=$(python3 siliconcompiler/toolscripts/_tools.py --tool klayout --field version)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        id: cache
        with:
          path: |
            klayout/*
          key: klayout-${{ steps.version.outputs.version }}
          enableCrossOsArchive: true

      - name: Download
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p klayout
          wget -O klayout/klayout.deb "https://www.klayout.org/downloads/Ubuntu-22/klayout_${{ steps.version.outputs.version }}-1_amd64.deb"
          wget -O klayout/klayout.zip "https://www.klayout.org/downloads/Windows/klayout-${{ steps.version.outputs.version }}-win64.zip"

  build_wheel:
    name: Wheel siliconcompiler
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v5
    - uses: hynek/build-and-inspect-python-package@v2

  test_wheel:
    needs: [build_wheel, klayout_cache]
    name: Test wheels on ${{ matrix.platform.os }} ${{ matrix.platform.arch}} ${{ matrix.python-version }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        platform:
          - os: ubuntu-22.04
            arch: x86_64
          - os: macos-13
            arch: x86_64
          - os: windows-latest
            arch: x86_64

    steps:
    - uses: actions/checkout@v5
      with:
        path: sc

    - uses: actions/cache@v4
      id: cache
      with:
        path: |
          klayout/*
        key: klayout-${{ needs.klayout_cache.outputs.version }}
        fail-on-cache-miss: true
        enableCrossOsArchive: true

    - name: Setup env (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y graphviz wget xvfb
        sudo apt-get install -y ./klayout/klayout.deb

    - name: Setup env (Windows)
      if: matrix.platform.os == 'windows-latest'
      run: |
        choco install -y graphviz
        7z x klayout/klayout.zip
        xcopy /E klayout-${{ needs.klayout_cache.outputs.version }}-win64 "C:\Program Files (x86)\KLayout\"

    - name: Setup env (macOS)
      if: matrix.platform.os == 'macos-13'
      run: |
        # || true is needed to avoid failure on brew link error with python3.12
        brew install graphviz || true
        brew install --cask klayout
        # https://github.com/ponty/PyVirtualDisplay/blob/master/.github/workflows/main.yml#L45
        brew install --cask xquartz
        echo "/opt/X11/bin" >> $GITHUB_PATH
        mkdir -p /tmp/.X11-unix
        sudo chmod 1777 /tmp/.X11-unix
        sudo chown root /tmp/.X11-unix

    - name: Setup python
      id: python
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/download-artifact@v6
      with:
        name: Packages
        path: dist

    - name: Install SC (non-windows)
      if: matrix.platform.os != 'windows-latest'
      run: |
        ${{ steps.python.outputs.python-path }} -m venv venv
        . venv/bin/activate
        python3 --version
        wheel=$(find dist -name "*.whl")
        pip install "$wheel"[test]

    - name: Run pytest (non-windows)
      if: matrix.platform.os != 'windows-latest'
      run: |
        . venv/bin/activate
        pytest sc/tests/ -m "not eda and not docker" -n logical
        # pytest sc/tests/utils/test_showtools.py -k "klayout" -n logical

    - name: Install SC (windows)
      if: matrix.platform.os == 'windows-latest'
      run: |
        ${{ steps.python.outputs.python-path }} -m venv venv
        venv/Scripts/activate
        python3 --version
        $wheel = Get-ChildItem -Path  dist\*.whl | % { $_.FullName }
        $install = -join($wheel, "[test]")
        pip install $install

    - name: Run pytest (windows)
      if: matrix.platform.os == 'windows-latest'
      run: |
        $ErrorActionPreference = "Stop"
        venv/Scripts/activate
        pytest sc/tests/ -m "not eda and not docker" -n logical
        if ($LASTEXITCODE -ne 0) {
          exit $LASTEXITCODE
        }
        pytest sc/tests/utils/test_showtools.py -k "klayout" -n logical
        if ($LASTEXITCODE -ne 0) {
          exit $LASTEXITCODE
        }

  publish:
    needs: [build_wheel, test_wheel]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published' && !contains(github.event.release.body, 'NOPUBLISH')

    permissions:
      contents: write
      id-token: write

    steps:
    - uses: actions/download-artifact@v6
      with:
        name: Packages
        path: dist

    - uses: pypa/gh-action-pypi-publish@v1.13.0

    - name: Add wheels to GitHub release artifacts
      uses: softprops/action-gh-release@v2
      with:
        files: dist/*.whl
