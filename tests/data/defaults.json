{
  "project": {
    "project": {
      "schemaversion": {
        "type": "str",
        "require": true,
        "scope": "global",
        "lock": true,
        "switch": [],
        "shorthelp": "Schema version number",
        "example": [
          "api: project.get('schemaversion')"
        ],
        "help": null,
        "notes": null,
        "pernode": "never",
        "node": {
          "default": {
            "default": {
              "value": "0.52.1",
              "signature": null
            }
          }
        }
      },
      "arg": {
        "step": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_step <str>"
          ],
          "shorthelp": "ARG: step argument",
          "example": [
            "cli: -arg_step 'route'",
            "api: project.set('arg', 'step', 'route')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "index": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_index <str>"
          ],
          "shorthelp": "ARG: index argument",
          "example": [
            "cli: -arg_index 0",
            "api: project.set('arg', 'index', '0')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "checklist": {
        "default": {
          "default": {
            "description": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_description 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item description",
              "example": [
                "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                "api: check.set('checklist', 'ISO', 'D000', 'description', 'A-DESCRIPTION')"
              ],
              "help": "A short one line description of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "requirement": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_requirement 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item requirement",
              "example": [
                "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                "api: check.set('checklist', 'ISO', 'D000', 'requirement', 'DOCSTRING')"
              ],
              "help": "A complete requirement description of the checklist item\nentered as a multi-line string.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "dataformat": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_dataformat 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item data format",
              "example": [
                "cli: -checklist_dataformat 'ISO D000 README'",
                "api: check.set('checklist', 'ISO', 'D000', 'dataformat', 'README')"
              ],
              "help": "Free text description of the type of data files acceptable as\nchecklist signoff validation.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "rationale": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_rationale 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item rationale",
              "example": [
                "cli: -checklist_rationale 'ISO D000 reliability'",
                "api: check.set('checklist', 'ISO', 'D000', 'rationale', 'reliability')"
              ],
              "help": "Rationale for the checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "criteria": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_criteria 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item criteria",
              "example": [
                "cli: -checklist_criteria 'ISO D000 errors==0'",
                "api: check.set('checklist', 'ISO', 'D000', 'criteria', 'errors==0')"
              ],
              "help": "Simple list of signoff criteria for checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form\n'metric op value'.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "task": {
              "type": "[(str,str,str)]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_task 'standard item <(str,str,str)>'"
              ],
              "shorthelp": "Checklist: item task",
              "example": [
                "cli: -checklist_task 'ISO D000 (job0,place,0)'",
                "api: check.set('checklist', 'ISO', 'D000', 'task', ('job0', 'place', '0'))"
              ],
              "help": "Flowgraph job and task used to verify the checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "report": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_report 'standard item <file>'"
              ],
              "shorthelp": "Checklist: item report",
              "example": [
                "cli: -checklist_report 'ISO D000 my.rpt'",
                "api: check.set('checklist', 'ISO', 'D000', 'report', 'my.rpt')"
              ],
              "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            },
            "waiver": {
              "default": {
                "type": "[file]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-checklist_waiver 'standard item metric <file>'"
                ],
                "shorthelp": "Checklist: item metric waivers",
                "example": [
                  "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                  "api: check.set('checklist', 'ISO', 'D000', 'waiver', 'hold', 'my.txt')"
                ],
                "help": "Filepath to report(s) documenting waivers for the checklist\nitem specified on a per metric basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              }
            },
            "ok": {
              "type": "bool",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_ok 'standard item <bool>'"
              ],
              "shorthelp": "Checklist: item ok",
              "example": [
                "cli: -checklist_ok 'ISO D000 true'",
                "api: check.set('checklist', 'ISO', 'D000', 'ok', True)"
              ],
              "help": "Boolean check mark for the checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters and verified they check out.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": false,
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.checklist/Criteria",
              "sctype": "Criteria"
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.checklist/Checklist",
            "sctype": "Checklist"
          }
        }
      },
      "library": {
        "__meta__": {
          "class": "siliconcompiler.project/_ProjectLibrary",
          "sctype": "BaseSchema"
        }
      },
      "flowgraph": {
        "default": {
          "default": {
            "default": {
              "input": {
                "type": "[(str,str)]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_input 'flow step index <(str,str)>'"
                ],
                "shorthelp": "Flowgraph: step input",
                "example": [
                  "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                  "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'input', ('place', '0'))"
                ],
                "help": "A list of inputs for the current step and index, specified as a\n(step, index) tuple.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "weight": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_weight 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric weights",
                  "example": [
                    "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'weight', 'area_cells', 1.0)"
                  ],
                  "help": "Weights specified on a per step and per metric basis used to give\neffective \"goodness\" score for a step by calculating the sum all step\nreal metrics results by the corresponding per step weights.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": 0.0,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "goal": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_goal 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric goals",
                  "example": [
                    "cli: -flowgraph_goal 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'goal', 'errors', 0)"
                  ],
                  "help": "Goals specified on a per step and per metric basis used to\ndetermine whether a certain task can be considered when merging\nmultiple tasks at a minimum or maximum node. A task is considered\nfailing if the absolute value of any of its metrics are larger than\nthe goal for that metric, if set.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "tool": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_tool 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: tool selection",
                "example": [
                  "cli: -flowgraph_tool 'asicflow place 0 openroad'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'tool', 'openroad')"
                ],
                "help": "Name of the tool name used for task execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "task": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_task 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task selection",
                "example": [
                  "cli: -flowgraph_task 'asicflow myplace 0 place'",
                  "api: flow.set('flowgraph', 'asicflow', 'myplace', '0', 'task', 'place')"
                ],
                "help": "Name of the tool associated task used for step execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "taskmodule": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_taskmodule 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task module",
                "example": [
                  "cli: -flowgraph_taskmodule 'asicflow place 0 siliconcompiler.tools.openroad.place'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'taskmodule', 'siliconcompiler.tools.openroad.place')"
                ],
                "help": "Full python module name of the task module used for task setup and execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "args": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_args 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: setup arguments",
                "example": [
                  "cli: -flowgraph_args 'asicflow cts 0 0'",
                  "api: flow.add('flowgraph', 'asicflow', 'cts', '0', 'args', '0')"
                ],
                "help": "User specified flowgraph string arguments specified on a per\nstep and per index basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "__meta__": {
                "class": "siliconcompiler.flowgraph/FlowgraphNodeSchema",
                "sctype": "FlowgraphNodeSchema"
              }
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.flowgraph/Flowgraph",
            "sctype": "Flowgraph"
          }
        }
      },
      "metric": {
        "errors": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_errors 'step index <int>'"
          ],
          "shorthelp": "Metric: total errors",
          "example": [
            "cli: -metric_errors 'dfm 0 0'",
            "api: project.set('metric', 'errors', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of errors on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "warnings": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_warnings 'step index <int>'"
          ],
          "shorthelp": "Metric: total warnings",
          "example": [
            "cli: -metric_warnings 'dfm 0 0'",
            "api: project.set('metric', 'warnings', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of warnings on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "memory": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_memory 'step index <float>'"
          ],
          "shorthelp": "Metric: memory",
          "example": [
            "cli: -metric_memory 'dfm 0 10e9'",
            "api: project.set('metric', 'memory', 10e9, step='dfm', index=0)"
          ],
          "help": "Metric tracking total peak program memory footprint on a per\nstep and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "B"
        },
        "exetime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_exetime 'step index <float>'"
          ],
          "shorthelp": "Metric: exetime",
          "example": [
            "cli: -metric_exetime 'dfm 0 10.0'",
            "api: project.set('metric', 'exetime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking time spent by the EDA executable\n:keypath:`tool,<tool>,task,<task>,exe` on a\nper step and index basis. It does not include the SiliconCompiler\nruntime overhead or time waiting for I/O operations and\ninter-processor communication to complete.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "tasktime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_tasktime 'step index <float>'"
          ],
          "shorthelp": "Metric: tasktime",
          "example": [
            "cli: -metric_tasktime 'dfm 0 10.0'",
            "api: project.set('metric', 'tasktime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent on a task from\nbeginning to end, including data transfers and pre/post\nprocessing.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "totaltime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_totaltime 'step index <float>'"
          ],
          "shorthelp": "Metric: totaltime",
          "example": [
            "cli: -metric_totaltime 'dfm 0 10.0'",
            "api: project.set('metric', 'totaltime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent from the beginning\nof the run up to and including the current step and index.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.metric/MetricSchema",
          "sctype": "MetricSchema"
        }
      },
      "record": {
        "userid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_userid 'step index <str>'"
          ],
          "shorthelp": "Record: userid",
          "example": [
            "cli: -record_userid 'dfm 0 wiley'",
            "api: schema.set('record', 'userid', 'wiley', step='dfm', index=0)"
          ],
          "help": "Record tracking the userid per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "publickey": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_publickey 'step index <str>'"
          ],
          "shorthelp": "Record: public key",
          "example": [
            "cli: -record_publickey 'dfm 0 <key>'",
            "api: schema.set('record', 'publickey', '<key>', step='dfm', index=0)"
          ],
          "help": "Record tracking the public key per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "machine": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_machine 'step index <str>'"
          ],
          "shorthelp": "Record: machine name",
          "example": [
            "cli: -record_machine 'dfm 0 carbon'",
            "api: schema.set('record', 'machine', 'carbon', step='dfm', index=0)"
          ],
          "help": "Record tracking the machine name per step and index basis. (myhost, localhost, ...",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "macaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_macaddr 'step index <str>'"
          ],
          "shorthelp": "Record: MAC address",
          "example": [
            "cli: -record_macaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'macaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the MAC address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "ipaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_ipaddr 'step index <str>'"
          ],
          "shorthelp": "Record: IP address",
          "example": [
            "cli: -record_ipaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'ipaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the IP address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "platform": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_platform 'step index <str>'"
          ],
          "shorthelp": "Record: platform name",
          "example": [
            "cli: -record_platform 'dfm 0 linux'",
            "api: schema.set('record', 'platform', 'linux', step='dfm', index=0)"
          ],
          "help": "Record tracking the platform name per step and index basis. (linux, windows, freebsd)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "distro": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_distro 'step index <str>'"
          ],
          "shorthelp": "Record: distro name",
          "example": [
            "cli: -record_distro 'dfm 0 ubuntu'",
            "api: schema.set('record', 'distro', 'ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the distro name per step and index basis. (ubuntu, redhat, centos)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "arch": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_arch 'step index <str>'"
          ],
          "shorthelp": "Record: hardware architecture",
          "example": [
            "cli: -record_arch 'dfm 0 x86_64'",
            "api: schema.set('record', 'arch', 'x86_64', step='dfm', index=0)"
          ],
          "help": "Record tracking the hardware architecture per step and index basis. (x86_64, rv64imafdc)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "starttime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_starttime 'step index <str>'"
          ],
          "shorthelp": "Record: start time",
          "example": [
            "cli: -record_starttime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'starttime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the start time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "endtime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_endtime 'step index <str>'"
          ],
          "shorthelp": "Record: end time",
          "example": [
            "cli: -record_endtime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'endtime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the end time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "region": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_region 'step index <str>'"
          ],
          "shorthelp": "Record: cloud region",
          "example": [
            "cli: -record_region 'dfm 0 \"US Gov Boston\"'",
            "api: schema.set('record', 'region', '\"US Gov Boston\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the cloud region per step and index basis. Recommended naming methodology:\n\n* local: node is the local machine\n* onprem: node in on-premises IT infrastructure\n* public: generic public cloud\n* govcloud: generic US government cloud\n* <region>: cloud and entity specific region string name",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "scversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_scversion 'step index <str>'"
          ],
          "shorthelp": "Record: software version",
          "example": [
            "cli: -record_scversion 'dfm 0 1.0'",
            "api: schema.set('record', 'scversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the software version per step and index basis. Version number for the SiliconCompiler software.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolversion 'step index <str>'"
          ],
          "shorthelp": "Record: tool version",
          "example": [
            "cli: -record_toolversion 'dfm 0 1.0'",
            "api: schema.set('record', 'toolversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool version per step and index basis. The tool version captured corresponds to the 'tool'\nparameter within the 'tool' dictionary.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolpath": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolpath 'step index <str>'"
          ],
          "shorthelp": "Record: tool path",
          "example": [
            "cli: -record_toolpath 'dfm 0 /usr/bin/openroad'",
            "api: schema.set('record', 'toolpath', '/usr/bin/openroad', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool path per step and index basis. Full path to tool executable used to run this\ntask.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolargs": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolargs 'step index <str>'"
          ],
          "shorthelp": "Record: tool CLI arguments",
          "example": [
            "cli: -record_toolargs 'dfm 0 \"-I include/ foo.v\"'",
            "api: schema.set('record', 'toolargs', '\"-I include/ foo.v\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool CLI arguments per step and index basis. Arguments passed to tool via CLI.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonversion 'step index <str>'"
          ],
          "shorthelp": "Record: Python version",
          "example": [
            "cli: -record_pythonversion 'dfm 0 3.12.3'",
            "api: schema.set('record', 'pythonversion', '3.12.3', step='dfm', index=0)"
          ],
          "help": "Record tracking the Python version per step and index basis. Version of python used to run this task.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "osversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_osversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S version",
          "example": [
            "cli: -record_osversion 'dfm 0 20.04.1-Ubuntu'",
            "api: schema.set('record', 'osversion', '20.04.1-Ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S version per step and index basis. Since there is not standard version system for operating\nsystems, extracting information from is platform dependent.\nFor Linux based operating systems, the 'osversion' is the\nversion of the distro.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "kernelversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_kernelversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S kernel version",
          "example": [
            "cli: -record_kernelversion 'dfm 0 5.11.0-34-generic'",
            "api: schema.set('record', 'kernelversion', '5.11.0-34-generic', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S kernel version per step and index basis. Used for platforms that support a distinction\nbetween os kernels and os distributions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolexitcode": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolexitcode 'step index <int>'"
          ],
          "shorthelp": "Record: tool exit code",
          "example": [
            "cli: -record_toolexitcode 'dfm 0 0'",
            "api: schema.set('record', 'toolexitcode', 0, step='dfm', index=0)"
          ],
          "help": "Record tracking the tool exit code per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "remoteid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_remoteid '<str>'"
          ],
          "shorthelp": "Record: remote job ID",
          "example": [
            "cli: -record_remoteid '0123456789abcdeffedcba9876543210'",
            "api: schema.set('record', 'remoteid', '0123456789abcdeffedcba9876543210')"
          ],
          "help": "Record tracking the job ID for a remote run.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonpackage": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonpackage '<str>'"
          ],
          "shorthelp": "Record: python packages",
          "example": [
            "cli: -record_pythonpackage 'siliconcompiler==0.28.0'",
            "api: schema.set('record', 'pythonpackage', 'siliconcompiler==0.28.0')"
          ],
          "help": "Record tracking for the python packages installed.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "status": {
          "type": "<error,pending,queued,running,skipped,success,timeout>",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_status 'step index <str>'"
          ],
          "shorthelp": "Record: node execution status",
          "example": [
            "cli: -record_status 'syn 0 success'",
            "api: schema.set('record', 'status', 'success', step='syn', index='0')"
          ],
          "help": "Record tracking for the status of a node.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "inputnode": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_inputnode 'step index <(str,str)>'"
          ],
          "shorthelp": "Record: node inputs",
          "example": [
            "cli: -record_inputnode 'cts 0 (place,42)'",
            "api: schema.set('record', 'inputnode', ('place', '42'), step='syn', index='0')"
          ],
          "help": "List of selected inputs for the current step/index specified as\n(in_step, in_index) tuple.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.record/RecordSchema",
          "sctype": "RecordSchema"
        }
      },
      "tool": {
        "default": {
          "task": {
            "default": {
              "dataroot": {
                "default": {
                  "path": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory path",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
                    ],
                    "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  },
                  "tag": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory reference tag/version",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
                    ],
                    "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  }
                }
              },
              "exe": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_exe 'tool <str>'"
                ],
                "shorthelp": "Tool: executable name",
                "example": [
                  "cli: -tool_exe 'openroad openroad'",
                  "api: task.set('tool', 'openroad', 'exe', 'openroad')"
                ],
                "help": "Tool executable name.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "sbom": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_sbom 'tool version <file>'"
                  ],
                  "shorthelp": "Tool: software BOM",
                  "example": [
                    "cli: -tool_sbom 'yosys 1.0.1 ys_sbom.json'",
                    "api: task.set('tool', 'yosys', 'sbom', '1.0', 'ys_sbom.json')"
                  ],
                  "help": "Paths to software bill of material (SBOM) document file of the tool\nspecified on a per version basis. The SBOM includes critical\npackage information about the tool including the list of included\ncomponents, licenses, and copyright. The SBOM file is generally\nprovided as in a a standardized open data format such as SPDX.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "path": {
                "type": "dir",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_path 'tool <dir>'"
                ],
                "shorthelp": "Tool: executable path",
                "example": [
                  "cli: -tool_path 'openroad /usr/local/bin'",
                  "api: task.set('tool', 'openroad', 'path', '/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is prepended to the\nsystem PATH environment variable for batch and interactive runs. The\npath parameter can be left blank if the :keypath:`tool,<tool>,task,<task>,exe` is\nalready in the environment search path.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null,
                      "filehash": null,
                      "dataroot": null
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "vswitch": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vswitch 'tool <str>'"
                ],
                "shorthelp": "Tool: executable version switch",
                "example": [
                  "cli: -tool_vswitch 'openroad -version'",
                  "api: task.set('tool', 'openroad', 'vswitch', '-version')"
                ],
                "help": "Command line switch to use with executable used to print out\nthe version number. Common switches include ``-v``, ``-version``,\n``--version``. Some tools may require extra flags to run in batch mode.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "vendor": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vendor 'tool <str>'"
                ],
                "shorthelp": "Tool: vendor",
                "example": [
                  "cli: -tool_vendor 'yosys yosys'",
                  "api: task.set('tool', 'yosys', 'vendor', 'yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor\nspecific technology variables in the PDK and libraries. For\nopen source projects, the project name should be used in\nplace of vendor.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "version": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_version 'tool <str>'"
                ],
                "shorthelp": "Tool: version",
                "example": [
                  "cli: -tool_version 'openroad >=v2.0'",
                  "api: task.set('tool', 'openroad', 'version', '>=v2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used. Each\nentry in this list must be a version specifier as described by Python\n`PEP-440 <https://peps.python.org/pep-0440/#version-specifiers>`_.\nDuring task execution, the tool is called with the 'vswitch' to\ncheck the runtime executable version. If the version of the system\nexecutable is not allowed by any of the specifiers in 'version',\nthen the job is halted pre-execution. For backwards compatibility,\nentries that do not conform to the standard will be interpreted as a\nversion with an '==' specifier. This check can be disabled by\nsetting :keypath:`option,novercheck` to True.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "format": {
                "type": "<json,tcl,yaml>",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_format 'tool <str>'"
                ],
                "shorthelp": "Tool: file format",
                "example": [
                  "cli: -tool_format 'yosys tcl'",
                  "api: task.set('tool', 'yosys', 'format', 'tcl')"
                ],
                "help": "File format for tool manifest handoff.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "licenseserver": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_licenseserver 'name key <str>'"
                  ],
                  "shorthelp": "Tool: license servers",
                  "example": [
                    "cli: -tool_licenseserver 'atask ACME_LICENSE 1700@server'",
                    "api: task.set('tool', 'acme', 'licenseserver', 'ACME_LICENSE', '1700@server')"
                  ],
                  "help": "Defines a set of tool-specific environment variables used by the executable\nthat depend on license key servers to control access. For multiple servers,\nseparate servers with a colon. The named license variables are read at\nruntime (:meth:`.Task.run()`) and the environment variables are set.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "warningoff": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_warningoff 'tool task <str>'"
                ],
                "shorthelp": "Task: warning filter",
                "example": [
                  "cli: -tool_task_warningoff 'verilator lint COMBDLY'",
                  "api: task.set('tool', 'verilator', 'task', 'lint', 'warningoff', 'COMBDLY')"
                ],
                "help": "A list of tool warnings for which printing should be suppressed.\nGenerally this is done on a per design basis after review has\ndetermined that warning can be safely ignored The code for turning\noff warnings can be found in the specific task reference manual.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "regex": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_regex 'tool task suffix <str>'"
                  ],
                  "shorthelp": "Task: regex filter",
                  "example": [
                    "cli: -tool_task_regex 'openroad place errors \"'-v ERROR'\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'regex', 'errors', '-v ERROR')"
                  ],
                  "help": "A list of piped together grep commands. Each entry represents a set\nof command line arguments for grep including the regex pattern to\nmatch. Starting with the first list entry, each grep output is piped\ninto the following grep command in the list. Supported grep options\ninclude ``-v`` and ``-e``. Patterns starting with \"-\" should be\ndirectly preceded by the ``-e`` option. The following example\nillustrates the concept.\n\nUNIX grep:\n\n.. code-block:: bash\n\n    $ grep WARNING place.log | grep -v \"bbox\" > place.warnings\n\nSiliconCompiler::\n\n    task.set('task', 'openroad', 'regex', 'place', '0', 'warnings',\n             [\"WARNING\", \"-v bbox\"])\n\nThe \"errors\" and \"warnings\" suffixes are special cases. When set,\nthe number of matches found for these regexes will be added to the\nerrors and warnings metrics for the task, respectively. This will\nalso cause the logfile to be added to the :keypath:`tool, <tool>,\ntask, <task>, report` parameter for those metrics, if not already present.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "option": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_option 'tool task <str>'"
                ],
                "shorthelp": "Task: executable options",
                "example": [
                  "cli: -tool_task_option 'openroad cts -no_init'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'option', '-no_init')"
                ],
                "help": "List of command line options for the task executable, specified on\na per task and per step basis. Options must not include spaces.\nFor multiple argument options, each option is a separate list element.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "env": {
                "default": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_env 'tool task env <str>'"
                  ],
                  "shorthelp": "Task: environment variables",
                  "example": [
                    "cli: -tool_task_env 'openroad cts MYVAR 42'",
                    "api: task.set('tool', 'openroad', 'task', 'cts', 'env', 'MYVAR', '42')"
                  ],
                  "help": "Environment variables to set for individual tasks. Keys and values\nshould be set in accordance with the task's documentation. Most\ntasks do not require extra environment variables to function.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "input": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_input 'tool task <file>'"
                ],
                "shorthelp": "Task: input files",
                "example": [
                  "cli: -tool_task_input 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'input', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key :keypath:`flowgraph,<flow>,<step>,<index>,input`.\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "output": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_output 'tool task <file>'"
                ],
                "shorthelp": "Task: output files",
                "example": [
                  "cli: -tool_task_output 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'output', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files written to the 'output' directory of the\ntool/task/step/index used in the keypath. All files must be available\nfor flow to continue. If a file is missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "stdout": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stdout",
                  "example": [
                    "cli: -tool_task_stdout_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stdout.\nSupported options are:\nnone: the stream generated to STDOUT is ignored.\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stdout",
                  "example": [
                    "cli: -tool_task_stdout_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stdout.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "stderr": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stderr",
                  "example": [
                    "cli: -tool_task_stderr_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stderr.\nSupported options are:\nnone: the stream generated to STDERR is ignored\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stderr",
                  "example": [
                    "cli: -tool_task_stderr_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stderr.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "require": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_require 'tool task <str>'"
                ],
                "shorthelp": "Task: parameter requirements",
                "example": [
                  "cli: -tool_task_require 'openroad cts design'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'require', 'design')"
                ],
                "help": "List of keypaths to required task parameters. The list is used\nby :meth:`.Project.check_manifest()` to verify that all parameters have been set up\nbefore step execution begins.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "report": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_report 'tool task metric <file>'"
                  ],
                  "shorthelp": "Task: metric report files",
                  "example": [
                    "cli: -tool_task_report 'openroad place holdtns \"place 0 place.log\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'report', 'holdtns', 'place.log', step='place', index='0')"
                  ],
                  "help": "List of report files associated with a specific 'metric'. The file path\nspecified is relative to the run directory of the current task.",
                  "notes": null,
                  "pernode": "required",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "refdir": {
                "type": "[dir]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_refdir 'tool task <dir>'"
                ],
                "shorthelp": "Task: script directory",
                "example": [
                  "cli: -tool_task_refdir 'yosys syn ./myref'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'refdir', './myref')"
                ],
                "help": "Path to directories containing reference flow scripts, specified\non a per step and index basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "script": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_script 'tool task <file>'"
                ],
                "shorthelp": "Task: entry script",
                "example": [
                  "cli: -tool_task_script 'yosys syn syn.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'script', 'syn.tcl')"
                ],
                "help": "Path to the entry script called by the executable specified\non a per task and per step basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "prescript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_prescript 'tool task <file>'"
                ],
                "shorthelp": "Task: pre-step script",
                "example": [
                  "cli: -tool_task_prescript 'yosys syn syn_pre.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'prescript', 'syn_pre.tcl')"
                ],
                "help": "Path to a user supplied script to execute after reading in the design\nbut before the main execution stage of the step. Exact entry point\ndepends on the step and main script being executed. An example\nof a prescript entry point would be immediately before global\nplacement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "postscript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_postscript 'tool task <file>'"
                ],
                "shorthelp": "Task: post-step script",
                "example": [
                  "cli: -tool_task_postscript 'yosys syn syn_post.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'postscript', 'syn_post.tcl')"
                ],
                "help": "Path to a user supplied script to execute after the main execution\nstage of the step but before the design is saved.\nExact entry point depends on the step and main script being\nexecuted. An example of a postscript entry point would be immediately\nafter global placement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "threads": {
                "type": "int",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_threads 'tool task <int>'"
                ],
                "shorthelp": "Task: thread parallelism",
                "example": [
                  "cli: -tool_task_threads 'magic drc 64'",
                  "api: task.set('tool', 'magic', 'task', 'drc', 'threads', '64')"
                ],
                "help": "Thread parallelism to use for execution specified on a per task and per\nstep basis. If not specified, SC queries the operating system and sets\nthe threads based on the maximum thread count supported by the\nhardware.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "__meta__": {
                "name": null,
                "class": "siliconcompiler.tool/Task",
                "sctype": "Task"
              }
            }
          }
        }
      },
      "option": {
        "remote": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-remote <bool>"
          ],
          "shorthelp": "Option: enable remote processing",
          "example": [
            "cli: -remote",
            "api: option.set('remote', True)"
          ],
          "help": "\n                Sends job for remote processing if set to true. The remote\n                option requires a credentials file to be placed in the home\n                directory. Fore more information, see the credentials\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "credentials": {
          "type": "file",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-credentials <file>"
          ],
          "shorthelp": "Option: user credentials file",
          "example": [
            "cli: -credentials /home/user/.sc/credentials",
            "api: option.set('credentials', '/home/user/.sc/credentials')"
          ],
          "help": "\n                Filepath to credentials used for remote processing. If the\n                credentials parameter is empty, the remote processing client program\n                tries to access the \".sc/credentials\" file in the user's home\n                directory. The file supports the following fields:\n\n                address=<server address>\n                port=<server port> (optional)\n                username=<user id> (optional)\n                password=<password / key used for authentication> (optional)",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null,
                "date": null,
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "cachedir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-cachedir <dir>"
          ],
          "shorthelp": "Option: user cache directory",
          "example": [
            "cli: -cachedir /home/user/.sc/cache",
            "api: option.set('cachedir', '/home/user/.sc/cache')"
          ],
          "help": "\n                Filepath to cache used for package data sources. If the\n                cache parameter is empty, \".sc/cache\" directory in the user's home\n                directory will be used.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "nice": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nice <int>"
          ],
          "shorthelp": "Option: tool scheduling priority",
          "example": [
            "cli: -nice 5",
            "api: option.set('nice', 5)"
          ],
          "help": "\n                Sets the type of execution priority of each individual flowgraph steps.\n                If the parameter is undefined, nice will not be used. For more information see\n                `Unix 'nice' <https://en.wikipedia.org/wiki/Nice_(Unix)>`_.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "flow": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-flow <str>"
          ],
          "shorthelp": "Option: flow target",
          "example": [
            "cli: -flow asicflow",
            "api: option.set('flow', 'asicflow')"
          ],
          "help": "\n                Sets the flow for the current run. The flow name\n                must match up with a 'flow' in the flowgraph",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "optmode": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-O<str>",
            "-optmode <str>"
          ],
          "shorthelp": "Option: optimization mode",
          "example": [
            "cli: -O3",
            "cli: -optmode 3",
            "api: option.set('optmode', 'O3')"
          ],
          "help": "\n                The compiler has modes to prioritize run time and ppa. Modes\n                include.\n\n                (O0) = Exploration mode for debugging setup\n                (O1) = Higher effort and better PPA than O0\n                (O2) = Higher effort and better PPA than O1\n                (O3) = Signoff quality. Better PPA and higher run times than O2\n                (O4-O98) = Reserved (compiler/target dependent)\n                (O99) = Experimental highest possible effort, may be unstable\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": 0,
                "signature": null
              }
            }
          }
        },
        "builddir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-builddir <dir>"
          ],
          "shorthelp": "Option: build directory",
          "example": [
            "cli: -builddir ./build_the_future",
            "api: option.set('builddir', './build_the_future')"
          ],
          "help": "\n                The default build directory is in the local './build' where SC was\n                executed. This can be used to set an alternate\n                compilation directory path.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "build",
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "jobname": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobname <str>"
          ],
          "shorthelp": "Option: job name",
          "example": [
            "cli: -jobname may1",
            "api: option.set('jobname', 'may1')"
          ],
          "help": "\n                Jobname during invocation of :meth:`.Project.run()`. The jobname combined with a\n                defined director structure (<dir>/<design>/<jobname>/<step>/<index>)\n                enables multiple levels of transparent job, step, and index\n                introspection.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "job0",
                "signature": null
              }
            }
          }
        },
        "from": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-from <str>"
          ],
          "shorthelp": "Option: starting step",
          "example": [
            "cli: -from 'import'",
            "api: option.set('from', 'import')"
          ],
          "help": "\n                Inclusive list of steps to start execution from. The default is to start\n                at all entry steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "to": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-to <str>"
          ],
          "shorthelp": "Option: ending step",
          "example": [
            "cli: -to 'syn'",
            "api: option.set('to', 'syn')"
          ],
          "help": "\n                Inclusive list of steps to end execution with. The default is to go\n                to all exit steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "prune": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-prune 'node <(str,str)>'"
          ],
          "shorthelp": "Option: flowgraph pruning",
          "example": [
            "cli: -prune (syn,0)",
            "api: option.set('prune', ('syn', '0'))"
          ],
          "help": "\n                List of starting nodes for branches to be pruned.\n                The default is to not prune any nodes/branches.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "breakpoint": {
          "type": "bool",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-breakpoint <bool>"
          ],
          "shorthelp": "Option: breakpoint list",
          "example": [
            "cli: -breakpoint true",
            "api: option.set('breakpoint', True)"
          ],
          "help": "\n                Set a breakpoint on specific steps. If the step is a TCL\n                based tool, then the breakpoints stops the flow inside the\n                EDA tool. If the step is a command line tool, then the flow\n                drops into a Python interpreter.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "clean": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-clean <bool>"
          ],
          "shorthelp": "Option: cleanup previous job",
          "example": [
            "cli: -clean",
            "api: option.set('clean', True)"
          ],
          "help": "\n                Run a job from the start and do not use any of the previous job.\n                If :keypath:`option, jobincr` is True, the old job is preserved and\n                a new job number is assigned.\n                ",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "hash": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-hash <bool>"
          ],
          "shorthelp": "Option: file hashing",
          "example": [
            "cli: -hash",
            "api: option.set('hash', True)"
          ],
          "help": "\n                Enables hashing of all inputs and outputs during\n                compilation. The hash values are stored in the hashvalue\n                field of the individual parameters.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "nodisplay": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodisplay <bool>"
          ],
          "shorthelp": "Option: headless execution",
          "example": [
            "cli: -nodisplay",
            "api: option.set('nodisplay', True)"
          ],
          "help": "\n                This flag prevents SiliconCompiler from opening GUI windows.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "quiet": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-quiet <bool>"
          ],
          "shorthelp": "Option: quiet execution",
          "example": [
            "cli: -quiet",
            "api: option.set('quiet', True)"
          ],
          "help": "\n                The -quiet option forces all steps to print to a log file.\n                This can be useful with Modern EDA tools which print\n                significant content to the screen.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "jobincr": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobincr <bool>"
          ],
          "shorthelp": "Option: autoincrement jobname",
          "example": [
            "cli: -jobincr",
            "api: option.set('jobincr', True)"
          ],
          "help": "\n                Forces an auto-update of the jobname parameter if a directory\n                matching the jobname is found in the build directory. If the\n                jobname does not include a trailing digit, then the number\n                '1' is added to the jobname before updating the jobname\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "novercheck": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-novercheck <bool>"
          ],
          "shorthelp": "Option: disable version checking",
          "example": [
            "cli: -novercheck",
            "api: option.set('novercheck', True)"
          ],
          "help": "\n                Disables strict version checking on all invoked tools if True.\n                The list of supported version numbers is defined in the\n                :keypath:`tool,<tool>,task,<task>,version`.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "track": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-track <bool>"
          ],
          "shorthelp": "Option: enable provenance tracking",
          "example": [
            "cli: -track",
            "api: option.set('track', True)"
          ],
          "help": "\n                Turns on tracking of all 'record' parameters during each\n                task, otherwise only tool and runtime information will be recorded.\n                Tracking will result in potentially sensitive data\n                being recorded in the manifest so only turn on this feature\n                if you have control of the final manifest.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "continue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-continue <bool>"
          ],
          "shorthelp": "Option: continue-on-error",
          "example": [
            "cli: -continue",
            "api: option.set('continue', True)"
          ],
          "help": "\n                Attempt to continue even when errors are encountered in the SC\n                implementation. The default behavior is to quit executing the flow\n                if a task ends and the errors metric is greater than 0. Note that\n                the flow will always cease executing if the tool returns a nonzero\n                status code.\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "timeout": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-timeout <float>"
          ],
          "shorthelp": "Option: timeout value",
          "example": [
            "cli: -timeout 3600",
            "api: option.set('timeout', 3600)"
          ],
          "help": "\n                Timeout value in seconds. The timeout value is compared\n                against the wall time tracked by the SC runtime to determine\n                if an operation should continue.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "env": {
          "default": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: environment variables",
            "example": [
              "api: option.set('env', 'PDK_HOME', '/disk/mypdk')"
            ],
            "help": "Certain tools and reference flows require global environment\nvariables to be set. These variables can be managed externally or\nspecified through the env variable.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        },
        "design": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-design <str>"
          ],
          "shorthelp": "Option: Design library name",
          "example": [
            "cli: -design hello_world",
            "api: option.set('design', 'hello_world')"
          ],
          "help": "Name of the top level library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "alias": {
          "type": "[(str,str,str,str)]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Fileset alias mapping",
          "example": [
            "api: option.set('alias', ('design', 'rtl', 'lambda', 'rtl'))"
          ],
          "help": "List of filesets to alias during a run. When an alias is specific\nit will be used instead of the source fileset. It is useful when you\nwant to substitute a fileset from one library with a fileset from another,\nwithout changing the original design's code.\nFor example, you might use it to swap in a different version of an IP\nblock or a specific test environment.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "fileset": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Selected design filesets",
          "example": [
            "api: option.set('fileset', 'rtl')"
          ],
          "help": "List of filesets to use from the selected design library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "nodashboard": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodashboard <bool>"
          ],
          "shorthelp": "Option: Disables the dashboard",
          "example": [
            "api: option.set('nodashboard', True)"
          ],
          "help": "Disables the dashboard during execution",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "autoissue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-autoissue <bool>"
          ],
          "shorthelp": "Option: Enables automatic generation of testcases",
          "example": [
            "api: option.set('autoissue', True)"
          ],
          "help": "Enables automatic generation of testcases\nif the specific node fails",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "scheduler": {
          "name": {
            "type": "<docker,lsf,sge,slurm>",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler <str>"
            ],
            "shorthelp": "Option: scheduler platform",
            "example": [
              "cli: -scheduler slurm",
              "api: option.set('name', 'slurm')"
            ],
            "help": "\n                Sets the type of job scheduler to be used for each individual\n                flowgraph steps. If the parameter is undefined, the steps are executed\n                on the same machine that the SC was launched on. If 'slurm' is used,\n                the host running the 'sc' command must be running a 'slurmctld' daemon\n                managing a Slurm cluster. Additionally, the build directory\n                (:keypath:`option,builddir`) must be located in shared storage which\n                can be accessed by all hosts in the cluster.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "cores": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-cores <int>"
            ],
            "shorthelp": "Option: Scheduler core constraint",
            "example": [
              "cli: -cores 48",
              "api: option.set('cores', 48)"
            ],
            "help": "\n                Specifies the number CPU cores required to run the job.\n                For the slurm scheduler, this translates to the '-c'\n                switch. For more information, see the job scheduler\n                documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "memory": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-memory <int>"
            ],
            "shorthelp": "Option: scheduler memory constraint",
            "example": [
              "cli: -memory 8000",
              "api: option.set('memory', 8000)"
            ],
            "help": "\n                Specifies the amount of memory required to run the job,\n                specified in MB. For the slurm scheduler, this translates to\n                the '--mem' switch. For more information, see the job\n                scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            },
            "unit": "MB"
          },
          "queue": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-queue <str>"
            ],
            "shorthelp": "Option: scheduler queue",
            "example": [
              "cli: -queue nightrun",
              "api: option.set('queue', 'nightrun')"
            ],
            "help": "\n                Send the job to the specified queue. With slurm, this\n                translates to 'partition'. The queue name must match\n                the name of an existing job scheduler queue. For more information,\n                see the job scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "defer": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-defer <str>"
            ],
            "shorthelp": "Option: scheduler start time",
            "example": [
              "cli: -defer 16:00",
              "api: option.set('defer', '16:00')"
            ],
            "help": "\n                Defer initiation of job until the specified time. The parameter\n                is pass through string for remote job scheduler such as slurm.\n                For more information about the exact format specification, see\n                the job scheduler documentation. Examples of valid slurm specific\n                values include: now+1hour, 16:00, 010-01-20T12:34:00. For more\n                information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "options": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler_options <str>"
            ],
            "shorthelp": "Option: scheduler arguments",
            "example": [
              "cli: -scheduler_options \"--pty\"",
              "api: option.set('options', \"--pty\")"
            ],
            "help": "\n                Advanced/export options passed through unchanged to the job\n                scheduler as-is. (The user specified options must be compatible\n                with the rest of the scheduler parameters entered.(memory etc).\n                For more information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgevent": {
            "type": "{<all,begin,end,fail,summary,timeout>}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgevent <str>"
            ],
            "shorthelp": "Option: message event trigger",
            "example": [
              "cli: -msgevent all",
              "api: option.set('msgevent', 'all')"
            ],
            "help": "\n                Directs job scheduler to send a message to the user in\n                :keypath:`option,scheduler,msgcontact` when certain events occur\n                during a task.\n\n                * fail: send an email on failures\n                * timeout: send an email on timeouts\n                * begin: send an email at the start of a node task\n                * end: send an email at the end of a node task\n                * summary: send a summary email at the end of the run\n                * all: send an email on any event\n                ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgcontact": {
            "type": "{str}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgcontact <str>"
            ],
            "shorthelp": "Option: message contact",
            "example": [
              "cli: -msgcontact 'wile.e.coyote@acme.com'",
              "api: option.set('msgcontact', 'wiley@acme.com')"
            ],
            "help": "\n                List of email addresses to message on a :keypath:`option,scheduler,msgevent`.\n                Support for email messages relies on job scheduler daemon support.\n                For more information, see the job scheduler documentation. ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "maxnodes": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-maxnodes <int>"
            ],
            "shorthelp": "Option: maximum concurrent nodes",
            "example": [
              "cli: -maxnodes 4",
              "api: option.set('maxnodes', 4)"
            ],
            "help": "\n                Maximum number of concurrent nodes to run in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "maxthreads": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: maximum number of threads to assign a task",
            "example": [
              "api: option.set('maxthreads', 4)"
            ],
            "help": "\n                Maximum number of threads for each task in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "__meta__": {
            "class": "siliconcompiler.schema_support.option/SchedulerSchema",
            "sctype": "BaseSchema"
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.option/OptionSchema",
          "sctype": "BaseSchema"
        }
      },
      "history": {},
      "__meta__": {
        "class": "siliconcompiler.project/Project",
        "sctype": "Project"
      }
    },
    "fpga": {
      "schemaversion": {
        "type": "str",
        "require": true,
        "scope": "global",
        "lock": true,
        "switch": [],
        "shorthelp": "Schema version number",
        "example": [
          "api: project.get('schemaversion')"
        ],
        "help": null,
        "notes": null,
        "pernode": "never",
        "node": {
          "default": {
            "default": {
              "value": "0.52.1",
              "signature": null
            }
          }
        }
      },
      "arg": {
        "step": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_step <str>"
          ],
          "shorthelp": "ARG: step argument",
          "example": [
            "cli: -arg_step 'route'",
            "api: project.set('arg', 'step', 'route')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "index": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_index <str>"
          ],
          "shorthelp": "ARG: index argument",
          "example": [
            "cli: -arg_index 0",
            "api: project.set('arg', 'index', '0')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "checklist": {
        "default": {
          "default": {
            "description": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_description 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item description",
              "example": [
                "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                "api: check.set('checklist', 'ISO', 'D000', 'description', 'A-DESCRIPTION')"
              ],
              "help": "A short one line description of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "requirement": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_requirement 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item requirement",
              "example": [
                "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                "api: check.set('checklist', 'ISO', 'D000', 'requirement', 'DOCSTRING')"
              ],
              "help": "A complete requirement description of the checklist item\nentered as a multi-line string.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "dataformat": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_dataformat 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item data format",
              "example": [
                "cli: -checklist_dataformat 'ISO D000 README'",
                "api: check.set('checklist', 'ISO', 'D000', 'dataformat', 'README')"
              ],
              "help": "Free text description of the type of data files acceptable as\nchecklist signoff validation.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "rationale": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_rationale 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item rationale",
              "example": [
                "cli: -checklist_rationale 'ISO D000 reliability'",
                "api: check.set('checklist', 'ISO', 'D000', 'rationale', 'reliability')"
              ],
              "help": "Rationale for the checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "criteria": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_criteria 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item criteria",
              "example": [
                "cli: -checklist_criteria 'ISO D000 errors==0'",
                "api: check.set('checklist', 'ISO', 'D000', 'criteria', 'errors==0')"
              ],
              "help": "Simple list of signoff criteria for checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form\n'metric op value'.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "task": {
              "type": "[(str,str,str)]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_task 'standard item <(str,str,str)>'"
              ],
              "shorthelp": "Checklist: item task",
              "example": [
                "cli: -checklist_task 'ISO D000 (job0,place,0)'",
                "api: check.set('checklist', 'ISO', 'D000', 'task', ('job0', 'place', '0'))"
              ],
              "help": "Flowgraph job and task used to verify the checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "report": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_report 'standard item <file>'"
              ],
              "shorthelp": "Checklist: item report",
              "example": [
                "cli: -checklist_report 'ISO D000 my.rpt'",
                "api: check.set('checklist', 'ISO', 'D000', 'report', 'my.rpt')"
              ],
              "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            },
            "waiver": {
              "default": {
                "type": "[file]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-checklist_waiver 'standard item metric <file>'"
                ],
                "shorthelp": "Checklist: item metric waivers",
                "example": [
                  "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                  "api: check.set('checklist', 'ISO', 'D000', 'waiver', 'hold', 'my.txt')"
                ],
                "help": "Filepath to report(s) documenting waivers for the checklist\nitem specified on a per metric basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              }
            },
            "ok": {
              "type": "bool",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_ok 'standard item <bool>'"
              ],
              "shorthelp": "Checklist: item ok",
              "example": [
                "cli: -checklist_ok 'ISO D000 true'",
                "api: check.set('checklist', 'ISO', 'D000', 'ok', True)"
              ],
              "help": "Boolean check mark for the checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters and verified they check out.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": false,
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.checklist/Criteria",
              "sctype": "Criteria"
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.checklist/Checklist",
            "sctype": "Checklist"
          }
        }
      },
      "library": {
        "__meta__": {
          "class": "siliconcompiler.project/_ProjectLibrary",
          "sctype": "BaseSchema"
        }
      },
      "flowgraph": {
        "default": {
          "default": {
            "default": {
              "input": {
                "type": "[(str,str)]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_input 'flow step index <(str,str)>'"
                ],
                "shorthelp": "Flowgraph: step input",
                "example": [
                  "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                  "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'input', ('place', '0'))"
                ],
                "help": "A list of inputs for the current step and index, specified as a\n(step, index) tuple.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "weight": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_weight 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric weights",
                  "example": [
                    "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'weight', 'area_cells', 1.0)"
                  ],
                  "help": "Weights specified on a per step and per metric basis used to give\neffective \"goodness\" score for a step by calculating the sum all step\nreal metrics results by the corresponding per step weights.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": 0.0,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "goal": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_goal 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric goals",
                  "example": [
                    "cli: -flowgraph_goal 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'goal', 'errors', 0)"
                  ],
                  "help": "Goals specified on a per step and per metric basis used to\ndetermine whether a certain task can be considered when merging\nmultiple tasks at a minimum or maximum node. A task is considered\nfailing if the absolute value of any of its metrics are larger than\nthe goal for that metric, if set.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "tool": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_tool 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: tool selection",
                "example": [
                  "cli: -flowgraph_tool 'asicflow place 0 openroad'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'tool', 'openroad')"
                ],
                "help": "Name of the tool name used for task execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "task": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_task 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task selection",
                "example": [
                  "cli: -flowgraph_task 'asicflow myplace 0 place'",
                  "api: flow.set('flowgraph', 'asicflow', 'myplace', '0', 'task', 'place')"
                ],
                "help": "Name of the tool associated task used for step execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "taskmodule": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_taskmodule 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task module",
                "example": [
                  "cli: -flowgraph_taskmodule 'asicflow place 0 siliconcompiler.tools.openroad.place'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'taskmodule', 'siliconcompiler.tools.openroad.place')"
                ],
                "help": "Full python module name of the task module used for task setup and execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "args": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_args 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: setup arguments",
                "example": [
                  "cli: -flowgraph_args 'asicflow cts 0 0'",
                  "api: flow.add('flowgraph', 'asicflow', 'cts', '0', 'args', '0')"
                ],
                "help": "User specified flowgraph string arguments specified on a per\nstep and per index basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "__meta__": {
                "class": "siliconcompiler.flowgraph/FlowgraphNodeSchema",
                "sctype": "FlowgraphNodeSchema"
              }
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.flowgraph/Flowgraph",
            "sctype": "Flowgraph"
          }
        }
      },
      "metric": {
        "errors": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_errors 'step index <int>'"
          ],
          "shorthelp": "Metric: total errors",
          "example": [
            "cli: -metric_errors 'dfm 0 0'",
            "api: project.set('metric', 'errors', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of errors on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "warnings": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_warnings 'step index <int>'"
          ],
          "shorthelp": "Metric: total warnings",
          "example": [
            "cli: -metric_warnings 'dfm 0 0'",
            "api: project.set('metric', 'warnings', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of warnings on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "memory": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_memory 'step index <float>'"
          ],
          "shorthelp": "Metric: memory",
          "example": [
            "cli: -metric_memory 'dfm 0 10e9'",
            "api: project.set('metric', 'memory', 10e9, step='dfm', index=0)"
          ],
          "help": "Metric tracking total peak program memory footprint on a per\nstep and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "B"
        },
        "exetime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_exetime 'step index <float>'"
          ],
          "shorthelp": "Metric: exetime",
          "example": [
            "cli: -metric_exetime 'dfm 0 10.0'",
            "api: project.set('metric', 'exetime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking time spent by the EDA executable\n:keypath:`tool,<tool>,task,<task>,exe` on a\nper step and index basis. It does not include the SiliconCompiler\nruntime overhead or time waiting for I/O operations and\ninter-processor communication to complete.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "tasktime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_tasktime 'step index <float>'"
          ],
          "shorthelp": "Metric: tasktime",
          "example": [
            "cli: -metric_tasktime 'dfm 0 10.0'",
            "api: project.set('metric', 'tasktime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent on a task from\nbeginning to end, including data transfers and pre/post\nprocessing.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "totaltime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_totaltime 'step index <float>'"
          ],
          "shorthelp": "Metric: totaltime",
          "example": [
            "cli: -metric_totaltime 'dfm 0 10.0'",
            "api: project.set('metric', 'totaltime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent from the beginning\nof the run up to and including the current step and index.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "unconstrained": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_unconstrained 'step index <int>'"
          ],
          "shorthelp": "Metric: total unconstrained",
          "example": [
            "cli: -metric_unconstrained 'dfm 0 0'",
            "api: fpga.set('metric', 'unconstrained', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of unconstrained timing paths on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "luts": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_luts 'step index <int>'"
          ],
          "shorthelp": "Metric: FPGA LUTs used",
          "example": [
            "cli: -metric_luts 'place 0 100'",
            "api: fpga.set('metric', 'luts', 100, step='place', index=0)"
          ],
          "help": "Metric tracking the total FPGA LUTs used used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "dsps": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_dsps 'step index <int>'"
          ],
          "shorthelp": "Metric: FPGA DSP slices used",
          "example": [
            "cli: -metric_dsps 'place 0 100'",
            "api: fpga.set('metric', 'dsps', 100, step='place', index=0)"
          ],
          "help": "Metric tracking the total FPGA DSP slices used used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "brams": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_brams 'step index <int>'"
          ],
          "shorthelp": "Metric: FPGA BRAM tiles used",
          "example": [
            "cli: -metric_brams 'place 0 100'",
            "api: fpga.set('metric', 'brams', 100, step='place', index=0)"
          ],
          "help": "Metric tracking the total FPGA BRAM tiles used used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "utilization": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_utilization 'step index <float>'"
          ],
          "shorthelp": "Metric: area utilization",
          "example": [
            "cli: -metric_utilization 'place 0 50.00'",
            "api: fpga.set('metric', 'utilization', 50.00, step='place', index=0)"
          ],
          "help": "Metric tracking the area utilization of the design calculated as\n100 * (cellarea/totalarea).",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "%"
        },
        "logicdepth": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_logicdepth 'step index <int>'"
          ],
          "shorthelp": "Metric: logic depth",
          "example": [
            "cli: -metric_logicdepth 'place 0 8'",
            "api: fpga.set('metric', 'logicdepth', 8, step='place', index=0)"
          ],
          "help": "Metric tracking the logic depth of the design. This is determined\nby the number of logic gates between the start of the critital timing\npath to the end of the path.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "peakpower": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_peakpower 'step index <float>'"
          ],
          "shorthelp": "Metric: peakpower",
          "example": [
            "cli: -metric_peakpower 'place 0 0.01'",
            "api: fpga.set('metric', 'peakpower', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst case total peak power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power peakpower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mw"
        },
        "averagepower": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_averagepower 'step index <float>'"
          ],
          "shorthelp": "Metric: averagepower",
          "example": [
            "cli: -metric_averagepower 'place 0 0.01'",
            "api: fpga.set('metric', 'averagepower', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the average workload power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power averagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mw"
        },
        "leakagepower": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_leakagepower 'step index <float>'"
          ],
          "shorthelp": "Metric: leakagepower",
          "example": [
            "cli: -metric_leakagepower 'place 0 0.01'",
            "api: fpga.set('metric', 'leakagepower', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the leakage power with rails active but without any dynamic switching activity of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power leakagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mw"
        },
        "holdpaths": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdpaths 'step index <int>'"
          ],
          "shorthelp": "Metric: holdpaths",
          "example": [
            "cli: -metric_holdpaths 'place 0 10'",
            "api: fpga.set('metric', 'holdpaths', 10, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of timing paths violating hold\nconstraints.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "setuppaths": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setuppaths 'step index <int>'"
          ],
          "shorthelp": "Metric: setuppaths",
          "example": [
            "cli: -metric_setuppaths 'place 0 10'",
            "api: fpga.set('metric', 'setuppaths', 10, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of timing paths violating setup\nconstraints.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "holdslack": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdslack 'step index <float>'"
          ],
          "shorthelp": "Metric: holdslack",
          "example": [
            "cli: -metric_holdslack 'place 0 0.01'",
            "api: fpga.set('metric', 'holdslack', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst hold slack (positive or negative) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "holdwns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdwns 'step index <float>'"
          ],
          "shorthelp": "Metric: holdwns",
          "example": [
            "cli: -metric_holdwns 'place 0 0.01'",
            "api: fpga.set('metric', 'holdwns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst negative hold slack (positive values truncated to zero) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "holdtns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdtns 'step index <float>'"
          ],
          "shorthelp": "Metric: holdtns",
          "example": [
            "cli: -metric_holdtns 'place 0 0.01'",
            "api: fpga.set('metric', 'holdtns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the total negative hold slack (TNS) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "holdskew": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdskew 'step index <float>'"
          ],
          "shorthelp": "Metric: holdskew",
          "example": [
            "cli: -metric_holdskew 'place 0 0.01'",
            "api: fpga.set('metric', 'holdskew', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the hold clock skew on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setupslack": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setupslack 'step index <float>'"
          ],
          "shorthelp": "Metric: setupslack",
          "example": [
            "cli: -metric_setupslack 'place 0 0.01'",
            "api: fpga.set('metric', 'setupslack', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst setup slack (positive or negative) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setupwns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setupwns 'step index <float>'"
          ],
          "shorthelp": "Metric: setupwns",
          "example": [
            "cli: -metric_setupwns 'place 0 0.01'",
            "api: fpga.set('metric', 'setupwns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst negative setup slack (positive values truncated to zero) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setuptns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setuptns 'step index <float>'"
          ],
          "shorthelp": "Metric: setuptns",
          "example": [
            "cli: -metric_setuptns 'place 0 0.01'",
            "api: fpga.set('metric', 'setuptns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the total negative setup slack (TNS) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setupskew": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setupskew 'step index <float>'"
          ],
          "shorthelp": "Metric: setupskew",
          "example": [
            "cli: -metric_setupskew 'place 0 0.01'",
            "api: fpga.set('metric', 'setupskew', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the setup clock skew on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "fmax": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_fmax 'step index <float>'"
          ],
          "shorthelp": "Metric: fmax",
          "example": [
            "cli: -metric_fmax 'place 0 100e6'",
            "api: fpga.set('metric', 'fmax', 100e6, step='place', index=0)"
          ],
          "help": "Metric tracking the maximum clock frequency on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "Hz"
        },
        "macros": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_macros 'step index <int>'"
          ],
          "shorthelp": "Metric: macros",
          "example": [
            "cli: -metric_macros 'place 0 100'",
            "api: fpga.set('metric', 'macros', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of macros in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "cells": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_cells 'step index <int>'"
          ],
          "shorthelp": "Metric: cells",
          "example": [
            "cli: -metric_cells 'place 0 100'",
            "api: fpga.set('metric', 'cells', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of cell instances in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "registers": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_registers 'step index <int>'"
          ],
          "shorthelp": "Metric: registers",
          "example": [
            "cli: -metric_registers 'place 0 100'",
            "api: fpga.set('metric', 'registers', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of register instances in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pins": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_pins 'step index <int>'"
          ],
          "shorthelp": "Metric: pins",
          "example": [
            "cli: -metric_pins 'place 0 100'",
            "api: fpga.set('metric', 'pins', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of pins in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "nets": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_nets 'step index <int>'"
          ],
          "shorthelp": "Metric: nets",
          "example": [
            "cli: -metric_nets 'place 0 100'",
            "api: fpga.set('metric', 'nets', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of nets in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "wirelength": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_wirelength 'step index <float>'"
          ],
          "shorthelp": "Metric: wirelength",
          "example": [
            "cli: -metric_wirelength 'place 0 100.0'",
            "api: fpga.set('metric', 'wirelength', 50.0, step='place', index=0)"
          ],
          "help": "Metric tracking the total wirelength of the design on a per step\nand index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "overflow": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_overflow 'step index <int>'"
          ],
          "shorthelp": "Metric: overflow",
          "example": [
            "cli: -metric_overflow 'place 0 0'",
            "api: fpga.set('metric', 'overflow', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of overflow tracks for the routing\non per step and index basis. Any non-zero number suggests an over\ncongested design. To analyze where the congestion is occurring\ninspect the router log files for detailed per metal overflow\nreporting and open up the design to find routing hotspots.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.metrics.fpga/FPGAMetricsSchema",
          "sctype": "MetricSchema"
        }
      },
      "record": {
        "userid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_userid 'step index <str>'"
          ],
          "shorthelp": "Record: userid",
          "example": [
            "cli: -record_userid 'dfm 0 wiley'",
            "api: schema.set('record', 'userid', 'wiley', step='dfm', index=0)"
          ],
          "help": "Record tracking the userid per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "publickey": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_publickey 'step index <str>'"
          ],
          "shorthelp": "Record: public key",
          "example": [
            "cli: -record_publickey 'dfm 0 <key>'",
            "api: schema.set('record', 'publickey', '<key>', step='dfm', index=0)"
          ],
          "help": "Record tracking the public key per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "machine": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_machine 'step index <str>'"
          ],
          "shorthelp": "Record: machine name",
          "example": [
            "cli: -record_machine 'dfm 0 carbon'",
            "api: schema.set('record', 'machine', 'carbon', step='dfm', index=0)"
          ],
          "help": "Record tracking the machine name per step and index basis. (myhost, localhost, ...",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "macaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_macaddr 'step index <str>'"
          ],
          "shorthelp": "Record: MAC address",
          "example": [
            "cli: -record_macaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'macaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the MAC address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "ipaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_ipaddr 'step index <str>'"
          ],
          "shorthelp": "Record: IP address",
          "example": [
            "cli: -record_ipaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'ipaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the IP address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "platform": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_platform 'step index <str>'"
          ],
          "shorthelp": "Record: platform name",
          "example": [
            "cli: -record_platform 'dfm 0 linux'",
            "api: schema.set('record', 'platform', 'linux', step='dfm', index=0)"
          ],
          "help": "Record tracking the platform name per step and index basis. (linux, windows, freebsd)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "distro": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_distro 'step index <str>'"
          ],
          "shorthelp": "Record: distro name",
          "example": [
            "cli: -record_distro 'dfm 0 ubuntu'",
            "api: schema.set('record', 'distro', 'ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the distro name per step and index basis. (ubuntu, redhat, centos)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "arch": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_arch 'step index <str>'"
          ],
          "shorthelp": "Record: hardware architecture",
          "example": [
            "cli: -record_arch 'dfm 0 x86_64'",
            "api: schema.set('record', 'arch', 'x86_64', step='dfm', index=0)"
          ],
          "help": "Record tracking the hardware architecture per step and index basis. (x86_64, rv64imafdc)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "starttime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_starttime 'step index <str>'"
          ],
          "shorthelp": "Record: start time",
          "example": [
            "cli: -record_starttime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'starttime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the start time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "endtime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_endtime 'step index <str>'"
          ],
          "shorthelp": "Record: end time",
          "example": [
            "cli: -record_endtime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'endtime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the end time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "region": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_region 'step index <str>'"
          ],
          "shorthelp": "Record: cloud region",
          "example": [
            "cli: -record_region 'dfm 0 \"US Gov Boston\"'",
            "api: schema.set('record', 'region', '\"US Gov Boston\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the cloud region per step and index basis. Recommended naming methodology:\n\n* local: node is the local machine\n* onprem: node in on-premises IT infrastructure\n* public: generic public cloud\n* govcloud: generic US government cloud\n* <region>: cloud and entity specific region string name",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "scversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_scversion 'step index <str>'"
          ],
          "shorthelp": "Record: software version",
          "example": [
            "cli: -record_scversion 'dfm 0 1.0'",
            "api: schema.set('record', 'scversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the software version per step and index basis. Version number for the SiliconCompiler software.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolversion 'step index <str>'"
          ],
          "shorthelp": "Record: tool version",
          "example": [
            "cli: -record_toolversion 'dfm 0 1.0'",
            "api: schema.set('record', 'toolversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool version per step and index basis. The tool version captured corresponds to the 'tool'\nparameter within the 'tool' dictionary.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolpath": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolpath 'step index <str>'"
          ],
          "shorthelp": "Record: tool path",
          "example": [
            "cli: -record_toolpath 'dfm 0 /usr/bin/openroad'",
            "api: schema.set('record', 'toolpath', '/usr/bin/openroad', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool path per step and index basis. Full path to tool executable used to run this\ntask.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolargs": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolargs 'step index <str>'"
          ],
          "shorthelp": "Record: tool CLI arguments",
          "example": [
            "cli: -record_toolargs 'dfm 0 \"-I include/ foo.v\"'",
            "api: schema.set('record', 'toolargs', '\"-I include/ foo.v\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool CLI arguments per step and index basis. Arguments passed to tool via CLI.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonversion 'step index <str>'"
          ],
          "shorthelp": "Record: Python version",
          "example": [
            "cli: -record_pythonversion 'dfm 0 3.12.3'",
            "api: schema.set('record', 'pythonversion', '3.12.3', step='dfm', index=0)"
          ],
          "help": "Record tracking the Python version per step and index basis. Version of python used to run this task.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "osversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_osversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S version",
          "example": [
            "cli: -record_osversion 'dfm 0 20.04.1-Ubuntu'",
            "api: schema.set('record', 'osversion', '20.04.1-Ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S version per step and index basis. Since there is not standard version system for operating\nsystems, extracting information from is platform dependent.\nFor Linux based operating systems, the 'osversion' is the\nversion of the distro.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "kernelversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_kernelversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S kernel version",
          "example": [
            "cli: -record_kernelversion 'dfm 0 5.11.0-34-generic'",
            "api: schema.set('record', 'kernelversion', '5.11.0-34-generic', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S kernel version per step and index basis. Used for platforms that support a distinction\nbetween os kernels and os distributions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolexitcode": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolexitcode 'step index <int>'"
          ],
          "shorthelp": "Record: tool exit code",
          "example": [
            "cli: -record_toolexitcode 'dfm 0 0'",
            "api: schema.set('record', 'toolexitcode', 0, step='dfm', index=0)"
          ],
          "help": "Record tracking the tool exit code per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "remoteid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_remoteid '<str>'"
          ],
          "shorthelp": "Record: remote job ID",
          "example": [
            "cli: -record_remoteid '0123456789abcdeffedcba9876543210'",
            "api: schema.set('record', 'remoteid', '0123456789abcdeffedcba9876543210')"
          ],
          "help": "Record tracking the job ID for a remote run.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonpackage": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonpackage '<str>'"
          ],
          "shorthelp": "Record: python packages",
          "example": [
            "cli: -record_pythonpackage 'siliconcompiler==0.28.0'",
            "api: schema.set('record', 'pythonpackage', 'siliconcompiler==0.28.0')"
          ],
          "help": "Record tracking for the python packages installed.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "status": {
          "type": "<error,pending,queued,running,skipped,success,timeout>",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_status 'step index <str>'"
          ],
          "shorthelp": "Record: node execution status",
          "example": [
            "cli: -record_status 'syn 0 success'",
            "api: schema.set('record', 'status', 'success', step='syn', index='0')"
          ],
          "help": "Record tracking for the status of a node.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "inputnode": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_inputnode 'step index <(str,str)>'"
          ],
          "shorthelp": "Record: node inputs",
          "example": [
            "cli: -record_inputnode 'cts 0 (place,42)'",
            "api: schema.set('record', 'inputnode', ('place', '42'), step='syn', index='0')"
          ],
          "help": "List of selected inputs for the current step/index specified as\n(in_step, in_index) tuple.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.record/RecordSchema",
          "sctype": "RecordSchema"
        }
      },
      "tool": {
        "default": {
          "task": {
            "default": {
              "dataroot": {
                "default": {
                  "path": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory path",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
                    ],
                    "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  },
                  "tag": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory reference tag/version",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
                    ],
                    "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  }
                }
              },
              "exe": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_exe 'tool <str>'"
                ],
                "shorthelp": "Tool: executable name",
                "example": [
                  "cli: -tool_exe 'openroad openroad'",
                  "api: task.set('tool', 'openroad', 'exe', 'openroad')"
                ],
                "help": "Tool executable name.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "sbom": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_sbom 'tool version <file>'"
                  ],
                  "shorthelp": "Tool: software BOM",
                  "example": [
                    "cli: -tool_sbom 'yosys 1.0.1 ys_sbom.json'",
                    "api: task.set('tool', 'yosys', 'sbom', '1.0', 'ys_sbom.json')"
                  ],
                  "help": "Paths to software bill of material (SBOM) document file of the tool\nspecified on a per version basis. The SBOM includes critical\npackage information about the tool including the list of included\ncomponents, licenses, and copyright. The SBOM file is generally\nprovided as in a a standardized open data format such as SPDX.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "path": {
                "type": "dir",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_path 'tool <dir>'"
                ],
                "shorthelp": "Tool: executable path",
                "example": [
                  "cli: -tool_path 'openroad /usr/local/bin'",
                  "api: task.set('tool', 'openroad', 'path', '/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is prepended to the\nsystem PATH environment variable for batch and interactive runs. The\npath parameter can be left blank if the :keypath:`tool,<tool>,task,<task>,exe` is\nalready in the environment search path.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null,
                      "filehash": null,
                      "dataroot": null
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "vswitch": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vswitch 'tool <str>'"
                ],
                "shorthelp": "Tool: executable version switch",
                "example": [
                  "cli: -tool_vswitch 'openroad -version'",
                  "api: task.set('tool', 'openroad', 'vswitch', '-version')"
                ],
                "help": "Command line switch to use with executable used to print out\nthe version number. Common switches include ``-v``, ``-version``,\n``--version``. Some tools may require extra flags to run in batch mode.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "vendor": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vendor 'tool <str>'"
                ],
                "shorthelp": "Tool: vendor",
                "example": [
                  "cli: -tool_vendor 'yosys yosys'",
                  "api: task.set('tool', 'yosys', 'vendor', 'yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor\nspecific technology variables in the PDK and libraries. For\nopen source projects, the project name should be used in\nplace of vendor.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "version": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_version 'tool <str>'"
                ],
                "shorthelp": "Tool: version",
                "example": [
                  "cli: -tool_version 'openroad >=v2.0'",
                  "api: task.set('tool', 'openroad', 'version', '>=v2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used. Each\nentry in this list must be a version specifier as described by Python\n`PEP-440 <https://peps.python.org/pep-0440/#version-specifiers>`_.\nDuring task execution, the tool is called with the 'vswitch' to\ncheck the runtime executable version. If the version of the system\nexecutable is not allowed by any of the specifiers in 'version',\nthen the job is halted pre-execution. For backwards compatibility,\nentries that do not conform to the standard will be interpreted as a\nversion with an '==' specifier. This check can be disabled by\nsetting :keypath:`option,novercheck` to True.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "format": {
                "type": "<json,tcl,yaml>",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_format 'tool <str>'"
                ],
                "shorthelp": "Tool: file format",
                "example": [
                  "cli: -tool_format 'yosys tcl'",
                  "api: task.set('tool', 'yosys', 'format', 'tcl')"
                ],
                "help": "File format for tool manifest handoff.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "licenseserver": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_licenseserver 'name key <str>'"
                  ],
                  "shorthelp": "Tool: license servers",
                  "example": [
                    "cli: -tool_licenseserver 'atask ACME_LICENSE 1700@server'",
                    "api: task.set('tool', 'acme', 'licenseserver', 'ACME_LICENSE', '1700@server')"
                  ],
                  "help": "Defines a set of tool-specific environment variables used by the executable\nthat depend on license key servers to control access. For multiple servers,\nseparate servers with a colon. The named license variables are read at\nruntime (:meth:`.Task.run()`) and the environment variables are set.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "warningoff": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_warningoff 'tool task <str>'"
                ],
                "shorthelp": "Task: warning filter",
                "example": [
                  "cli: -tool_task_warningoff 'verilator lint COMBDLY'",
                  "api: task.set('tool', 'verilator', 'task', 'lint', 'warningoff', 'COMBDLY')"
                ],
                "help": "A list of tool warnings for which printing should be suppressed.\nGenerally this is done on a per design basis after review has\ndetermined that warning can be safely ignored The code for turning\noff warnings can be found in the specific task reference manual.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "regex": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_regex 'tool task suffix <str>'"
                  ],
                  "shorthelp": "Task: regex filter",
                  "example": [
                    "cli: -tool_task_regex 'openroad place errors \"'-v ERROR'\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'regex', 'errors', '-v ERROR')"
                  ],
                  "help": "A list of piped together grep commands. Each entry represents a set\nof command line arguments for grep including the regex pattern to\nmatch. Starting with the first list entry, each grep output is piped\ninto the following grep command in the list. Supported grep options\ninclude ``-v`` and ``-e``. Patterns starting with \"-\" should be\ndirectly preceded by the ``-e`` option. The following example\nillustrates the concept.\n\nUNIX grep:\n\n.. code-block:: bash\n\n    $ grep WARNING place.log | grep -v \"bbox\" > place.warnings\n\nSiliconCompiler::\n\n    task.set('task', 'openroad', 'regex', 'place', '0', 'warnings',\n             [\"WARNING\", \"-v bbox\"])\n\nThe \"errors\" and \"warnings\" suffixes are special cases. When set,\nthe number of matches found for these regexes will be added to the\nerrors and warnings metrics for the task, respectively. This will\nalso cause the logfile to be added to the :keypath:`tool, <tool>,\ntask, <task>, report` parameter for those metrics, if not already present.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "option": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_option 'tool task <str>'"
                ],
                "shorthelp": "Task: executable options",
                "example": [
                  "cli: -tool_task_option 'openroad cts -no_init'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'option', '-no_init')"
                ],
                "help": "List of command line options for the task executable, specified on\na per task and per step basis. Options must not include spaces.\nFor multiple argument options, each option is a separate list element.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "env": {
                "default": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_env 'tool task env <str>'"
                  ],
                  "shorthelp": "Task: environment variables",
                  "example": [
                    "cli: -tool_task_env 'openroad cts MYVAR 42'",
                    "api: task.set('tool', 'openroad', 'task', 'cts', 'env', 'MYVAR', '42')"
                  ],
                  "help": "Environment variables to set for individual tasks. Keys and values\nshould be set in accordance with the task's documentation. Most\ntasks do not require extra environment variables to function.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "input": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_input 'tool task <file>'"
                ],
                "shorthelp": "Task: input files",
                "example": [
                  "cli: -tool_task_input 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'input', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key :keypath:`flowgraph,<flow>,<step>,<index>,input`.\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "output": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_output 'tool task <file>'"
                ],
                "shorthelp": "Task: output files",
                "example": [
                  "cli: -tool_task_output 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'output', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files written to the 'output' directory of the\ntool/task/step/index used in the keypath. All files must be available\nfor flow to continue. If a file is missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "stdout": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stdout",
                  "example": [
                    "cli: -tool_task_stdout_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stdout.\nSupported options are:\nnone: the stream generated to STDOUT is ignored.\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stdout",
                  "example": [
                    "cli: -tool_task_stdout_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stdout.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "stderr": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stderr",
                  "example": [
                    "cli: -tool_task_stderr_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stderr.\nSupported options are:\nnone: the stream generated to STDERR is ignored\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stderr",
                  "example": [
                    "cli: -tool_task_stderr_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stderr.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "require": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_require 'tool task <str>'"
                ],
                "shorthelp": "Task: parameter requirements",
                "example": [
                  "cli: -tool_task_require 'openroad cts design'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'require', 'design')"
                ],
                "help": "List of keypaths to required task parameters. The list is used\nby :meth:`.Project.check_manifest()` to verify that all parameters have been set up\nbefore step execution begins.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "report": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_report 'tool task metric <file>'"
                  ],
                  "shorthelp": "Task: metric report files",
                  "example": [
                    "cli: -tool_task_report 'openroad place holdtns \"place 0 place.log\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'report', 'holdtns', 'place.log', step='place', index='0')"
                  ],
                  "help": "List of report files associated with a specific 'metric'. The file path\nspecified is relative to the run directory of the current task.",
                  "notes": null,
                  "pernode": "required",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "refdir": {
                "type": "[dir]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_refdir 'tool task <dir>'"
                ],
                "shorthelp": "Task: script directory",
                "example": [
                  "cli: -tool_task_refdir 'yosys syn ./myref'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'refdir', './myref')"
                ],
                "help": "Path to directories containing reference flow scripts, specified\non a per step and index basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "script": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_script 'tool task <file>'"
                ],
                "shorthelp": "Task: entry script",
                "example": [
                  "cli: -tool_task_script 'yosys syn syn.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'script', 'syn.tcl')"
                ],
                "help": "Path to the entry script called by the executable specified\non a per task and per step basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "prescript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_prescript 'tool task <file>'"
                ],
                "shorthelp": "Task: pre-step script",
                "example": [
                  "cli: -tool_task_prescript 'yosys syn syn_pre.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'prescript', 'syn_pre.tcl')"
                ],
                "help": "Path to a user supplied script to execute after reading in the design\nbut before the main execution stage of the step. Exact entry point\ndepends on the step and main script being executed. An example\nof a prescript entry point would be immediately before global\nplacement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "postscript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_postscript 'tool task <file>'"
                ],
                "shorthelp": "Task: post-step script",
                "example": [
                  "cli: -tool_task_postscript 'yosys syn syn_post.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'postscript', 'syn_post.tcl')"
                ],
                "help": "Path to a user supplied script to execute after the main execution\nstage of the step but before the design is saved.\nExact entry point depends on the step and main script being\nexecuted. An example of a postscript entry point would be immediately\nafter global placement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "threads": {
                "type": "int",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_threads 'tool task <int>'"
                ],
                "shorthelp": "Task: thread parallelism",
                "example": [
                  "cli: -tool_task_threads 'magic drc 64'",
                  "api: task.set('tool', 'magic', 'task', 'drc', 'threads', '64')"
                ],
                "help": "Thread parallelism to use for execution specified on a per task and per\nstep basis. If not specified, SC queries the operating system and sets\nthe threads based on the maximum thread count supported by the\nhardware.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "__meta__": {
                "name": null,
                "class": "siliconcompiler.tool/Task",
                "sctype": "Task"
              }
            }
          }
        }
      },
      "option": {
        "remote": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-remote <bool>"
          ],
          "shorthelp": "Option: enable remote processing",
          "example": [
            "cli: -remote",
            "api: option.set('remote', True)"
          ],
          "help": "\n                Sends job for remote processing if set to true. The remote\n                option requires a credentials file to be placed in the home\n                directory. Fore more information, see the credentials\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "credentials": {
          "type": "file",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-credentials <file>"
          ],
          "shorthelp": "Option: user credentials file",
          "example": [
            "cli: -credentials /home/user/.sc/credentials",
            "api: option.set('credentials', '/home/user/.sc/credentials')"
          ],
          "help": "\n                Filepath to credentials used for remote processing. If the\n                credentials parameter is empty, the remote processing client program\n                tries to access the \".sc/credentials\" file in the user's home\n                directory. The file supports the following fields:\n\n                address=<server address>\n                port=<server port> (optional)\n                username=<user id> (optional)\n                password=<password / key used for authentication> (optional)",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null,
                "date": null,
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "cachedir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-cachedir <dir>"
          ],
          "shorthelp": "Option: user cache directory",
          "example": [
            "cli: -cachedir /home/user/.sc/cache",
            "api: option.set('cachedir', '/home/user/.sc/cache')"
          ],
          "help": "\n                Filepath to cache used for package data sources. If the\n                cache parameter is empty, \".sc/cache\" directory in the user's home\n                directory will be used.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "nice": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nice <int>"
          ],
          "shorthelp": "Option: tool scheduling priority",
          "example": [
            "cli: -nice 5",
            "api: option.set('nice', 5)"
          ],
          "help": "\n                Sets the type of execution priority of each individual flowgraph steps.\n                If the parameter is undefined, nice will not be used. For more information see\n                `Unix 'nice' <https://en.wikipedia.org/wiki/Nice_(Unix)>`_.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "flow": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-flow <str>"
          ],
          "shorthelp": "Option: flow target",
          "example": [
            "cli: -flow asicflow",
            "api: option.set('flow', 'asicflow')"
          ],
          "help": "\n                Sets the flow for the current run. The flow name\n                must match up with a 'flow' in the flowgraph",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "optmode": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-O<str>",
            "-optmode <str>"
          ],
          "shorthelp": "Option: optimization mode",
          "example": [
            "cli: -O3",
            "cli: -optmode 3",
            "api: option.set('optmode', 'O3')"
          ],
          "help": "\n                The compiler has modes to prioritize run time and ppa. Modes\n                include.\n\n                (O0) = Exploration mode for debugging setup\n                (O1) = Higher effort and better PPA than O0\n                (O2) = Higher effort and better PPA than O1\n                (O3) = Signoff quality. Better PPA and higher run times than O2\n                (O4-O98) = Reserved (compiler/target dependent)\n                (O99) = Experimental highest possible effort, may be unstable\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": 0,
                "signature": null
              }
            }
          }
        },
        "builddir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-builddir <dir>"
          ],
          "shorthelp": "Option: build directory",
          "example": [
            "cli: -builddir ./build_the_future",
            "api: option.set('builddir', './build_the_future')"
          ],
          "help": "\n                The default build directory is in the local './build' where SC was\n                executed. This can be used to set an alternate\n                compilation directory path.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "build",
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "jobname": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobname <str>"
          ],
          "shorthelp": "Option: job name",
          "example": [
            "cli: -jobname may1",
            "api: option.set('jobname', 'may1')"
          ],
          "help": "\n                Jobname during invocation of :meth:`.Project.run()`. The jobname combined with a\n                defined director structure (<dir>/<design>/<jobname>/<step>/<index>)\n                enables multiple levels of transparent job, step, and index\n                introspection.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "job0",
                "signature": null
              }
            }
          }
        },
        "from": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-from <str>"
          ],
          "shorthelp": "Option: starting step",
          "example": [
            "cli: -from 'import'",
            "api: option.set('from', 'import')"
          ],
          "help": "\n                Inclusive list of steps to start execution from. The default is to start\n                at all entry steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "to": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-to <str>"
          ],
          "shorthelp": "Option: ending step",
          "example": [
            "cli: -to 'syn'",
            "api: option.set('to', 'syn')"
          ],
          "help": "\n                Inclusive list of steps to end execution with. The default is to go\n                to all exit steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "prune": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-prune 'node <(str,str)>'"
          ],
          "shorthelp": "Option: flowgraph pruning",
          "example": [
            "cli: -prune (syn,0)",
            "api: option.set('prune', ('syn', '0'))"
          ],
          "help": "\n                List of starting nodes for branches to be pruned.\n                The default is to not prune any nodes/branches.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "breakpoint": {
          "type": "bool",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-breakpoint <bool>"
          ],
          "shorthelp": "Option: breakpoint list",
          "example": [
            "cli: -breakpoint true",
            "api: option.set('breakpoint', True)"
          ],
          "help": "\n                Set a breakpoint on specific steps. If the step is a TCL\n                based tool, then the breakpoints stops the flow inside the\n                EDA tool. If the step is a command line tool, then the flow\n                drops into a Python interpreter.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "clean": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-clean <bool>"
          ],
          "shorthelp": "Option: cleanup previous job",
          "example": [
            "cli: -clean",
            "api: option.set('clean', True)"
          ],
          "help": "\n                Run a job from the start and do not use any of the previous job.\n                If :keypath:`option, jobincr` is True, the old job is preserved and\n                a new job number is assigned.\n                ",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "hash": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-hash <bool>"
          ],
          "shorthelp": "Option: file hashing",
          "example": [
            "cli: -hash",
            "api: option.set('hash', True)"
          ],
          "help": "\n                Enables hashing of all inputs and outputs during\n                compilation. The hash values are stored in the hashvalue\n                field of the individual parameters.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "nodisplay": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodisplay <bool>"
          ],
          "shorthelp": "Option: headless execution",
          "example": [
            "cli: -nodisplay",
            "api: option.set('nodisplay', True)"
          ],
          "help": "\n                This flag prevents SiliconCompiler from opening GUI windows.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "quiet": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-quiet <bool>"
          ],
          "shorthelp": "Option: quiet execution",
          "example": [
            "cli: -quiet",
            "api: option.set('quiet', True)"
          ],
          "help": "\n                The -quiet option forces all steps to print to a log file.\n                This can be useful with Modern EDA tools which print\n                significant content to the screen.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "jobincr": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobincr <bool>"
          ],
          "shorthelp": "Option: autoincrement jobname",
          "example": [
            "cli: -jobincr",
            "api: option.set('jobincr', True)"
          ],
          "help": "\n                Forces an auto-update of the jobname parameter if a directory\n                matching the jobname is found in the build directory. If the\n                jobname does not include a trailing digit, then the number\n                '1' is added to the jobname before updating the jobname\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "novercheck": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-novercheck <bool>"
          ],
          "shorthelp": "Option: disable version checking",
          "example": [
            "cli: -novercheck",
            "api: option.set('novercheck', True)"
          ],
          "help": "\n                Disables strict version checking on all invoked tools if True.\n                The list of supported version numbers is defined in the\n                :keypath:`tool,<tool>,task,<task>,version`.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "track": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-track <bool>"
          ],
          "shorthelp": "Option: enable provenance tracking",
          "example": [
            "cli: -track",
            "api: option.set('track', True)"
          ],
          "help": "\n                Turns on tracking of all 'record' parameters during each\n                task, otherwise only tool and runtime information will be recorded.\n                Tracking will result in potentially sensitive data\n                being recorded in the manifest so only turn on this feature\n                if you have control of the final manifest.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "continue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-continue <bool>"
          ],
          "shorthelp": "Option: continue-on-error",
          "example": [
            "cli: -continue",
            "api: option.set('continue', True)"
          ],
          "help": "\n                Attempt to continue even when errors are encountered in the SC\n                implementation. The default behavior is to quit executing the flow\n                if a task ends and the errors metric is greater than 0. Note that\n                the flow will always cease executing if the tool returns a nonzero\n                status code.\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "timeout": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-timeout <float>"
          ],
          "shorthelp": "Option: timeout value",
          "example": [
            "cli: -timeout 3600",
            "api: option.set('timeout', 3600)"
          ],
          "help": "\n                Timeout value in seconds. The timeout value is compared\n                against the wall time tracked by the SC runtime to determine\n                if an operation should continue.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "env": {
          "default": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: environment variables",
            "example": [
              "api: option.set('env', 'PDK_HOME', '/disk/mypdk')"
            ],
            "help": "Certain tools and reference flows require global environment\nvariables to be set. These variables can be managed externally or\nspecified through the env variable.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        },
        "design": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-design <str>"
          ],
          "shorthelp": "Option: Design library name",
          "example": [
            "cli: -design hello_world",
            "api: option.set('design', 'hello_world')"
          ],
          "help": "Name of the top level library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "alias": {
          "type": "[(str,str,str,str)]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Fileset alias mapping",
          "example": [
            "api: option.set('alias', ('design', 'rtl', 'lambda', 'rtl'))"
          ],
          "help": "List of filesets to alias during a run. When an alias is specific\nit will be used instead of the source fileset. It is useful when you\nwant to substitute a fileset from one library with a fileset from another,\nwithout changing the original design's code.\nFor example, you might use it to swap in a different version of an IP\nblock or a specific test environment.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "fileset": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Selected design filesets",
          "example": [
            "api: option.set('fileset', 'rtl')"
          ],
          "help": "List of filesets to use from the selected design library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "nodashboard": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodashboard <bool>"
          ],
          "shorthelp": "Option: Disables the dashboard",
          "example": [
            "api: option.set('nodashboard', True)"
          ],
          "help": "Disables the dashboard during execution",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "autoissue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-autoissue <bool>"
          ],
          "shorthelp": "Option: Enables automatic generation of testcases",
          "example": [
            "api: option.set('autoissue', True)"
          ],
          "help": "Enables automatic generation of testcases\nif the specific node fails",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "scheduler": {
          "name": {
            "type": "<docker,lsf,sge,slurm>",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler <str>"
            ],
            "shorthelp": "Option: scheduler platform",
            "example": [
              "cli: -scheduler slurm",
              "api: option.set('name', 'slurm')"
            ],
            "help": "\n                Sets the type of job scheduler to be used for each individual\n                flowgraph steps. If the parameter is undefined, the steps are executed\n                on the same machine that the SC was launched on. If 'slurm' is used,\n                the host running the 'sc' command must be running a 'slurmctld' daemon\n                managing a Slurm cluster. Additionally, the build directory\n                (:keypath:`option,builddir`) must be located in shared storage which\n                can be accessed by all hosts in the cluster.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "cores": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-cores <int>"
            ],
            "shorthelp": "Option: Scheduler core constraint",
            "example": [
              "cli: -cores 48",
              "api: option.set('cores', 48)"
            ],
            "help": "\n                Specifies the number CPU cores required to run the job.\n                For the slurm scheduler, this translates to the '-c'\n                switch. For more information, see the job scheduler\n                documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "memory": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-memory <int>"
            ],
            "shorthelp": "Option: scheduler memory constraint",
            "example": [
              "cli: -memory 8000",
              "api: option.set('memory', 8000)"
            ],
            "help": "\n                Specifies the amount of memory required to run the job,\n                specified in MB. For the slurm scheduler, this translates to\n                the '--mem' switch. For more information, see the job\n                scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            },
            "unit": "MB"
          },
          "queue": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-queue <str>"
            ],
            "shorthelp": "Option: scheduler queue",
            "example": [
              "cli: -queue nightrun",
              "api: option.set('queue', 'nightrun')"
            ],
            "help": "\n                Send the job to the specified queue. With slurm, this\n                translates to 'partition'. The queue name must match\n                the name of an existing job scheduler queue. For more information,\n                see the job scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "defer": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-defer <str>"
            ],
            "shorthelp": "Option: scheduler start time",
            "example": [
              "cli: -defer 16:00",
              "api: option.set('defer', '16:00')"
            ],
            "help": "\n                Defer initiation of job until the specified time. The parameter\n                is pass through string for remote job scheduler such as slurm.\n                For more information about the exact format specification, see\n                the job scheduler documentation. Examples of valid slurm specific\n                values include: now+1hour, 16:00, 010-01-20T12:34:00. For more\n                information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "options": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler_options <str>"
            ],
            "shorthelp": "Option: scheduler arguments",
            "example": [
              "cli: -scheduler_options \"--pty\"",
              "api: option.set('options', \"--pty\")"
            ],
            "help": "\n                Advanced/export options passed through unchanged to the job\n                scheduler as-is. (The user specified options must be compatible\n                with the rest of the scheduler parameters entered.(memory etc).\n                For more information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgevent": {
            "type": "{<all,begin,end,fail,summary,timeout>}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgevent <str>"
            ],
            "shorthelp": "Option: message event trigger",
            "example": [
              "cli: -msgevent all",
              "api: option.set('msgevent', 'all')"
            ],
            "help": "\n                Directs job scheduler to send a message to the user in\n                :keypath:`option,scheduler,msgcontact` when certain events occur\n                during a task.\n\n                * fail: send an email on failures\n                * timeout: send an email on timeouts\n                * begin: send an email at the start of a node task\n                * end: send an email at the end of a node task\n                * summary: send a summary email at the end of the run\n                * all: send an email on any event\n                ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgcontact": {
            "type": "{str}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgcontact <str>"
            ],
            "shorthelp": "Option: message contact",
            "example": [
              "cli: -msgcontact 'wile.e.coyote@acme.com'",
              "api: option.set('msgcontact', 'wiley@acme.com')"
            ],
            "help": "\n                List of email addresses to message on a :keypath:`option,scheduler,msgevent`.\n                Support for email messages relies on job scheduler daemon support.\n                For more information, see the job scheduler documentation. ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "maxnodes": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-maxnodes <int>"
            ],
            "shorthelp": "Option: maximum concurrent nodes",
            "example": [
              "cli: -maxnodes 4",
              "api: option.set('maxnodes', 4)"
            ],
            "help": "\n                Maximum number of concurrent nodes to run in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "maxthreads": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: maximum number of threads to assign a task",
            "example": [
              "api: option.set('maxthreads', 4)"
            ],
            "help": "\n                Maximum number of threads for each task in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "__meta__": {
            "class": "siliconcompiler.schema_support.option/SchedulerSchema",
            "sctype": "BaseSchema"
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.option/OptionSchema",
          "sctype": "BaseSchema"
        }
      },
      "history": {},
      "constraint": {
        "timing": {
          "default": {
            "mode": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_mode 'scenario <str>'"
              ],
              "shorthelp": "Constraint: operating mode",
              "example": [
                "api: fpga.set('constraint', 'timing', 'worst', 'mode', 'test')"
              ],
              "help": "Operating mode for the scenario. Operating mode strings\n                can be values such as test, functional, standby.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.constraints.fpga_timing/FPGATimingScenarioSchema"
            }
          },
          "__meta__": {
            "class": "siliconcompiler.constraints.fpga_timing/FPGATimingConstraintSchema",
            "sctype": "BaseSchema"
          }
        },
        "component": {
          "__meta__": {
            "class": "siliconcompiler.constraints/FPGAComponentConstraints",
            "sctype": "BaseSchema"
          }
        },
        "pin": {
          "__meta__": {
            "class": "siliconcompiler.constraints/FPGAPinConstraints",
            "sctype": "BaseSchema"
          }
        },
        "__meta__": {
          "class": "siliconcompiler.fpga/FPGAConstraint",
          "sctype": "BaseSchema"
        }
      },
      "fpga": {
        "device": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": null,
          "example": [],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "__meta__": {
        "class": "siliconcompiler.fpga/FPGA",
        "sctype": "FPGA"
      }
    },
    "asic": {
      "schemaversion": {
        "type": "str",
        "require": true,
        "scope": "global",
        "lock": true,
        "switch": [],
        "shorthelp": "Schema version number",
        "example": [
          "api: project.get('schemaversion')"
        ],
        "help": null,
        "notes": null,
        "pernode": "never",
        "node": {
          "default": {
            "default": {
              "value": "0.52.1",
              "signature": null
            }
          }
        }
      },
      "arg": {
        "step": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_step <str>"
          ],
          "shorthelp": "ARG: step argument",
          "example": [
            "cli: -arg_step 'route'",
            "api: project.set('arg', 'step', 'route')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "index": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_index <str>"
          ],
          "shorthelp": "ARG: index argument",
          "example": [
            "cli: -arg_index 0",
            "api: project.set('arg', 'index', '0')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "checklist": {
        "default": {
          "default": {
            "description": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_description 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item description",
              "example": [
                "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                "api: check.set('checklist', 'ISO', 'D000', 'description', 'A-DESCRIPTION')"
              ],
              "help": "A short one line description of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "requirement": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_requirement 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item requirement",
              "example": [
                "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                "api: check.set('checklist', 'ISO', 'D000', 'requirement', 'DOCSTRING')"
              ],
              "help": "A complete requirement description of the checklist item\nentered as a multi-line string.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "dataformat": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_dataformat 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item data format",
              "example": [
                "cli: -checklist_dataformat 'ISO D000 README'",
                "api: check.set('checklist', 'ISO', 'D000', 'dataformat', 'README')"
              ],
              "help": "Free text description of the type of data files acceptable as\nchecklist signoff validation.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "rationale": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_rationale 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item rationale",
              "example": [
                "cli: -checklist_rationale 'ISO D000 reliability'",
                "api: check.set('checklist', 'ISO', 'D000', 'rationale', 'reliability')"
              ],
              "help": "Rationale for the checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "criteria": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_criteria 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item criteria",
              "example": [
                "cli: -checklist_criteria 'ISO D000 errors==0'",
                "api: check.set('checklist', 'ISO', 'D000', 'criteria', 'errors==0')"
              ],
              "help": "Simple list of signoff criteria for checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form\n'metric op value'.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "task": {
              "type": "[(str,str,str)]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_task 'standard item <(str,str,str)>'"
              ],
              "shorthelp": "Checklist: item task",
              "example": [
                "cli: -checklist_task 'ISO D000 (job0,place,0)'",
                "api: check.set('checklist', 'ISO', 'D000', 'task', ('job0', 'place', '0'))"
              ],
              "help": "Flowgraph job and task used to verify the checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "report": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_report 'standard item <file>'"
              ],
              "shorthelp": "Checklist: item report",
              "example": [
                "cli: -checklist_report 'ISO D000 my.rpt'",
                "api: check.set('checklist', 'ISO', 'D000', 'report', 'my.rpt')"
              ],
              "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            },
            "waiver": {
              "default": {
                "type": "[file]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-checklist_waiver 'standard item metric <file>'"
                ],
                "shorthelp": "Checklist: item metric waivers",
                "example": [
                  "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                  "api: check.set('checklist', 'ISO', 'D000', 'waiver', 'hold', 'my.txt')"
                ],
                "help": "Filepath to report(s) documenting waivers for the checklist\nitem specified on a per metric basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              }
            },
            "ok": {
              "type": "bool",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_ok 'standard item <bool>'"
              ],
              "shorthelp": "Checklist: item ok",
              "example": [
                "cli: -checklist_ok 'ISO D000 true'",
                "api: check.set('checklist', 'ISO', 'D000', 'ok', True)"
              ],
              "help": "Boolean check mark for the checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters and verified they check out.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": false,
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.checklist/Criteria",
              "sctype": "Criteria"
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.checklist/Checklist",
            "sctype": "Checklist"
          }
        }
      },
      "library": {
        "__meta__": {
          "class": "siliconcompiler.project/_ProjectLibrary",
          "sctype": "BaseSchema"
        }
      },
      "flowgraph": {
        "default": {
          "default": {
            "default": {
              "input": {
                "type": "[(str,str)]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_input 'flow step index <(str,str)>'"
                ],
                "shorthelp": "Flowgraph: step input",
                "example": [
                  "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                  "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'input', ('place', '0'))"
                ],
                "help": "A list of inputs for the current step and index, specified as a\n(step, index) tuple.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "weight": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_weight 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric weights",
                  "example": [
                    "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'weight', 'area_cells', 1.0)"
                  ],
                  "help": "Weights specified on a per step and per metric basis used to give\neffective \"goodness\" score for a step by calculating the sum all step\nreal metrics results by the corresponding per step weights.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": 0.0,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "goal": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_goal 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric goals",
                  "example": [
                    "cli: -flowgraph_goal 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'goal', 'errors', 0)"
                  ],
                  "help": "Goals specified on a per step and per metric basis used to\ndetermine whether a certain task can be considered when merging\nmultiple tasks at a minimum or maximum node. A task is considered\nfailing if the absolute value of any of its metrics are larger than\nthe goal for that metric, if set.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "tool": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_tool 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: tool selection",
                "example": [
                  "cli: -flowgraph_tool 'asicflow place 0 openroad'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'tool', 'openroad')"
                ],
                "help": "Name of the tool name used for task execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "task": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_task 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task selection",
                "example": [
                  "cli: -flowgraph_task 'asicflow myplace 0 place'",
                  "api: flow.set('flowgraph', 'asicflow', 'myplace', '0', 'task', 'place')"
                ],
                "help": "Name of the tool associated task used for step execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "taskmodule": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_taskmodule 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task module",
                "example": [
                  "cli: -flowgraph_taskmodule 'asicflow place 0 siliconcompiler.tools.openroad.place'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'taskmodule', 'siliconcompiler.tools.openroad.place')"
                ],
                "help": "Full python module name of the task module used for task setup and execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "args": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_args 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: setup arguments",
                "example": [
                  "cli: -flowgraph_args 'asicflow cts 0 0'",
                  "api: flow.add('flowgraph', 'asicflow', 'cts', '0', 'args', '0')"
                ],
                "help": "User specified flowgraph string arguments specified on a per\nstep and per index basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "__meta__": {
                "class": "siliconcompiler.flowgraph/FlowgraphNodeSchema",
                "sctype": "FlowgraphNodeSchema"
              }
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.flowgraph/Flowgraph",
            "sctype": "Flowgraph"
          }
        }
      },
      "metric": {
        "errors": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_errors 'step index <int>'"
          ],
          "shorthelp": "Metric: total errors",
          "example": [
            "cli: -metric_errors 'dfm 0 0'",
            "api: project.set('metric', 'errors', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of errors on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "warnings": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_warnings 'step index <int>'"
          ],
          "shorthelp": "Metric: total warnings",
          "example": [
            "cli: -metric_warnings 'dfm 0 0'",
            "api: project.set('metric', 'warnings', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of warnings on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "memory": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_memory 'step index <float>'"
          ],
          "shorthelp": "Metric: memory",
          "example": [
            "cli: -metric_memory 'dfm 0 10e9'",
            "api: project.set('metric', 'memory', 10e9, step='dfm', index=0)"
          ],
          "help": "Metric tracking total peak program memory footprint on a per\nstep and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "B"
        },
        "exetime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_exetime 'step index <float>'"
          ],
          "shorthelp": "Metric: exetime",
          "example": [
            "cli: -metric_exetime 'dfm 0 10.0'",
            "api: project.set('metric', 'exetime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking time spent by the EDA executable\n:keypath:`tool,<tool>,task,<task>,exe` on a\nper step and index basis. It does not include the SiliconCompiler\nruntime overhead or time waiting for I/O operations and\ninter-processor communication to complete.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "tasktime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_tasktime 'step index <float>'"
          ],
          "shorthelp": "Metric: tasktime",
          "example": [
            "cli: -metric_tasktime 'dfm 0 10.0'",
            "api: project.set('metric', 'tasktime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent on a task from\nbeginning to end, including data transfers and pre/post\nprocessing.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "totaltime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_totaltime 'step index <float>'"
          ],
          "shorthelp": "Metric: totaltime",
          "example": [
            "cli: -metric_totaltime 'dfm 0 10.0'",
            "api: project.set('metric', 'totaltime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent from the beginning\nof the run up to and including the current step and index.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "drvs": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_drvs 'step index <int>'"
          ],
          "shorthelp": "Metric: total drvs",
          "example": [
            "cli: -metric_drvs 'dfm 0 0'",
            "api: asic.set('metric', 'drvs', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of design rule violations on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "drcs": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_drcs 'step index <int>'"
          ],
          "shorthelp": "Metric: total drcs",
          "example": [
            "cli: -metric_drcs 'dfm 0 0'",
            "api: asic.set('metric', 'drcs', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of physical design rule violations on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "unconstrained": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_unconstrained 'step index <int>'"
          ],
          "shorthelp": "Metric: total unconstrained",
          "example": [
            "cli: -metric_unconstrained 'dfm 0 0'",
            "api: asic.set('metric', 'unconstrained', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of unconstrained timing paths on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "cellarea": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_cellarea 'step index <float>'"
          ],
          "shorthelp": "Metric: cellarea",
          "example": [
            "cli: -metric_cellarea 'place 0 100.00'",
            "api: asic.set('metric', 'cellarea', 100.00, step='place', index=0)"
          ],
          "help": "Metric tracking the total cell area (ignoring fillers) occupied by the design.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "um^2"
        },
        "totalarea": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_totalarea 'step index <float>'"
          ],
          "shorthelp": "Metric: totalarea",
          "example": [
            "cli: -metric_totalarea 'place 0 100.00'",
            "api: asic.set('metric', 'totalarea', 100.00, step='place', index=0)"
          ],
          "help": "Metric tracking the total physical die area occupied by the design.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "um^2"
        },
        "macroarea": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_macroarea 'step index <float>'"
          ],
          "shorthelp": "Metric: macroarea",
          "example": [
            "cli: -metric_macroarea 'place 0 100.00'",
            "api: asic.set('metric', 'macroarea', 100.00, step='place', index=0)"
          ],
          "help": "Metric tracking the total macro cell area occupied by the design.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "um^2"
        },
        "padcellarea": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_padcellarea 'step index <float>'"
          ],
          "shorthelp": "Metric: padcellarea",
          "example": [
            "cli: -metric_padcellarea 'place 0 100.00'",
            "api: asic.set('metric', 'padcellarea', 100.00, step='place', index=0)"
          ],
          "help": "Metric tracking the total io pad cell area occupied by the design.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "um^2"
        },
        "stdcellarea": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_stdcellarea 'step index <float>'"
          ],
          "shorthelp": "Metric: stdcellarea",
          "example": [
            "cli: -metric_stdcellarea 'place 0 100.00'",
            "api: asic.set('metric', 'stdcellarea', 100.00, step='place', index=0)"
          ],
          "help": "Metric tracking the total standard cell area occupied by the design.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "um^2"
        },
        "utilization": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_utilization 'step index <float>'"
          ],
          "shorthelp": "Metric: area utilization",
          "example": [
            "cli: -metric_utilization 'place 0 50.00'",
            "api: asic.set('metric', 'utilization', 50.00, step='place', index=0)"
          ],
          "help": "Metric tracking the area utilization of the design calculated as\n100 * (cellarea/totalarea).",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "%"
        },
        "logicdepth": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_logicdepth 'step index <int>'"
          ],
          "shorthelp": "Metric: logic depth",
          "example": [
            "cli: -metric_logicdepth 'place 0 8'",
            "api: asic.set('metric', 'logicdepth', 8, step='place', index=0)"
          ],
          "help": "Metric tracking the logic depth of the design. This is determined\nby the number of logic gates between the start of the critital timing\npath to the end of the path.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "peakpower": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_peakpower 'step index <float>'"
          ],
          "shorthelp": "Metric: peakpower",
          "example": [
            "cli: -metric_peakpower 'place 0 0.01'",
            "api: asic.set('metric', 'peakpower', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst case total peak power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power peakpower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mw"
        },
        "averagepower": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_averagepower 'step index <float>'"
          ],
          "shorthelp": "Metric: averagepower",
          "example": [
            "cli: -metric_averagepower 'place 0 0.01'",
            "api: asic.set('metric', 'averagepower', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the average workload power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power averagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mw"
        },
        "leakagepower": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_leakagepower 'step index <float>'"
          ],
          "shorthelp": "Metric: leakagepower",
          "example": [
            "cli: -metric_leakagepower 'place 0 0.01'",
            "api: asic.set('metric', 'leakagepower', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the leakage power with rails active but without any dynamic switching activity of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power leakagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mw"
        },
        "irdrop": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_irdrop 'step index <float>'"
          ],
          "shorthelp": "Metric: peak IR drop",
          "example": [
            "cli: -metric_irdrop 'place 0 0.05'",
            "api: asic.set('metric', 'irdrop', 0.05, step='place', index=0)"
          ],
          "help": "Metric tracking the peak IR drop in the design based on extracted\npower and ground rail parasitics, library power models, and\nswitching activity. The switching activity calculated on a per\nnode basis is taken from one of three possible sources, in order\nof priority: VCD file, SAIF file, 'activityfactor' parameter.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mv"
        },
        "holdpaths": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdpaths 'step index <int>'"
          ],
          "shorthelp": "Metric: holdpaths",
          "example": [
            "cli: -metric_holdpaths 'place 0 10'",
            "api: asic.set('metric', 'holdpaths', 10, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of timing paths violating hold\nconstraints.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "setuppaths": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setuppaths 'step index <int>'"
          ],
          "shorthelp": "Metric: setuppaths",
          "example": [
            "cli: -metric_setuppaths 'place 0 10'",
            "api: asic.set('metric', 'setuppaths', 10, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of timing paths violating setup\nconstraints.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "holdslack": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdslack 'step index <float>'"
          ],
          "shorthelp": "Metric: holdslack",
          "example": [
            "cli: -metric_holdslack 'place 0 0.01'",
            "api: asic.set('metric', 'holdslack', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst hold slack (positive or negative) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "holdwns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdwns 'step index <float>'"
          ],
          "shorthelp": "Metric: holdwns",
          "example": [
            "cli: -metric_holdwns 'place 0 0.01'",
            "api: asic.set('metric', 'holdwns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst negative hold slack (positive values truncated to zero) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "holdtns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdtns 'step index <float>'"
          ],
          "shorthelp": "Metric: holdtns",
          "example": [
            "cli: -metric_holdtns 'place 0 0.01'",
            "api: asic.set('metric', 'holdtns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the total negative hold slack (TNS) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "holdskew": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_holdskew 'step index <float>'"
          ],
          "shorthelp": "Metric: holdskew",
          "example": [
            "cli: -metric_holdskew 'place 0 0.01'",
            "api: asic.set('metric', 'holdskew', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the hold clock skew on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setupslack": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setupslack 'step index <float>'"
          ],
          "shorthelp": "Metric: setupslack",
          "example": [
            "cli: -metric_setupslack 'place 0 0.01'",
            "api: asic.set('metric', 'setupslack', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst setup slack (positive or negative) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setupwns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setupwns 'step index <float>'"
          ],
          "shorthelp": "Metric: setupwns",
          "example": [
            "cli: -metric_setupwns 'place 0 0.01'",
            "api: asic.set('metric', 'setupwns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the worst negative setup slack (positive values truncated to zero) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setuptns": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setuptns 'step index <float>'"
          ],
          "shorthelp": "Metric: setuptns",
          "example": [
            "cli: -metric_setuptns 'place 0 0.01'",
            "api: asic.set('metric', 'setuptns', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the total negative setup slack (TNS) on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "setupskew": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_setupskew 'step index <float>'"
          ],
          "shorthelp": "Metric: setupskew",
          "example": [
            "cli: -metric_setupskew 'place 0 0.01'",
            "api: asic.set('metric', 'setupskew', 0.01, step='place', index=0)"
          ],
          "help": "Metric tracking the setup clock skew on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "ns"
        },
        "fmax": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_fmax 'step index <float>'"
          ],
          "shorthelp": "Metric: fmax",
          "example": [
            "cli: -metric_fmax 'place 0 100e6'",
            "api: asic.set('metric', 'fmax', 100e6, step='place', index=0)"
          ],
          "help": "Metric tracking the maximum clock frequency on a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "Hz"
        },
        "macros": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_macros 'step index <int>'"
          ],
          "shorthelp": "Metric: macros",
          "example": [
            "cli: -metric_macros 'place 0 100'",
            "api: asic.set('metric', 'macros', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of macros in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "cells": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_cells 'step index <int>'"
          ],
          "shorthelp": "Metric: cells",
          "example": [
            "cli: -metric_cells 'place 0 100'",
            "api: asic.set('metric', 'cells', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of cell instances in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "registers": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_registers 'step index <int>'"
          ],
          "shorthelp": "Metric: registers",
          "example": [
            "cli: -metric_registers 'place 0 100'",
            "api: asic.set('metric', 'registers', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of register instances in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "buffers": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_buffers 'step index <int>'"
          ],
          "shorthelp": "Metric: buffers",
          "example": [
            "cli: -metric_buffers 'place 0 100'",
            "api: asic.set('metric', 'buffers', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of buffer instances in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "inverters": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_inverters 'step index <int>'"
          ],
          "shorthelp": "Metric: inverters",
          "example": [
            "cli: -metric_inverters 'place 0 100'",
            "api: asic.set('metric', 'inverters', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of inverter instances in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "transistors": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_transistors 'step index <int>'"
          ],
          "shorthelp": "Metric: transistors",
          "example": [
            "cli: -metric_transistors 'place 0 100'",
            "api: asic.set('metric', 'transistors', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of transistors in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pins": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_pins 'step index <int>'"
          ],
          "shorthelp": "Metric: pins",
          "example": [
            "cli: -metric_pins 'place 0 100'",
            "api: asic.set('metric', 'pins', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of pins in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "nets": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_nets 'step index <int>'"
          ],
          "shorthelp": "Metric: nets",
          "example": [
            "cli: -metric_nets 'place 0 100'",
            "api: asic.set('metric', 'nets', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of nets in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "vias": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_vias 'step index <int>'"
          ],
          "shorthelp": "Metric: vias",
          "example": [
            "cli: -metric_vias 'place 0 100'",
            "api: asic.set('metric', 'vias', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of vias in the design\non a per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "wirelength": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_wirelength 'step index <float>'"
          ],
          "shorthelp": "Metric: wirelength",
          "example": [
            "cli: -metric_wirelength 'place 0 100.0'",
            "api: asic.set('metric', 'wirelength', 50.0, step='place', index=0)"
          ],
          "help": "Metric tracking the total wirelength of the design on a per step\nand index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "um"
        },
        "overflow": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_overflow 'step index <int>'"
          ],
          "shorthelp": "Metric: overflow",
          "example": [
            "cli: -metric_overflow 'place 0 0'",
            "api: asic.set('metric', 'overflow', 50, step='place', index=0)"
          ],
          "help": "Metric tracking the total number of overflow tracks for the routing\non per step and index basis. Any non-zero number suggests an over\ncongested design. To analyze where the congestion is occurring\ninspect the router log files for detailed per metal overflow\nreporting and open up the design to find routing hotspots.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.metrics.asic/ASICMetricsSchema",
          "sctype": "MetricSchema"
        }
      },
      "record": {
        "userid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_userid 'step index <str>'"
          ],
          "shorthelp": "Record: userid",
          "example": [
            "cli: -record_userid 'dfm 0 wiley'",
            "api: schema.set('record', 'userid', 'wiley', step='dfm', index=0)"
          ],
          "help": "Record tracking the userid per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "publickey": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_publickey 'step index <str>'"
          ],
          "shorthelp": "Record: public key",
          "example": [
            "cli: -record_publickey 'dfm 0 <key>'",
            "api: schema.set('record', 'publickey', '<key>', step='dfm', index=0)"
          ],
          "help": "Record tracking the public key per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "machine": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_machine 'step index <str>'"
          ],
          "shorthelp": "Record: machine name",
          "example": [
            "cli: -record_machine 'dfm 0 carbon'",
            "api: schema.set('record', 'machine', 'carbon', step='dfm', index=0)"
          ],
          "help": "Record tracking the machine name per step and index basis. (myhost, localhost, ...",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "macaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_macaddr 'step index <str>'"
          ],
          "shorthelp": "Record: MAC address",
          "example": [
            "cli: -record_macaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'macaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the MAC address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "ipaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_ipaddr 'step index <str>'"
          ],
          "shorthelp": "Record: IP address",
          "example": [
            "cli: -record_ipaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'ipaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the IP address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "platform": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_platform 'step index <str>'"
          ],
          "shorthelp": "Record: platform name",
          "example": [
            "cli: -record_platform 'dfm 0 linux'",
            "api: schema.set('record', 'platform', 'linux', step='dfm', index=0)"
          ],
          "help": "Record tracking the platform name per step and index basis. (linux, windows, freebsd)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "distro": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_distro 'step index <str>'"
          ],
          "shorthelp": "Record: distro name",
          "example": [
            "cli: -record_distro 'dfm 0 ubuntu'",
            "api: schema.set('record', 'distro', 'ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the distro name per step and index basis. (ubuntu, redhat, centos)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "arch": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_arch 'step index <str>'"
          ],
          "shorthelp": "Record: hardware architecture",
          "example": [
            "cli: -record_arch 'dfm 0 x86_64'",
            "api: schema.set('record', 'arch', 'x86_64', step='dfm', index=0)"
          ],
          "help": "Record tracking the hardware architecture per step and index basis. (x86_64, rv64imafdc)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "starttime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_starttime 'step index <str>'"
          ],
          "shorthelp": "Record: start time",
          "example": [
            "cli: -record_starttime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'starttime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the start time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "endtime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_endtime 'step index <str>'"
          ],
          "shorthelp": "Record: end time",
          "example": [
            "cli: -record_endtime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'endtime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the end time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "region": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_region 'step index <str>'"
          ],
          "shorthelp": "Record: cloud region",
          "example": [
            "cli: -record_region 'dfm 0 \"US Gov Boston\"'",
            "api: schema.set('record', 'region', '\"US Gov Boston\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the cloud region per step and index basis. Recommended naming methodology:\n\n* local: node is the local machine\n* onprem: node in on-premises IT infrastructure\n* public: generic public cloud\n* govcloud: generic US government cloud\n* <region>: cloud and entity specific region string name",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "scversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_scversion 'step index <str>'"
          ],
          "shorthelp": "Record: software version",
          "example": [
            "cli: -record_scversion 'dfm 0 1.0'",
            "api: schema.set('record', 'scversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the software version per step and index basis. Version number for the SiliconCompiler software.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolversion 'step index <str>'"
          ],
          "shorthelp": "Record: tool version",
          "example": [
            "cli: -record_toolversion 'dfm 0 1.0'",
            "api: schema.set('record', 'toolversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool version per step and index basis. The tool version captured corresponds to the 'tool'\nparameter within the 'tool' dictionary.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolpath": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolpath 'step index <str>'"
          ],
          "shorthelp": "Record: tool path",
          "example": [
            "cli: -record_toolpath 'dfm 0 /usr/bin/openroad'",
            "api: schema.set('record', 'toolpath', '/usr/bin/openroad', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool path per step and index basis. Full path to tool executable used to run this\ntask.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolargs": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolargs 'step index <str>'"
          ],
          "shorthelp": "Record: tool CLI arguments",
          "example": [
            "cli: -record_toolargs 'dfm 0 \"-I include/ foo.v\"'",
            "api: schema.set('record', 'toolargs', '\"-I include/ foo.v\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool CLI arguments per step and index basis. Arguments passed to tool via CLI.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonversion 'step index <str>'"
          ],
          "shorthelp": "Record: Python version",
          "example": [
            "cli: -record_pythonversion 'dfm 0 3.12.3'",
            "api: schema.set('record', 'pythonversion', '3.12.3', step='dfm', index=0)"
          ],
          "help": "Record tracking the Python version per step and index basis. Version of python used to run this task.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "osversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_osversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S version",
          "example": [
            "cli: -record_osversion 'dfm 0 20.04.1-Ubuntu'",
            "api: schema.set('record', 'osversion', '20.04.1-Ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S version per step and index basis. Since there is not standard version system for operating\nsystems, extracting information from is platform dependent.\nFor Linux based operating systems, the 'osversion' is the\nversion of the distro.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "kernelversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_kernelversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S kernel version",
          "example": [
            "cli: -record_kernelversion 'dfm 0 5.11.0-34-generic'",
            "api: schema.set('record', 'kernelversion', '5.11.0-34-generic', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S kernel version per step and index basis. Used for platforms that support a distinction\nbetween os kernels and os distributions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolexitcode": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolexitcode 'step index <int>'"
          ],
          "shorthelp": "Record: tool exit code",
          "example": [
            "cli: -record_toolexitcode 'dfm 0 0'",
            "api: schema.set('record', 'toolexitcode', 0, step='dfm', index=0)"
          ],
          "help": "Record tracking the tool exit code per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "remoteid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_remoteid '<str>'"
          ],
          "shorthelp": "Record: remote job ID",
          "example": [
            "cli: -record_remoteid '0123456789abcdeffedcba9876543210'",
            "api: schema.set('record', 'remoteid', '0123456789abcdeffedcba9876543210')"
          ],
          "help": "Record tracking the job ID for a remote run.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonpackage": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonpackage '<str>'"
          ],
          "shorthelp": "Record: python packages",
          "example": [
            "cli: -record_pythonpackage 'siliconcompiler==0.28.0'",
            "api: schema.set('record', 'pythonpackage', 'siliconcompiler==0.28.0')"
          ],
          "help": "Record tracking for the python packages installed.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "status": {
          "type": "<error,pending,queued,running,skipped,success,timeout>",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_status 'step index <str>'"
          ],
          "shorthelp": "Record: node execution status",
          "example": [
            "cli: -record_status 'syn 0 success'",
            "api: schema.set('record', 'status', 'success', step='syn', index='0')"
          ],
          "help": "Record tracking for the status of a node.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "inputnode": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_inputnode 'step index <(str,str)>'"
          ],
          "shorthelp": "Record: node inputs",
          "example": [
            "cli: -record_inputnode 'cts 0 (place,42)'",
            "api: schema.set('record', 'inputnode', ('place', '42'), step='syn', index='0')"
          ],
          "help": "List of selected inputs for the current step/index specified as\n(in_step, in_index) tuple.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.record/RecordSchema",
          "sctype": "RecordSchema"
        }
      },
      "tool": {
        "default": {
          "task": {
            "default": {
              "dataroot": {
                "default": {
                  "path": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory path",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
                    ],
                    "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  },
                  "tag": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory reference tag/version",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
                    ],
                    "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  }
                }
              },
              "exe": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_exe 'tool <str>'"
                ],
                "shorthelp": "Tool: executable name",
                "example": [
                  "cli: -tool_exe 'openroad openroad'",
                  "api: task.set('tool', 'openroad', 'exe', 'openroad')"
                ],
                "help": "Tool executable name.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "sbom": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_sbom 'tool version <file>'"
                  ],
                  "shorthelp": "Tool: software BOM",
                  "example": [
                    "cli: -tool_sbom 'yosys 1.0.1 ys_sbom.json'",
                    "api: task.set('tool', 'yosys', 'sbom', '1.0', 'ys_sbom.json')"
                  ],
                  "help": "Paths to software bill of material (SBOM) document file of the tool\nspecified on a per version basis. The SBOM includes critical\npackage information about the tool including the list of included\ncomponents, licenses, and copyright. The SBOM file is generally\nprovided as in a a standardized open data format such as SPDX.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "path": {
                "type": "dir",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_path 'tool <dir>'"
                ],
                "shorthelp": "Tool: executable path",
                "example": [
                  "cli: -tool_path 'openroad /usr/local/bin'",
                  "api: task.set('tool', 'openroad', 'path', '/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is prepended to the\nsystem PATH environment variable for batch and interactive runs. The\npath parameter can be left blank if the :keypath:`tool,<tool>,task,<task>,exe` is\nalready in the environment search path.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null,
                      "filehash": null,
                      "dataroot": null
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "vswitch": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vswitch 'tool <str>'"
                ],
                "shorthelp": "Tool: executable version switch",
                "example": [
                  "cli: -tool_vswitch 'openroad -version'",
                  "api: task.set('tool', 'openroad', 'vswitch', '-version')"
                ],
                "help": "Command line switch to use with executable used to print out\nthe version number. Common switches include ``-v``, ``-version``,\n``--version``. Some tools may require extra flags to run in batch mode.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "vendor": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vendor 'tool <str>'"
                ],
                "shorthelp": "Tool: vendor",
                "example": [
                  "cli: -tool_vendor 'yosys yosys'",
                  "api: task.set('tool', 'yosys', 'vendor', 'yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor\nspecific technology variables in the PDK and libraries. For\nopen source projects, the project name should be used in\nplace of vendor.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "version": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_version 'tool <str>'"
                ],
                "shorthelp": "Tool: version",
                "example": [
                  "cli: -tool_version 'openroad >=v2.0'",
                  "api: task.set('tool', 'openroad', 'version', '>=v2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used. Each\nentry in this list must be a version specifier as described by Python\n`PEP-440 <https://peps.python.org/pep-0440/#version-specifiers>`_.\nDuring task execution, the tool is called with the 'vswitch' to\ncheck the runtime executable version. If the version of the system\nexecutable is not allowed by any of the specifiers in 'version',\nthen the job is halted pre-execution. For backwards compatibility,\nentries that do not conform to the standard will be interpreted as a\nversion with an '==' specifier. This check can be disabled by\nsetting :keypath:`option,novercheck` to True.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "format": {
                "type": "<json,tcl,yaml>",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_format 'tool <str>'"
                ],
                "shorthelp": "Tool: file format",
                "example": [
                  "cli: -tool_format 'yosys tcl'",
                  "api: task.set('tool', 'yosys', 'format', 'tcl')"
                ],
                "help": "File format for tool manifest handoff.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "licenseserver": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_licenseserver 'name key <str>'"
                  ],
                  "shorthelp": "Tool: license servers",
                  "example": [
                    "cli: -tool_licenseserver 'atask ACME_LICENSE 1700@server'",
                    "api: task.set('tool', 'acme', 'licenseserver', 'ACME_LICENSE', '1700@server')"
                  ],
                  "help": "Defines a set of tool-specific environment variables used by the executable\nthat depend on license key servers to control access. For multiple servers,\nseparate servers with a colon. The named license variables are read at\nruntime (:meth:`.Task.run()`) and the environment variables are set.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "warningoff": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_warningoff 'tool task <str>'"
                ],
                "shorthelp": "Task: warning filter",
                "example": [
                  "cli: -tool_task_warningoff 'verilator lint COMBDLY'",
                  "api: task.set('tool', 'verilator', 'task', 'lint', 'warningoff', 'COMBDLY')"
                ],
                "help": "A list of tool warnings for which printing should be suppressed.\nGenerally this is done on a per design basis after review has\ndetermined that warning can be safely ignored The code for turning\noff warnings can be found in the specific task reference manual.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "regex": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_regex 'tool task suffix <str>'"
                  ],
                  "shorthelp": "Task: regex filter",
                  "example": [
                    "cli: -tool_task_regex 'openroad place errors \"'-v ERROR'\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'regex', 'errors', '-v ERROR')"
                  ],
                  "help": "A list of piped together grep commands. Each entry represents a set\nof command line arguments for grep including the regex pattern to\nmatch. Starting with the first list entry, each grep output is piped\ninto the following grep command in the list. Supported grep options\ninclude ``-v`` and ``-e``. Patterns starting with \"-\" should be\ndirectly preceded by the ``-e`` option. The following example\nillustrates the concept.\n\nUNIX grep:\n\n.. code-block:: bash\n\n    $ grep WARNING place.log | grep -v \"bbox\" > place.warnings\n\nSiliconCompiler::\n\n    task.set('task', 'openroad', 'regex', 'place', '0', 'warnings',\n             [\"WARNING\", \"-v bbox\"])\n\nThe \"errors\" and \"warnings\" suffixes are special cases. When set,\nthe number of matches found for these regexes will be added to the\nerrors and warnings metrics for the task, respectively. This will\nalso cause the logfile to be added to the :keypath:`tool, <tool>,\ntask, <task>, report` parameter for those metrics, if not already present.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "option": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_option 'tool task <str>'"
                ],
                "shorthelp": "Task: executable options",
                "example": [
                  "cli: -tool_task_option 'openroad cts -no_init'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'option', '-no_init')"
                ],
                "help": "List of command line options for the task executable, specified on\na per task and per step basis. Options must not include spaces.\nFor multiple argument options, each option is a separate list element.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "env": {
                "default": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_env 'tool task env <str>'"
                  ],
                  "shorthelp": "Task: environment variables",
                  "example": [
                    "cli: -tool_task_env 'openroad cts MYVAR 42'",
                    "api: task.set('tool', 'openroad', 'task', 'cts', 'env', 'MYVAR', '42')"
                  ],
                  "help": "Environment variables to set for individual tasks. Keys and values\nshould be set in accordance with the task's documentation. Most\ntasks do not require extra environment variables to function.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "input": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_input 'tool task <file>'"
                ],
                "shorthelp": "Task: input files",
                "example": [
                  "cli: -tool_task_input 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'input', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key :keypath:`flowgraph,<flow>,<step>,<index>,input`.\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "output": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_output 'tool task <file>'"
                ],
                "shorthelp": "Task: output files",
                "example": [
                  "cli: -tool_task_output 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'output', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files written to the 'output' directory of the\ntool/task/step/index used in the keypath. All files must be available\nfor flow to continue. If a file is missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "stdout": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stdout",
                  "example": [
                    "cli: -tool_task_stdout_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stdout.\nSupported options are:\nnone: the stream generated to STDOUT is ignored.\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stdout",
                  "example": [
                    "cli: -tool_task_stdout_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stdout.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "stderr": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stderr",
                  "example": [
                    "cli: -tool_task_stderr_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stderr.\nSupported options are:\nnone: the stream generated to STDERR is ignored\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stderr",
                  "example": [
                    "cli: -tool_task_stderr_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stderr.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "require": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_require 'tool task <str>'"
                ],
                "shorthelp": "Task: parameter requirements",
                "example": [
                  "cli: -tool_task_require 'openroad cts design'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'require', 'design')"
                ],
                "help": "List of keypaths to required task parameters. The list is used\nby :meth:`.Project.check_manifest()` to verify that all parameters have been set up\nbefore step execution begins.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "report": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_report 'tool task metric <file>'"
                  ],
                  "shorthelp": "Task: metric report files",
                  "example": [
                    "cli: -tool_task_report 'openroad place holdtns \"place 0 place.log\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'report', 'holdtns', 'place.log', step='place', index='0')"
                  ],
                  "help": "List of report files associated with a specific 'metric'. The file path\nspecified is relative to the run directory of the current task.",
                  "notes": null,
                  "pernode": "required",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "refdir": {
                "type": "[dir]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_refdir 'tool task <dir>'"
                ],
                "shorthelp": "Task: script directory",
                "example": [
                  "cli: -tool_task_refdir 'yosys syn ./myref'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'refdir', './myref')"
                ],
                "help": "Path to directories containing reference flow scripts, specified\non a per step and index basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "script": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_script 'tool task <file>'"
                ],
                "shorthelp": "Task: entry script",
                "example": [
                  "cli: -tool_task_script 'yosys syn syn.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'script', 'syn.tcl')"
                ],
                "help": "Path to the entry script called by the executable specified\non a per task and per step basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "prescript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_prescript 'tool task <file>'"
                ],
                "shorthelp": "Task: pre-step script",
                "example": [
                  "cli: -tool_task_prescript 'yosys syn syn_pre.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'prescript', 'syn_pre.tcl')"
                ],
                "help": "Path to a user supplied script to execute after reading in the design\nbut before the main execution stage of the step. Exact entry point\ndepends on the step and main script being executed. An example\nof a prescript entry point would be immediately before global\nplacement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "postscript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_postscript 'tool task <file>'"
                ],
                "shorthelp": "Task: post-step script",
                "example": [
                  "cli: -tool_task_postscript 'yosys syn syn_post.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'postscript', 'syn_post.tcl')"
                ],
                "help": "Path to a user supplied script to execute after the main execution\nstage of the step but before the design is saved.\nExact entry point depends on the step and main script being\nexecuted. An example of a postscript entry point would be immediately\nafter global placement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "threads": {
                "type": "int",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_threads 'tool task <int>'"
                ],
                "shorthelp": "Task: thread parallelism",
                "example": [
                  "cli: -tool_task_threads 'magic drc 64'",
                  "api: task.set('tool', 'magic', 'task', 'drc', 'threads', '64')"
                ],
                "help": "Thread parallelism to use for execution specified on a per task and per\nstep basis. If not specified, SC queries the operating system and sets\nthe threads based on the maximum thread count supported by the\nhardware.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "__meta__": {
                "name": null,
                "class": "siliconcompiler.tool/Task",
                "sctype": "Task"
              }
            }
          }
        }
      },
      "option": {
        "remote": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-remote <bool>"
          ],
          "shorthelp": "Option: enable remote processing",
          "example": [
            "cli: -remote",
            "api: option.set('remote', True)"
          ],
          "help": "\n                Sends job for remote processing if set to true. The remote\n                option requires a credentials file to be placed in the home\n                directory. Fore more information, see the credentials\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "credentials": {
          "type": "file",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-credentials <file>"
          ],
          "shorthelp": "Option: user credentials file",
          "example": [
            "cli: -credentials /home/user/.sc/credentials",
            "api: option.set('credentials', '/home/user/.sc/credentials')"
          ],
          "help": "\n                Filepath to credentials used for remote processing. If the\n                credentials parameter is empty, the remote processing client program\n                tries to access the \".sc/credentials\" file in the user's home\n                directory. The file supports the following fields:\n\n                address=<server address>\n                port=<server port> (optional)\n                username=<user id> (optional)\n                password=<password / key used for authentication> (optional)",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null,
                "date": null,
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "cachedir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-cachedir <dir>"
          ],
          "shorthelp": "Option: user cache directory",
          "example": [
            "cli: -cachedir /home/user/.sc/cache",
            "api: option.set('cachedir', '/home/user/.sc/cache')"
          ],
          "help": "\n                Filepath to cache used for package data sources. If the\n                cache parameter is empty, \".sc/cache\" directory in the user's home\n                directory will be used.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "nice": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nice <int>"
          ],
          "shorthelp": "Option: tool scheduling priority",
          "example": [
            "cli: -nice 5",
            "api: option.set('nice', 5)"
          ],
          "help": "\n                Sets the type of execution priority of each individual flowgraph steps.\n                If the parameter is undefined, nice will not be used. For more information see\n                `Unix 'nice' <https://en.wikipedia.org/wiki/Nice_(Unix)>`_.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "flow": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-flow <str>"
          ],
          "shorthelp": "Option: flow target",
          "example": [
            "cli: -flow asicflow",
            "api: option.set('flow', 'asicflow')"
          ],
          "help": "\n                Sets the flow for the current run. The flow name\n                must match up with a 'flow' in the flowgraph",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "optmode": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-O<str>",
            "-optmode <str>"
          ],
          "shorthelp": "Option: optimization mode",
          "example": [
            "cli: -O3",
            "cli: -optmode 3",
            "api: option.set('optmode', 'O3')"
          ],
          "help": "\n                The compiler has modes to prioritize run time and ppa. Modes\n                include.\n\n                (O0) = Exploration mode for debugging setup\n                (O1) = Higher effort and better PPA than O0\n                (O2) = Higher effort and better PPA than O1\n                (O3) = Signoff quality. Better PPA and higher run times than O2\n                (O4-O98) = Reserved (compiler/target dependent)\n                (O99) = Experimental highest possible effort, may be unstable\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": 0,
                "signature": null
              }
            }
          }
        },
        "builddir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-builddir <dir>"
          ],
          "shorthelp": "Option: build directory",
          "example": [
            "cli: -builddir ./build_the_future",
            "api: option.set('builddir', './build_the_future')"
          ],
          "help": "\n                The default build directory is in the local './build' where SC was\n                executed. This can be used to set an alternate\n                compilation directory path.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "build",
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "jobname": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobname <str>"
          ],
          "shorthelp": "Option: job name",
          "example": [
            "cli: -jobname may1",
            "api: option.set('jobname', 'may1')"
          ],
          "help": "\n                Jobname during invocation of :meth:`.Project.run()`. The jobname combined with a\n                defined director structure (<dir>/<design>/<jobname>/<step>/<index>)\n                enables multiple levels of transparent job, step, and index\n                introspection.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "job0",
                "signature": null
              }
            }
          }
        },
        "from": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-from <str>"
          ],
          "shorthelp": "Option: starting step",
          "example": [
            "cli: -from 'import'",
            "api: option.set('from', 'import')"
          ],
          "help": "\n                Inclusive list of steps to start execution from. The default is to start\n                at all entry steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "to": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-to <str>"
          ],
          "shorthelp": "Option: ending step",
          "example": [
            "cli: -to 'syn'",
            "api: option.set('to', 'syn')"
          ],
          "help": "\n                Inclusive list of steps to end execution with. The default is to go\n                to all exit steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "prune": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-prune 'node <(str,str)>'"
          ],
          "shorthelp": "Option: flowgraph pruning",
          "example": [
            "cli: -prune (syn,0)",
            "api: option.set('prune', ('syn', '0'))"
          ],
          "help": "\n                List of starting nodes for branches to be pruned.\n                The default is to not prune any nodes/branches.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "breakpoint": {
          "type": "bool",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-breakpoint <bool>"
          ],
          "shorthelp": "Option: breakpoint list",
          "example": [
            "cli: -breakpoint true",
            "api: option.set('breakpoint', True)"
          ],
          "help": "\n                Set a breakpoint on specific steps. If the step is a TCL\n                based tool, then the breakpoints stops the flow inside the\n                EDA tool. If the step is a command line tool, then the flow\n                drops into a Python interpreter.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "clean": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-clean <bool>"
          ],
          "shorthelp": "Option: cleanup previous job",
          "example": [
            "cli: -clean",
            "api: option.set('clean', True)"
          ],
          "help": "\n                Run a job from the start and do not use any of the previous job.\n                If :keypath:`option, jobincr` is True, the old job is preserved and\n                a new job number is assigned.\n                ",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "hash": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-hash <bool>"
          ],
          "shorthelp": "Option: file hashing",
          "example": [
            "cli: -hash",
            "api: option.set('hash', True)"
          ],
          "help": "\n                Enables hashing of all inputs and outputs during\n                compilation. The hash values are stored in the hashvalue\n                field of the individual parameters.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "nodisplay": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodisplay <bool>"
          ],
          "shorthelp": "Option: headless execution",
          "example": [
            "cli: -nodisplay",
            "api: option.set('nodisplay', True)"
          ],
          "help": "\n                This flag prevents SiliconCompiler from opening GUI windows.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "quiet": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-quiet <bool>"
          ],
          "shorthelp": "Option: quiet execution",
          "example": [
            "cli: -quiet",
            "api: option.set('quiet', True)"
          ],
          "help": "\n                The -quiet option forces all steps to print to a log file.\n                This can be useful with Modern EDA tools which print\n                significant content to the screen.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "jobincr": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobincr <bool>"
          ],
          "shorthelp": "Option: autoincrement jobname",
          "example": [
            "cli: -jobincr",
            "api: option.set('jobincr', True)"
          ],
          "help": "\n                Forces an auto-update of the jobname parameter if a directory\n                matching the jobname is found in the build directory. If the\n                jobname does not include a trailing digit, then the number\n                '1' is added to the jobname before updating the jobname\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "novercheck": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-novercheck <bool>"
          ],
          "shorthelp": "Option: disable version checking",
          "example": [
            "cli: -novercheck",
            "api: option.set('novercheck', True)"
          ],
          "help": "\n                Disables strict version checking on all invoked tools if True.\n                The list of supported version numbers is defined in the\n                :keypath:`tool,<tool>,task,<task>,version`.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "track": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-track <bool>"
          ],
          "shorthelp": "Option: enable provenance tracking",
          "example": [
            "cli: -track",
            "api: option.set('track', True)"
          ],
          "help": "\n                Turns on tracking of all 'record' parameters during each\n                task, otherwise only tool and runtime information will be recorded.\n                Tracking will result in potentially sensitive data\n                being recorded in the manifest so only turn on this feature\n                if you have control of the final manifest.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "continue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-continue <bool>"
          ],
          "shorthelp": "Option: continue-on-error",
          "example": [
            "cli: -continue",
            "api: option.set('continue', True)"
          ],
          "help": "\n                Attempt to continue even when errors are encountered in the SC\n                implementation. The default behavior is to quit executing the flow\n                if a task ends and the errors metric is greater than 0. Note that\n                the flow will always cease executing if the tool returns a nonzero\n                status code.\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "timeout": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-timeout <float>"
          ],
          "shorthelp": "Option: timeout value",
          "example": [
            "cli: -timeout 3600",
            "api: option.set('timeout', 3600)"
          ],
          "help": "\n                Timeout value in seconds. The timeout value is compared\n                against the wall time tracked by the SC runtime to determine\n                if an operation should continue.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "env": {
          "default": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: environment variables",
            "example": [
              "api: option.set('env', 'PDK_HOME', '/disk/mypdk')"
            ],
            "help": "Certain tools and reference flows require global environment\nvariables to be set. These variables can be managed externally or\nspecified through the env variable.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        },
        "design": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-design <str>"
          ],
          "shorthelp": "Option: Design library name",
          "example": [
            "cli: -design hello_world",
            "api: option.set('design', 'hello_world')"
          ],
          "help": "Name of the top level library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "alias": {
          "type": "[(str,str,str,str)]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Fileset alias mapping",
          "example": [
            "api: option.set('alias', ('design', 'rtl', 'lambda', 'rtl'))"
          ],
          "help": "List of filesets to alias during a run. When an alias is specific\nit will be used instead of the source fileset. It is useful when you\nwant to substitute a fileset from one library with a fileset from another,\nwithout changing the original design's code.\nFor example, you might use it to swap in a different version of an IP\nblock or a specific test environment.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "fileset": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Selected design filesets",
          "example": [
            "api: option.set('fileset', 'rtl')"
          ],
          "help": "List of filesets to use from the selected design library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "nodashboard": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodashboard <bool>"
          ],
          "shorthelp": "Option: Disables the dashboard",
          "example": [
            "api: option.set('nodashboard', True)"
          ],
          "help": "Disables the dashboard during execution",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "autoissue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-autoissue <bool>"
          ],
          "shorthelp": "Option: Enables automatic generation of testcases",
          "example": [
            "api: option.set('autoissue', True)"
          ],
          "help": "Enables automatic generation of testcases\nif the specific node fails",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "scheduler": {
          "name": {
            "type": "<docker,lsf,sge,slurm>",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler <str>"
            ],
            "shorthelp": "Option: scheduler platform",
            "example": [
              "cli: -scheduler slurm",
              "api: option.set('name', 'slurm')"
            ],
            "help": "\n                Sets the type of job scheduler to be used for each individual\n                flowgraph steps. If the parameter is undefined, the steps are executed\n                on the same machine that the SC was launched on. If 'slurm' is used,\n                the host running the 'sc' command must be running a 'slurmctld' daemon\n                managing a Slurm cluster. Additionally, the build directory\n                (:keypath:`option,builddir`) must be located in shared storage which\n                can be accessed by all hosts in the cluster.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "cores": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-cores <int>"
            ],
            "shorthelp": "Option: Scheduler core constraint",
            "example": [
              "cli: -cores 48",
              "api: option.set('cores', 48)"
            ],
            "help": "\n                Specifies the number CPU cores required to run the job.\n                For the slurm scheduler, this translates to the '-c'\n                switch. For more information, see the job scheduler\n                documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "memory": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-memory <int>"
            ],
            "shorthelp": "Option: scheduler memory constraint",
            "example": [
              "cli: -memory 8000",
              "api: option.set('memory', 8000)"
            ],
            "help": "\n                Specifies the amount of memory required to run the job,\n                specified in MB. For the slurm scheduler, this translates to\n                the '--mem' switch. For more information, see the job\n                scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            },
            "unit": "MB"
          },
          "queue": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-queue <str>"
            ],
            "shorthelp": "Option: scheduler queue",
            "example": [
              "cli: -queue nightrun",
              "api: option.set('queue', 'nightrun')"
            ],
            "help": "\n                Send the job to the specified queue. With slurm, this\n                translates to 'partition'. The queue name must match\n                the name of an existing job scheduler queue. For more information,\n                see the job scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "defer": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-defer <str>"
            ],
            "shorthelp": "Option: scheduler start time",
            "example": [
              "cli: -defer 16:00",
              "api: option.set('defer', '16:00')"
            ],
            "help": "\n                Defer initiation of job until the specified time. The parameter\n                is pass through string for remote job scheduler such as slurm.\n                For more information about the exact format specification, see\n                the job scheduler documentation. Examples of valid slurm specific\n                values include: now+1hour, 16:00, 010-01-20T12:34:00. For more\n                information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "options": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler_options <str>"
            ],
            "shorthelp": "Option: scheduler arguments",
            "example": [
              "cli: -scheduler_options \"--pty\"",
              "api: option.set('options', \"--pty\")"
            ],
            "help": "\n                Advanced/export options passed through unchanged to the job\n                scheduler as-is. (The user specified options must be compatible\n                with the rest of the scheduler parameters entered.(memory etc).\n                For more information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgevent": {
            "type": "{<all,begin,end,fail,summary,timeout>}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgevent <str>"
            ],
            "shorthelp": "Option: message event trigger",
            "example": [
              "cli: -msgevent all",
              "api: option.set('msgevent', 'all')"
            ],
            "help": "\n                Directs job scheduler to send a message to the user in\n                :keypath:`option,scheduler,msgcontact` when certain events occur\n                during a task.\n\n                * fail: send an email on failures\n                * timeout: send an email on timeouts\n                * begin: send an email at the start of a node task\n                * end: send an email at the end of a node task\n                * summary: send a summary email at the end of the run\n                * all: send an email on any event\n                ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgcontact": {
            "type": "{str}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgcontact <str>"
            ],
            "shorthelp": "Option: message contact",
            "example": [
              "cli: -msgcontact 'wile.e.coyote@acme.com'",
              "api: option.set('msgcontact', 'wiley@acme.com')"
            ],
            "help": "\n                List of email addresses to message on a :keypath:`option,scheduler,msgevent`.\n                Support for email messages relies on job scheduler daemon support.\n                For more information, see the job scheduler documentation. ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "maxnodes": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-maxnodes <int>"
            ],
            "shorthelp": "Option: maximum concurrent nodes",
            "example": [
              "cli: -maxnodes 4",
              "api: option.set('maxnodes', 4)"
            ],
            "help": "\n                Maximum number of concurrent nodes to run in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "maxthreads": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: maximum number of threads to assign a task",
            "example": [
              "api: option.set('maxthreads', 4)"
            ],
            "help": "\n                Maximum number of threads for each task in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "__meta__": {
            "class": "siliconcompiler.schema_support.option/SchedulerSchema",
            "sctype": "BaseSchema"
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.option/OptionSchema",
          "sctype": "BaseSchema"
        }
      },
      "history": {},
      "constraint": {
        "timing": {
          "default": {
            "voltage": {
              "default": {
                "type": "float",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-constraint_timing_voltage 'scenario pin <float>'"
                ],
                "shorthelp": "Constraint: pin voltage level",
                "example": [
                  "api: asic.set('constraint', 'timing', 'worst', 'voltage', 'VDD', '0.9')"
                ],
                "help": "Operating voltage applied to a specific pin in the scenario.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                },
                "unit": "V"
              }
            },
            "temperature": {
              "type": "float",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_temperature 'scenario <float>'"
              ],
              "shorthelp": "Constraint: temperature",
              "example": [
                "api: asic.set('constraint', 'timing', 'worst', 'temperature', '125')"
              ],
              "help": "Chip temperature applied to the scenario specified in degrees C.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              },
              "unit": "C"
            },
            "libcorner": {
              "type": "{str}",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_libcorner 'scenario <str>'"
              ],
              "shorthelp": "Constraint: library corner",
              "example": [
                "api: asic.set('constraint', 'timing', 'worst', 'libcorner', 'ttt')"
              ],
              "help": "List of characterization corners used to select\n                timing files for all logiclibs and macrolibs.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "pexcorner": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_pexcorner 'scenario <str>'"
              ],
              "shorthelp": "Constraint: pex corner",
              "example": [
                "api: asic.set('constraint', 'timing', 'worst', 'pexcorner', 'max')"
              ],
              "help": "Parasitic corner applied to the scenario. The\n                'pexcorner' string must match a corner found in\n                :keypath:`PDK,pdk,pexmodelfileset`.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "opcond": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_opcond 'scenario <str>'"
              ],
              "shorthelp": "Constraint: operating condition",
              "example": [
                "api: asic.set('constraint', 'timing', 'worst', 'opcond', 'typical_1.0')"
              ],
              "help": "Operating condition applied to the scenario. The value\n                can be used to access specific conditions within the library\n                timing models from the :keypath:`ASIC,asic,asiclib` timing models.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "mode": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_mode 'scenario <str>'"
              ],
              "shorthelp": "Constraint: operating mode",
              "example": [
                "api: asic.set('constraint', 'timing', 'worst', 'mode', 'test')"
              ],
              "help": "Operating mode for the scenario. Operating mode strings\n                can be values such as test, functional, standby.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "sdcfileset": {
              "type": "[(str,str)]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_file 'scenario <file>'"
              ],
              "shorthelp": "Constraint: SDC files",
              "example": [
                "api: asic.set('constraint', 'timing', 'worst', 'file', 'hello.sdc')"
              ],
              "help": "List of timing constraint sets files to use for the scenario. The\n                values are combined with any constraints specified by the design\n                'constraint' parameter. If no constraints are found, a default\n                constraint file is used based on the clock definitions.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "check": {
              "type": "{<dynamicpower,hold,leakagepower,maxcap,maxtran,mincap,power,setup,signalem>}",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_timing_check 'scenario <str>'"
              ],
              "shorthelp": "Constraint: timing checks",
              "example": [
                "api: asic.add('constraint', 'timing', 'worst', 'check', 'setup')"
              ],
              "help": "\n                List of checks for to perform for the scenario. The checks must\n                align with the capabilities of the EDA tools and flow being used.\n                Checks generally include objectives like meeting setup and hold goals\n                and minimize power. Standard check names include setup, hold, power,\n                noise, reliability.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.constraints.asic_timing/ASICTimingScenarioSchema"
            }
          },
          "__meta__": {
            "class": "siliconcompiler.constraints.asic_timing/ASICTimingConstraintSchema",
            "sctype": "BaseSchema"
          }
        },
        "component": {
          "default": {
            "placement": {
              "type": "(float,float)",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: component placement",
              "example": [
                "api: asic.set('constraint', 'component', 'i0', 'placement', (2.0, 3.0))"
              ],
              "help": null,
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              },
              "unit": "um"
            },
            "partname": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: component part name",
              "example": [
                "api: asic.set('constraint', 'component', 'i0', 'partname', 'filler_x1')"
              ],
              "help": null,
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "halo": {
              "type": "(float,float)",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_component_halo 'inst <(float,float)>'"
              ],
              "shorthelp": "Constraint: component halo",
              "example": [
                "cli: -constraint_component_halo 'i0 (1,1)'",
                "api: asic.set('constraint', 'component', 'i0', 'halo', (1, 1))"
              ],
              "help": null,
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              },
              "unit": "um"
            },
            "rotation": {
              "type": "<MX,MX_R180,MX_R270,MX_R90,MY,MY_R180,MY_R270,MY_R90,MZ,MZ_MX,MZ_MX_R180,MZ_MX_R270,MZ_MX_R90,MZ_MY,MZ_MY_R180,MZ_MY_R270,MZ_MY_R90,MZ_R180,MZ_R270,MZ_R90,R0,R180,R270,R90>",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-constraint_component_rotation 'inst <str>'"
              ],
              "shorthelp": "Constraint: component rotation",
              "example": [
                "cli: -constraint_component_rotation 'i0 R90'",
                "api: asic.set('constraint', 'component', 'i0', 'rotation', 'R90')"
              ],
              "help": null,
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": "R0",
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.constraints.asic_component/ASICComponentConstraint"
            }
          },
          "__meta__": {
            "class": "siliconcompiler.constraints.asic_component/ASICComponentConstraints",
            "sctype": "BaseSchema"
          }
        },
        "pin": {
          "default": {
            "placement": {
              "type": "(float,float)",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: pin placement",
              "example": [
                "api: asic.set('constraint', 'pin', 'nreset', 'placement', (2.0, 3.0))"
              ],
              "help": "\n                Placement location of a named pin, specified as a (x,y) tuple of\n                floats with respect to the lower left corner of the substrate. The location\n                refers to the center of the pin. The 'placement' parameter\n                is a goal/intent, not an exact specification. The layout system\n                may adjust sizes to meet competing goals such as manufacturing design\n                rules and grid placement guidelines.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              },
              "unit": "um"
            },
            "width": {
              "type": "float",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: pin width",
              "example": [
                "api: asic.set('constraint', 'pin', 'nreset', 'width', 1.0)"
              ],
              "help": "\n                Pin width constraint.  Package pin width is the lateral\n                (side-to-side) thickness of a pin on a physical component.\n                This parameter represents goal/intent, not an exact\n                specification. The layout system may adjust dimensions to meet\n                competing goals such as manufacturing design rules and grid placement\n                guidelines.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              },
              "unit": "um"
            },
            "length": {
              "type": "float",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: pin length",
              "example": [
                "api: asic.set('constraint', 'pin', 'nreset', 'length', 1.0)"
              ],
              "help": "\n                Pin length constraint.  Package pin length refers to the\n                length of the electrical pins extending out from (or into)\n                a component. This parameter represents goal/intent, not an exact\n                specification. The layout system may adjust dimensions to meet\n                competing goals such as manufacturing design rules and grid placement\n                guidelines.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              },
              "unit": "um"
            },
            "shape": {
              "type": "<circle,hexagon,octagon,oval,pill,polygon,rectangle,square>",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: pin shape",
              "example": [
                "api: asic.set('constraint', 'pin', 'nreset', 'shape', 'circle')"
              ],
              "help": "\n                Pin shape constraint specified on a per pin basis. In 3D design systems,\n                the pin shape represents the cross section of the pin in the direction\n                orthogonal to the signal flow direction. The 'pill' (aka stadium) shape,\n                is rectangle with semicircles at a pair of opposite sides. The other\n                pin shapes represent common geometric shape definitions.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "layer": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: pin layer",
              "example": [
                "api: asic.set('constraint', 'pin', 'nreset', 'layer', 'm4')"
              ],
              "help": "\n                Pin metal layer constraint specified on a per pin basis.\n                Metal names should either be the PDK specific metal stack name or\n                an integer with '1' being the lowest routing layer.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "side": {
              "type": "int",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: pin side",
              "example": [
                "api: asic.set('constraint', 'pin', 'nreset', 'side', 1)"
              ],
              "help": "\n                Side of block where the named pin should be placed. Sides are\n                enumerated as integers with '1' being the lower left side,\n                with the side index incremented on right turn in a clock wise\n                fashion. In case of conflict between 'lower' and 'left',\n                'left' has precedence. The side option and order option are\n                orthogonal to the placement option.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "order": {
              "type": "int",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Constraint: pin order",
              "example": [
                "api: asic.set('constraint', 'pin', 'nreset', 'order', 1)"
              ],
              "help": "\n                The relative position of the named pin in a vector of pins\n                on the side specified by the 'side' option. Pin order counting\n                is done clockwise. If multiple pins on the same side have the\n                same order number, the actual order is at the discretion of the\n                tool.",
              "notes": null,
              "pernode": "optional",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.constraints.asic_pins/ASICPinConstraint"
            }
          },
          "__meta__": {
            "class": "siliconcompiler.constraints.asic_pins/ASICPinConstraints",
            "sctype": "BaseSchema"
          }
        },
        "area": {
          "diearea": {
            "type": "[(float,float)]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-constraint_diearea <(float,float)>"
            ],
            "shorthelp": "Constraint: die area outline",
            "example": [
              "api: asic.set('constraint', 'diearea', (0, 0))"
            ],
            "help": null,
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            },
            "unit": "um"
          },
          "corearea": {
            "type": "[(float,float)]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-constraint_corearea <(float,float)>"
            ],
            "shorthelp": "Constraint: layout core area",
            "example": [
              "api: asic.set('constraint', 'corearea', (0, 0))"
            ],
            "help": null,
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            },
            "unit": "um"
          },
          "coremargin": {
            "type": "float",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-constraint_coremargin <float>"
            ],
            "shorthelp": "Constraint: layout core margin",
            "example": [
              "api: asic.set('constraint', 'coremargin', 1)"
            ],
            "help": null,
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            },
            "unit": "um"
          },
          "density": {
            "type": "float",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-constraint_density <float>"
            ],
            "shorthelp": "Constraint: layout density",
            "example": [
              "api: asic.set('constraint', 'density', 30)"
            ],
            "help": null,
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "aspectratio": {
            "type": "float",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-constraint_aspectratio <float>"
            ],
            "shorthelp": "Constraint: layout aspect ratio",
            "example": [
              "api: asic.set('constraint', 'aspectratio', 2.0)"
            ],
            "help": null,
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": 1.0,
                  "signature": null
                }
              }
            }
          },
          "__meta__": {
            "class": "siliconcompiler.constraints.asic_floorplan/ASICAreaConstraint",
            "sctype": "BaseSchema"
          }
        },
        "__meta__": {
          "class": "siliconcompiler.asic/ASICConstraint",
          "sctype": "BaseSchema"
        }
      },
      "asic": {
        "pdk": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: PDK target",
          "example": [
            "api: project.set('asic', 'pdk', 'freepdk45')"
          ],
          "help": "Target PDK used during compilation.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "mainlib": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: main logic library",
          "example": [
            "api: project.set('asic', 'mainlib', 'nangate45')"
          ],
          "help": "Main logic library to use during the run",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "asiclib": {
          "type": "{str}",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: logic libraries",
          "example": [
            "api: asic.set('asic', 'asiclib', 'nangate45')"
          ],
          "help": "List of all selected logic libraries\nto use for optimization for a given library architecture\n(9T, 11T, etc).",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "delaymodel": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: delay model",
          "example": [
            "api: asic.set('asic', 'delaymodel', 'ccs')"
          ],
          "help": "Delay model to use for the target libs. Commonly supported values\nare nldm and ccs.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "minlayer": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: Minimum routing layer",
          "example": [
            "api: project.set('asic', 'minlayer', 'M2')"
          ],
          "help": "Minimum metal layer to be used for automated place and route",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "maxlayer": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: maximum routing layer",
          "example": [
            "api: project.set('asic', 'maxlayer', 'M7')"
          ],
          "help": "Maximum metal layer to be used for automated place and route",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "__meta__": {
        "class": "siliconcompiler.asic/ASIC",
        "sctype": "ASIC"
      }
    },
    "sim": {
      "schemaversion": {
        "type": "str",
        "require": true,
        "scope": "global",
        "lock": true,
        "switch": [],
        "shorthelp": "Schema version number",
        "example": [
          "api: project.get('schemaversion')"
        ],
        "help": null,
        "notes": null,
        "pernode": "never",
        "node": {
          "default": {
            "default": {
              "value": "0.52.1",
              "signature": null
            }
          }
        }
      },
      "arg": {
        "step": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_step <str>"
          ],
          "shorthelp": "ARG: step argument",
          "example": [
            "cli: -arg_step 'route'",
            "api: project.set('arg', 'step', 'route')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "index": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_index <str>"
          ],
          "shorthelp": "ARG: index argument",
          "example": [
            "cli: -arg_index 0",
            "api: project.set('arg', 'index', '0')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "checklist": {
        "default": {
          "default": {
            "description": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_description 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item description",
              "example": [
                "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                "api: check.set('checklist', 'ISO', 'D000', 'description', 'A-DESCRIPTION')"
              ],
              "help": "A short one line description of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "requirement": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_requirement 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item requirement",
              "example": [
                "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                "api: check.set('checklist', 'ISO', 'D000', 'requirement', 'DOCSTRING')"
              ],
              "help": "A complete requirement description of the checklist item\nentered as a multi-line string.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "dataformat": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_dataformat 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item data format",
              "example": [
                "cli: -checklist_dataformat 'ISO D000 README'",
                "api: check.set('checklist', 'ISO', 'D000', 'dataformat', 'README')"
              ],
              "help": "Free text description of the type of data files acceptable as\nchecklist signoff validation.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "rationale": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_rationale 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item rationale",
              "example": [
                "cli: -checklist_rationale 'ISO D000 reliability'",
                "api: check.set('checklist', 'ISO', 'D000', 'rationale', 'reliability')"
              ],
              "help": "Rationale for the checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "criteria": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_criteria 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item criteria",
              "example": [
                "cli: -checklist_criteria 'ISO D000 errors==0'",
                "api: check.set('checklist', 'ISO', 'D000', 'criteria', 'errors==0')"
              ],
              "help": "Simple list of signoff criteria for checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form\n'metric op value'.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "task": {
              "type": "[(str,str,str)]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_task 'standard item <(str,str,str)>'"
              ],
              "shorthelp": "Checklist: item task",
              "example": [
                "cli: -checklist_task 'ISO D000 (job0,place,0)'",
                "api: check.set('checklist', 'ISO', 'D000', 'task', ('job0', 'place', '0'))"
              ],
              "help": "Flowgraph job and task used to verify the checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "report": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_report 'standard item <file>'"
              ],
              "shorthelp": "Checklist: item report",
              "example": [
                "cli: -checklist_report 'ISO D000 my.rpt'",
                "api: check.set('checklist', 'ISO', 'D000', 'report', 'my.rpt')"
              ],
              "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            },
            "waiver": {
              "default": {
                "type": "[file]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-checklist_waiver 'standard item metric <file>'"
                ],
                "shorthelp": "Checklist: item metric waivers",
                "example": [
                  "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                  "api: check.set('checklist', 'ISO', 'D000', 'waiver', 'hold', 'my.txt')"
                ],
                "help": "Filepath to report(s) documenting waivers for the checklist\nitem specified on a per metric basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              }
            },
            "ok": {
              "type": "bool",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_ok 'standard item <bool>'"
              ],
              "shorthelp": "Checklist: item ok",
              "example": [
                "cli: -checklist_ok 'ISO D000 true'",
                "api: check.set('checklist', 'ISO', 'D000', 'ok', True)"
              ],
              "help": "Boolean check mark for the checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters and verified they check out.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": false,
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.checklist/Criteria",
              "sctype": "Criteria"
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.checklist/Checklist",
            "sctype": "Checklist"
          }
        }
      },
      "library": {
        "__meta__": {
          "class": "siliconcompiler.project/_ProjectLibrary",
          "sctype": "BaseSchema"
        }
      },
      "flowgraph": {
        "default": {
          "default": {
            "default": {
              "input": {
                "type": "[(str,str)]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_input 'flow step index <(str,str)>'"
                ],
                "shorthelp": "Flowgraph: step input",
                "example": [
                  "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                  "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'input', ('place', '0'))"
                ],
                "help": "A list of inputs for the current step and index, specified as a\n(step, index) tuple.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "weight": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_weight 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric weights",
                  "example": [
                    "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'weight', 'area_cells', 1.0)"
                  ],
                  "help": "Weights specified on a per step and per metric basis used to give\neffective \"goodness\" score for a step by calculating the sum all step\nreal metrics results by the corresponding per step weights.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": 0.0,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "goal": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_goal 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric goals",
                  "example": [
                    "cli: -flowgraph_goal 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'goal', 'errors', 0)"
                  ],
                  "help": "Goals specified on a per step and per metric basis used to\ndetermine whether a certain task can be considered when merging\nmultiple tasks at a minimum or maximum node. A task is considered\nfailing if the absolute value of any of its metrics are larger than\nthe goal for that metric, if set.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "tool": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_tool 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: tool selection",
                "example": [
                  "cli: -flowgraph_tool 'asicflow place 0 openroad'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'tool', 'openroad')"
                ],
                "help": "Name of the tool name used for task execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "task": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_task 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task selection",
                "example": [
                  "cli: -flowgraph_task 'asicflow myplace 0 place'",
                  "api: flow.set('flowgraph', 'asicflow', 'myplace', '0', 'task', 'place')"
                ],
                "help": "Name of the tool associated task used for step execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "taskmodule": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_taskmodule 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task module",
                "example": [
                  "cli: -flowgraph_taskmodule 'asicflow place 0 siliconcompiler.tools.openroad.place'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'taskmodule', 'siliconcompiler.tools.openroad.place')"
                ],
                "help": "Full python module name of the task module used for task setup and execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "args": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_args 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: setup arguments",
                "example": [
                  "cli: -flowgraph_args 'asicflow cts 0 0'",
                  "api: flow.add('flowgraph', 'asicflow', 'cts', '0', 'args', '0')"
                ],
                "help": "User specified flowgraph string arguments specified on a per\nstep and per index basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "__meta__": {
                "class": "siliconcompiler.flowgraph/FlowgraphNodeSchema",
                "sctype": "FlowgraphNodeSchema"
              }
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.flowgraph/Flowgraph",
            "sctype": "Flowgraph"
          }
        }
      },
      "metric": {
        "errors": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_errors 'step index <int>'"
          ],
          "shorthelp": "Metric: total errors",
          "example": [
            "cli: -metric_errors 'dfm 0 0'",
            "api: project.set('metric', 'errors', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of errors on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "warnings": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_warnings 'step index <int>'"
          ],
          "shorthelp": "Metric: total warnings",
          "example": [
            "cli: -metric_warnings 'dfm 0 0'",
            "api: project.set('metric', 'warnings', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of warnings on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "memory": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_memory 'step index <float>'"
          ],
          "shorthelp": "Metric: memory",
          "example": [
            "cli: -metric_memory 'dfm 0 10e9'",
            "api: project.set('metric', 'memory', 10e9, step='dfm', index=0)"
          ],
          "help": "Metric tracking total peak program memory footprint on a per\nstep and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "B"
        },
        "exetime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_exetime 'step index <float>'"
          ],
          "shorthelp": "Metric: exetime",
          "example": [
            "cli: -metric_exetime 'dfm 0 10.0'",
            "api: project.set('metric', 'exetime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking time spent by the EDA executable\n:keypath:`tool,<tool>,task,<task>,exe` on a\nper step and index basis. It does not include the SiliconCompiler\nruntime overhead or time waiting for I/O operations and\ninter-processor communication to complete.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "tasktime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_tasktime 'step index <float>'"
          ],
          "shorthelp": "Metric: tasktime",
          "example": [
            "cli: -metric_tasktime 'dfm 0 10.0'",
            "api: project.set('metric', 'tasktime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent on a task from\nbeginning to end, including data transfers and pre/post\nprocessing.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "totaltime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_totaltime 'step index <float>'"
          ],
          "shorthelp": "Metric: totaltime",
          "example": [
            "cli: -metric_totaltime 'dfm 0 10.0'",
            "api: project.set('metric', 'totaltime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent from the beginning\nof the run up to and including the current step and index.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.metric/MetricSchema",
          "sctype": "MetricSchema"
        }
      },
      "record": {
        "userid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_userid 'step index <str>'"
          ],
          "shorthelp": "Record: userid",
          "example": [
            "cli: -record_userid 'dfm 0 wiley'",
            "api: schema.set('record', 'userid', 'wiley', step='dfm', index=0)"
          ],
          "help": "Record tracking the userid per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "publickey": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_publickey 'step index <str>'"
          ],
          "shorthelp": "Record: public key",
          "example": [
            "cli: -record_publickey 'dfm 0 <key>'",
            "api: schema.set('record', 'publickey', '<key>', step='dfm', index=0)"
          ],
          "help": "Record tracking the public key per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "machine": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_machine 'step index <str>'"
          ],
          "shorthelp": "Record: machine name",
          "example": [
            "cli: -record_machine 'dfm 0 carbon'",
            "api: schema.set('record', 'machine', 'carbon', step='dfm', index=0)"
          ],
          "help": "Record tracking the machine name per step and index basis. (myhost, localhost, ...",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "macaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_macaddr 'step index <str>'"
          ],
          "shorthelp": "Record: MAC address",
          "example": [
            "cli: -record_macaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'macaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the MAC address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "ipaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_ipaddr 'step index <str>'"
          ],
          "shorthelp": "Record: IP address",
          "example": [
            "cli: -record_ipaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'ipaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the IP address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "platform": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_platform 'step index <str>'"
          ],
          "shorthelp": "Record: platform name",
          "example": [
            "cli: -record_platform 'dfm 0 linux'",
            "api: schema.set('record', 'platform', 'linux', step='dfm', index=0)"
          ],
          "help": "Record tracking the platform name per step and index basis. (linux, windows, freebsd)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "distro": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_distro 'step index <str>'"
          ],
          "shorthelp": "Record: distro name",
          "example": [
            "cli: -record_distro 'dfm 0 ubuntu'",
            "api: schema.set('record', 'distro', 'ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the distro name per step and index basis. (ubuntu, redhat, centos)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "arch": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_arch 'step index <str>'"
          ],
          "shorthelp": "Record: hardware architecture",
          "example": [
            "cli: -record_arch 'dfm 0 x86_64'",
            "api: schema.set('record', 'arch', 'x86_64', step='dfm', index=0)"
          ],
          "help": "Record tracking the hardware architecture per step and index basis. (x86_64, rv64imafdc)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "starttime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_starttime 'step index <str>'"
          ],
          "shorthelp": "Record: start time",
          "example": [
            "cli: -record_starttime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'starttime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the start time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "endtime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_endtime 'step index <str>'"
          ],
          "shorthelp": "Record: end time",
          "example": [
            "cli: -record_endtime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'endtime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the end time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "region": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_region 'step index <str>'"
          ],
          "shorthelp": "Record: cloud region",
          "example": [
            "cli: -record_region 'dfm 0 \"US Gov Boston\"'",
            "api: schema.set('record', 'region', '\"US Gov Boston\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the cloud region per step and index basis. Recommended naming methodology:\n\n* local: node is the local machine\n* onprem: node in on-premises IT infrastructure\n* public: generic public cloud\n* govcloud: generic US government cloud\n* <region>: cloud and entity specific region string name",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "scversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_scversion 'step index <str>'"
          ],
          "shorthelp": "Record: software version",
          "example": [
            "cli: -record_scversion 'dfm 0 1.0'",
            "api: schema.set('record', 'scversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the software version per step and index basis. Version number for the SiliconCompiler software.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolversion 'step index <str>'"
          ],
          "shorthelp": "Record: tool version",
          "example": [
            "cli: -record_toolversion 'dfm 0 1.0'",
            "api: schema.set('record', 'toolversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool version per step and index basis. The tool version captured corresponds to the 'tool'\nparameter within the 'tool' dictionary.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolpath": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolpath 'step index <str>'"
          ],
          "shorthelp": "Record: tool path",
          "example": [
            "cli: -record_toolpath 'dfm 0 /usr/bin/openroad'",
            "api: schema.set('record', 'toolpath', '/usr/bin/openroad', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool path per step and index basis. Full path to tool executable used to run this\ntask.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolargs": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolargs 'step index <str>'"
          ],
          "shorthelp": "Record: tool CLI arguments",
          "example": [
            "cli: -record_toolargs 'dfm 0 \"-I include/ foo.v\"'",
            "api: schema.set('record', 'toolargs', '\"-I include/ foo.v\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool CLI arguments per step and index basis. Arguments passed to tool via CLI.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonversion 'step index <str>'"
          ],
          "shorthelp": "Record: Python version",
          "example": [
            "cli: -record_pythonversion 'dfm 0 3.12.3'",
            "api: schema.set('record', 'pythonversion', '3.12.3', step='dfm', index=0)"
          ],
          "help": "Record tracking the Python version per step and index basis. Version of python used to run this task.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "osversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_osversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S version",
          "example": [
            "cli: -record_osversion 'dfm 0 20.04.1-Ubuntu'",
            "api: schema.set('record', 'osversion', '20.04.1-Ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S version per step and index basis. Since there is not standard version system for operating\nsystems, extracting information from is platform dependent.\nFor Linux based operating systems, the 'osversion' is the\nversion of the distro.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "kernelversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_kernelversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S kernel version",
          "example": [
            "cli: -record_kernelversion 'dfm 0 5.11.0-34-generic'",
            "api: schema.set('record', 'kernelversion', '5.11.0-34-generic', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S kernel version per step and index basis. Used for platforms that support a distinction\nbetween os kernels and os distributions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolexitcode": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolexitcode 'step index <int>'"
          ],
          "shorthelp": "Record: tool exit code",
          "example": [
            "cli: -record_toolexitcode 'dfm 0 0'",
            "api: schema.set('record', 'toolexitcode', 0, step='dfm', index=0)"
          ],
          "help": "Record tracking the tool exit code per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "remoteid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_remoteid '<str>'"
          ],
          "shorthelp": "Record: remote job ID",
          "example": [
            "cli: -record_remoteid '0123456789abcdeffedcba9876543210'",
            "api: schema.set('record', 'remoteid', '0123456789abcdeffedcba9876543210')"
          ],
          "help": "Record tracking the job ID for a remote run.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonpackage": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonpackage '<str>'"
          ],
          "shorthelp": "Record: python packages",
          "example": [
            "cli: -record_pythonpackage 'siliconcompiler==0.28.0'",
            "api: schema.set('record', 'pythonpackage', 'siliconcompiler==0.28.0')"
          ],
          "help": "Record tracking for the python packages installed.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "status": {
          "type": "<error,pending,queued,running,skipped,success,timeout>",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_status 'step index <str>'"
          ],
          "shorthelp": "Record: node execution status",
          "example": [
            "cli: -record_status 'syn 0 success'",
            "api: schema.set('record', 'status', 'success', step='syn', index='0')"
          ],
          "help": "Record tracking for the status of a node.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "inputnode": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_inputnode 'step index <(str,str)>'"
          ],
          "shorthelp": "Record: node inputs",
          "example": [
            "cli: -record_inputnode 'cts 0 (place,42)'",
            "api: schema.set('record', 'inputnode', ('place', '42'), step='syn', index='0')"
          ],
          "help": "List of selected inputs for the current step/index specified as\n(in_step, in_index) tuple.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.record/RecordSchema",
          "sctype": "RecordSchema"
        }
      },
      "tool": {
        "default": {
          "task": {
            "default": {
              "dataroot": {
                "default": {
                  "path": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory path",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
                    ],
                    "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  },
                  "tag": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory reference tag/version",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
                    ],
                    "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  }
                }
              },
              "exe": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_exe 'tool <str>'"
                ],
                "shorthelp": "Tool: executable name",
                "example": [
                  "cli: -tool_exe 'openroad openroad'",
                  "api: task.set('tool', 'openroad', 'exe', 'openroad')"
                ],
                "help": "Tool executable name.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "sbom": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_sbom 'tool version <file>'"
                  ],
                  "shorthelp": "Tool: software BOM",
                  "example": [
                    "cli: -tool_sbom 'yosys 1.0.1 ys_sbom.json'",
                    "api: task.set('tool', 'yosys', 'sbom', '1.0', 'ys_sbom.json')"
                  ],
                  "help": "Paths to software bill of material (SBOM) document file of the tool\nspecified on a per version basis. The SBOM includes critical\npackage information about the tool including the list of included\ncomponents, licenses, and copyright. The SBOM file is generally\nprovided as in a a standardized open data format such as SPDX.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "path": {
                "type": "dir",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_path 'tool <dir>'"
                ],
                "shorthelp": "Tool: executable path",
                "example": [
                  "cli: -tool_path 'openroad /usr/local/bin'",
                  "api: task.set('tool', 'openroad', 'path', '/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is prepended to the\nsystem PATH environment variable for batch and interactive runs. The\npath parameter can be left blank if the :keypath:`tool,<tool>,task,<task>,exe` is\nalready in the environment search path.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null,
                      "filehash": null,
                      "dataroot": null
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "vswitch": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vswitch 'tool <str>'"
                ],
                "shorthelp": "Tool: executable version switch",
                "example": [
                  "cli: -tool_vswitch 'openroad -version'",
                  "api: task.set('tool', 'openroad', 'vswitch', '-version')"
                ],
                "help": "Command line switch to use with executable used to print out\nthe version number. Common switches include ``-v``, ``-version``,\n``--version``. Some tools may require extra flags to run in batch mode.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "vendor": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vendor 'tool <str>'"
                ],
                "shorthelp": "Tool: vendor",
                "example": [
                  "cli: -tool_vendor 'yosys yosys'",
                  "api: task.set('tool', 'yosys', 'vendor', 'yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor\nspecific technology variables in the PDK and libraries. For\nopen source projects, the project name should be used in\nplace of vendor.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "version": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_version 'tool <str>'"
                ],
                "shorthelp": "Tool: version",
                "example": [
                  "cli: -tool_version 'openroad >=v2.0'",
                  "api: task.set('tool', 'openroad', 'version', '>=v2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used. Each\nentry in this list must be a version specifier as described by Python\n`PEP-440 <https://peps.python.org/pep-0440/#version-specifiers>`_.\nDuring task execution, the tool is called with the 'vswitch' to\ncheck the runtime executable version. If the version of the system\nexecutable is not allowed by any of the specifiers in 'version',\nthen the job is halted pre-execution. For backwards compatibility,\nentries that do not conform to the standard will be interpreted as a\nversion with an '==' specifier. This check can be disabled by\nsetting :keypath:`option,novercheck` to True.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "format": {
                "type": "<json,tcl,yaml>",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_format 'tool <str>'"
                ],
                "shorthelp": "Tool: file format",
                "example": [
                  "cli: -tool_format 'yosys tcl'",
                  "api: task.set('tool', 'yosys', 'format', 'tcl')"
                ],
                "help": "File format for tool manifest handoff.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "licenseserver": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_licenseserver 'name key <str>'"
                  ],
                  "shorthelp": "Tool: license servers",
                  "example": [
                    "cli: -tool_licenseserver 'atask ACME_LICENSE 1700@server'",
                    "api: task.set('tool', 'acme', 'licenseserver', 'ACME_LICENSE', '1700@server')"
                  ],
                  "help": "Defines a set of tool-specific environment variables used by the executable\nthat depend on license key servers to control access. For multiple servers,\nseparate servers with a colon. The named license variables are read at\nruntime (:meth:`.Task.run()`) and the environment variables are set.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "warningoff": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_warningoff 'tool task <str>'"
                ],
                "shorthelp": "Task: warning filter",
                "example": [
                  "cli: -tool_task_warningoff 'verilator lint COMBDLY'",
                  "api: task.set('tool', 'verilator', 'task', 'lint', 'warningoff', 'COMBDLY')"
                ],
                "help": "A list of tool warnings for which printing should be suppressed.\nGenerally this is done on a per design basis after review has\ndetermined that warning can be safely ignored The code for turning\noff warnings can be found in the specific task reference manual.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "regex": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_regex 'tool task suffix <str>'"
                  ],
                  "shorthelp": "Task: regex filter",
                  "example": [
                    "cli: -tool_task_regex 'openroad place errors \"'-v ERROR'\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'regex', 'errors', '-v ERROR')"
                  ],
                  "help": "A list of piped together grep commands. Each entry represents a set\nof command line arguments for grep including the regex pattern to\nmatch. Starting with the first list entry, each grep output is piped\ninto the following grep command in the list. Supported grep options\ninclude ``-v`` and ``-e``. Patterns starting with \"-\" should be\ndirectly preceded by the ``-e`` option. The following example\nillustrates the concept.\n\nUNIX grep:\n\n.. code-block:: bash\n\n    $ grep WARNING place.log | grep -v \"bbox\" > place.warnings\n\nSiliconCompiler::\n\n    task.set('task', 'openroad', 'regex', 'place', '0', 'warnings',\n             [\"WARNING\", \"-v bbox\"])\n\nThe \"errors\" and \"warnings\" suffixes are special cases. When set,\nthe number of matches found for these regexes will be added to the\nerrors and warnings metrics for the task, respectively. This will\nalso cause the logfile to be added to the :keypath:`tool, <tool>,\ntask, <task>, report` parameter for those metrics, if not already present.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "option": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_option 'tool task <str>'"
                ],
                "shorthelp": "Task: executable options",
                "example": [
                  "cli: -tool_task_option 'openroad cts -no_init'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'option', '-no_init')"
                ],
                "help": "List of command line options for the task executable, specified on\na per task and per step basis. Options must not include spaces.\nFor multiple argument options, each option is a separate list element.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "env": {
                "default": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_env 'tool task env <str>'"
                  ],
                  "shorthelp": "Task: environment variables",
                  "example": [
                    "cli: -tool_task_env 'openroad cts MYVAR 42'",
                    "api: task.set('tool', 'openroad', 'task', 'cts', 'env', 'MYVAR', '42')"
                  ],
                  "help": "Environment variables to set for individual tasks. Keys and values\nshould be set in accordance with the task's documentation. Most\ntasks do not require extra environment variables to function.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "input": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_input 'tool task <file>'"
                ],
                "shorthelp": "Task: input files",
                "example": [
                  "cli: -tool_task_input 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'input', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key :keypath:`flowgraph,<flow>,<step>,<index>,input`.\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "output": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_output 'tool task <file>'"
                ],
                "shorthelp": "Task: output files",
                "example": [
                  "cli: -tool_task_output 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'output', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files written to the 'output' directory of the\ntool/task/step/index used in the keypath. All files must be available\nfor flow to continue. If a file is missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "stdout": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stdout",
                  "example": [
                    "cli: -tool_task_stdout_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stdout.\nSupported options are:\nnone: the stream generated to STDOUT is ignored.\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stdout",
                  "example": [
                    "cli: -tool_task_stdout_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stdout.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "stderr": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stderr",
                  "example": [
                    "cli: -tool_task_stderr_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stderr.\nSupported options are:\nnone: the stream generated to STDERR is ignored\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stderr",
                  "example": [
                    "cli: -tool_task_stderr_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stderr.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "require": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_require 'tool task <str>'"
                ],
                "shorthelp": "Task: parameter requirements",
                "example": [
                  "cli: -tool_task_require 'openroad cts design'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'require', 'design')"
                ],
                "help": "List of keypaths to required task parameters. The list is used\nby :meth:`.Project.check_manifest()` to verify that all parameters have been set up\nbefore step execution begins.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "report": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_report 'tool task metric <file>'"
                  ],
                  "shorthelp": "Task: metric report files",
                  "example": [
                    "cli: -tool_task_report 'openroad place holdtns \"place 0 place.log\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'report', 'holdtns', 'place.log', step='place', index='0')"
                  ],
                  "help": "List of report files associated with a specific 'metric'. The file path\nspecified is relative to the run directory of the current task.",
                  "notes": null,
                  "pernode": "required",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "refdir": {
                "type": "[dir]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_refdir 'tool task <dir>'"
                ],
                "shorthelp": "Task: script directory",
                "example": [
                  "cli: -tool_task_refdir 'yosys syn ./myref'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'refdir', './myref')"
                ],
                "help": "Path to directories containing reference flow scripts, specified\non a per step and index basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "script": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_script 'tool task <file>'"
                ],
                "shorthelp": "Task: entry script",
                "example": [
                  "cli: -tool_task_script 'yosys syn syn.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'script', 'syn.tcl')"
                ],
                "help": "Path to the entry script called by the executable specified\non a per task and per step basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "prescript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_prescript 'tool task <file>'"
                ],
                "shorthelp": "Task: pre-step script",
                "example": [
                  "cli: -tool_task_prescript 'yosys syn syn_pre.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'prescript', 'syn_pre.tcl')"
                ],
                "help": "Path to a user supplied script to execute after reading in the design\nbut before the main execution stage of the step. Exact entry point\ndepends on the step and main script being executed. An example\nof a prescript entry point would be immediately before global\nplacement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "postscript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_postscript 'tool task <file>'"
                ],
                "shorthelp": "Task: post-step script",
                "example": [
                  "cli: -tool_task_postscript 'yosys syn syn_post.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'postscript', 'syn_post.tcl')"
                ],
                "help": "Path to a user supplied script to execute after the main execution\nstage of the step but before the design is saved.\nExact entry point depends on the step and main script being\nexecuted. An example of a postscript entry point would be immediately\nafter global placement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "threads": {
                "type": "int",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_threads 'tool task <int>'"
                ],
                "shorthelp": "Task: thread parallelism",
                "example": [
                  "cli: -tool_task_threads 'magic drc 64'",
                  "api: task.set('tool', 'magic', 'task', 'drc', 'threads', '64')"
                ],
                "help": "Thread parallelism to use for execution specified on a per task and per\nstep basis. If not specified, SC queries the operating system and sets\nthe threads based on the maximum thread count supported by the\nhardware.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "__meta__": {
                "name": null,
                "class": "siliconcompiler.tool/Task",
                "sctype": "Task"
              }
            }
          }
        }
      },
      "option": {
        "remote": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-remote <bool>"
          ],
          "shorthelp": "Option: enable remote processing",
          "example": [
            "cli: -remote",
            "api: option.set('remote', True)"
          ],
          "help": "\n                Sends job for remote processing if set to true. The remote\n                option requires a credentials file to be placed in the home\n                directory. Fore more information, see the credentials\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "credentials": {
          "type": "file",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-credentials <file>"
          ],
          "shorthelp": "Option: user credentials file",
          "example": [
            "cli: -credentials /home/user/.sc/credentials",
            "api: option.set('credentials', '/home/user/.sc/credentials')"
          ],
          "help": "\n                Filepath to credentials used for remote processing. If the\n                credentials parameter is empty, the remote processing client program\n                tries to access the \".sc/credentials\" file in the user's home\n                directory. The file supports the following fields:\n\n                address=<server address>\n                port=<server port> (optional)\n                username=<user id> (optional)\n                password=<password / key used for authentication> (optional)",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null,
                "date": null,
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "cachedir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-cachedir <dir>"
          ],
          "shorthelp": "Option: user cache directory",
          "example": [
            "cli: -cachedir /home/user/.sc/cache",
            "api: option.set('cachedir', '/home/user/.sc/cache')"
          ],
          "help": "\n                Filepath to cache used for package data sources. If the\n                cache parameter is empty, \".sc/cache\" directory in the user's home\n                directory will be used.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "nice": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nice <int>"
          ],
          "shorthelp": "Option: tool scheduling priority",
          "example": [
            "cli: -nice 5",
            "api: option.set('nice', 5)"
          ],
          "help": "\n                Sets the type of execution priority of each individual flowgraph steps.\n                If the parameter is undefined, nice will not be used. For more information see\n                `Unix 'nice' <https://en.wikipedia.org/wiki/Nice_(Unix)>`_.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "flow": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-flow <str>"
          ],
          "shorthelp": "Option: flow target",
          "example": [
            "cli: -flow asicflow",
            "api: option.set('flow', 'asicflow')"
          ],
          "help": "\n                Sets the flow for the current run. The flow name\n                must match up with a 'flow' in the flowgraph",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "optmode": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-O<str>",
            "-optmode <str>"
          ],
          "shorthelp": "Option: optimization mode",
          "example": [
            "cli: -O3",
            "cli: -optmode 3",
            "api: option.set('optmode', 'O3')"
          ],
          "help": "\n                The compiler has modes to prioritize run time and ppa. Modes\n                include.\n\n                (O0) = Exploration mode for debugging setup\n                (O1) = Higher effort and better PPA than O0\n                (O2) = Higher effort and better PPA than O1\n                (O3) = Signoff quality. Better PPA and higher run times than O2\n                (O4-O98) = Reserved (compiler/target dependent)\n                (O99) = Experimental highest possible effort, may be unstable\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": 0,
                "signature": null
              }
            }
          }
        },
        "builddir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-builddir <dir>"
          ],
          "shorthelp": "Option: build directory",
          "example": [
            "cli: -builddir ./build_the_future",
            "api: option.set('builddir', './build_the_future')"
          ],
          "help": "\n                The default build directory is in the local './build' where SC was\n                executed. This can be used to set an alternate\n                compilation directory path.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "build",
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "jobname": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobname <str>"
          ],
          "shorthelp": "Option: job name",
          "example": [
            "cli: -jobname may1",
            "api: option.set('jobname', 'may1')"
          ],
          "help": "\n                Jobname during invocation of :meth:`.Project.run()`. The jobname combined with a\n                defined director structure (<dir>/<design>/<jobname>/<step>/<index>)\n                enables multiple levels of transparent job, step, and index\n                introspection.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "job0",
                "signature": null
              }
            }
          }
        },
        "from": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-from <str>"
          ],
          "shorthelp": "Option: starting step",
          "example": [
            "cli: -from 'import'",
            "api: option.set('from', 'import')"
          ],
          "help": "\n                Inclusive list of steps to start execution from. The default is to start\n                at all entry steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "to": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-to <str>"
          ],
          "shorthelp": "Option: ending step",
          "example": [
            "cli: -to 'syn'",
            "api: option.set('to', 'syn')"
          ],
          "help": "\n                Inclusive list of steps to end execution with. The default is to go\n                to all exit steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "prune": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-prune 'node <(str,str)>'"
          ],
          "shorthelp": "Option: flowgraph pruning",
          "example": [
            "cli: -prune (syn,0)",
            "api: option.set('prune', ('syn', '0'))"
          ],
          "help": "\n                List of starting nodes for branches to be pruned.\n                The default is to not prune any nodes/branches.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "breakpoint": {
          "type": "bool",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-breakpoint <bool>"
          ],
          "shorthelp": "Option: breakpoint list",
          "example": [
            "cli: -breakpoint true",
            "api: option.set('breakpoint', True)"
          ],
          "help": "\n                Set a breakpoint on specific steps. If the step is a TCL\n                based tool, then the breakpoints stops the flow inside the\n                EDA tool. If the step is a command line tool, then the flow\n                drops into a Python interpreter.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "clean": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-clean <bool>"
          ],
          "shorthelp": "Option: cleanup previous job",
          "example": [
            "cli: -clean",
            "api: option.set('clean', True)"
          ],
          "help": "\n                Run a job from the start and do not use any of the previous job.\n                If :keypath:`option, jobincr` is True, the old job is preserved and\n                a new job number is assigned.\n                ",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "hash": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-hash <bool>"
          ],
          "shorthelp": "Option: file hashing",
          "example": [
            "cli: -hash",
            "api: option.set('hash', True)"
          ],
          "help": "\n                Enables hashing of all inputs and outputs during\n                compilation. The hash values are stored in the hashvalue\n                field of the individual parameters.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "nodisplay": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodisplay <bool>"
          ],
          "shorthelp": "Option: headless execution",
          "example": [
            "cli: -nodisplay",
            "api: option.set('nodisplay', True)"
          ],
          "help": "\n                This flag prevents SiliconCompiler from opening GUI windows.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "quiet": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-quiet <bool>"
          ],
          "shorthelp": "Option: quiet execution",
          "example": [
            "cli: -quiet",
            "api: option.set('quiet', True)"
          ],
          "help": "\n                The -quiet option forces all steps to print to a log file.\n                This can be useful with Modern EDA tools which print\n                significant content to the screen.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "jobincr": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobincr <bool>"
          ],
          "shorthelp": "Option: autoincrement jobname",
          "example": [
            "cli: -jobincr",
            "api: option.set('jobincr', True)"
          ],
          "help": "\n                Forces an auto-update of the jobname parameter if a directory\n                matching the jobname is found in the build directory. If the\n                jobname does not include a trailing digit, then the number\n                '1' is added to the jobname before updating the jobname\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "novercheck": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-novercheck <bool>"
          ],
          "shorthelp": "Option: disable version checking",
          "example": [
            "cli: -novercheck",
            "api: option.set('novercheck', True)"
          ],
          "help": "\n                Disables strict version checking on all invoked tools if True.\n                The list of supported version numbers is defined in the\n                :keypath:`tool,<tool>,task,<task>,version`.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "track": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-track <bool>"
          ],
          "shorthelp": "Option: enable provenance tracking",
          "example": [
            "cli: -track",
            "api: option.set('track', True)"
          ],
          "help": "\n                Turns on tracking of all 'record' parameters during each\n                task, otherwise only tool and runtime information will be recorded.\n                Tracking will result in potentially sensitive data\n                being recorded in the manifest so only turn on this feature\n                if you have control of the final manifest.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "continue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-continue <bool>"
          ],
          "shorthelp": "Option: continue-on-error",
          "example": [
            "cli: -continue",
            "api: option.set('continue', True)"
          ],
          "help": "\n                Attempt to continue even when errors are encountered in the SC\n                implementation. The default behavior is to quit executing the flow\n                if a task ends and the errors metric is greater than 0. Note that\n                the flow will always cease executing if the tool returns a nonzero\n                status code.\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "timeout": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-timeout <float>"
          ],
          "shorthelp": "Option: timeout value",
          "example": [
            "cli: -timeout 3600",
            "api: option.set('timeout', 3600)"
          ],
          "help": "\n                Timeout value in seconds. The timeout value is compared\n                against the wall time tracked by the SC runtime to determine\n                if an operation should continue.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "env": {
          "default": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: environment variables",
            "example": [
              "api: option.set('env', 'PDK_HOME', '/disk/mypdk')"
            ],
            "help": "Certain tools and reference flows require global environment\nvariables to be set. These variables can be managed externally or\nspecified through the env variable.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        },
        "design": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-design <str>"
          ],
          "shorthelp": "Option: Design library name",
          "example": [
            "cli: -design hello_world",
            "api: option.set('design', 'hello_world')"
          ],
          "help": "Name of the top level library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "alias": {
          "type": "[(str,str,str,str)]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Fileset alias mapping",
          "example": [
            "api: option.set('alias', ('design', 'rtl', 'lambda', 'rtl'))"
          ],
          "help": "List of filesets to alias during a run. When an alias is specific\nit will be used instead of the source fileset. It is useful when you\nwant to substitute a fileset from one library with a fileset from another,\nwithout changing the original design's code.\nFor example, you might use it to swap in a different version of an IP\nblock or a specific test environment.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "fileset": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Selected design filesets",
          "example": [
            "api: option.set('fileset', 'rtl')"
          ],
          "help": "List of filesets to use from the selected design library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "nodashboard": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodashboard <bool>"
          ],
          "shorthelp": "Option: Disables the dashboard",
          "example": [
            "api: option.set('nodashboard', True)"
          ],
          "help": "Disables the dashboard during execution",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "autoissue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-autoissue <bool>"
          ],
          "shorthelp": "Option: Enables automatic generation of testcases",
          "example": [
            "api: option.set('autoissue', True)"
          ],
          "help": "Enables automatic generation of testcases\nif the specific node fails",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "scheduler": {
          "name": {
            "type": "<docker,lsf,sge,slurm>",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler <str>"
            ],
            "shorthelp": "Option: scheduler platform",
            "example": [
              "cli: -scheduler slurm",
              "api: option.set('name', 'slurm')"
            ],
            "help": "\n                Sets the type of job scheduler to be used for each individual\n                flowgraph steps. If the parameter is undefined, the steps are executed\n                on the same machine that the SC was launched on. If 'slurm' is used,\n                the host running the 'sc' command must be running a 'slurmctld' daemon\n                managing a Slurm cluster. Additionally, the build directory\n                (:keypath:`option,builddir`) must be located in shared storage which\n                can be accessed by all hosts in the cluster.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "cores": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-cores <int>"
            ],
            "shorthelp": "Option: Scheduler core constraint",
            "example": [
              "cli: -cores 48",
              "api: option.set('cores', 48)"
            ],
            "help": "\n                Specifies the number CPU cores required to run the job.\n                For the slurm scheduler, this translates to the '-c'\n                switch. For more information, see the job scheduler\n                documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "memory": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-memory <int>"
            ],
            "shorthelp": "Option: scheduler memory constraint",
            "example": [
              "cli: -memory 8000",
              "api: option.set('memory', 8000)"
            ],
            "help": "\n                Specifies the amount of memory required to run the job,\n                specified in MB. For the slurm scheduler, this translates to\n                the '--mem' switch. For more information, see the job\n                scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            },
            "unit": "MB"
          },
          "queue": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-queue <str>"
            ],
            "shorthelp": "Option: scheduler queue",
            "example": [
              "cli: -queue nightrun",
              "api: option.set('queue', 'nightrun')"
            ],
            "help": "\n                Send the job to the specified queue. With slurm, this\n                translates to 'partition'. The queue name must match\n                the name of an existing job scheduler queue. For more information,\n                see the job scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "defer": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-defer <str>"
            ],
            "shorthelp": "Option: scheduler start time",
            "example": [
              "cli: -defer 16:00",
              "api: option.set('defer', '16:00')"
            ],
            "help": "\n                Defer initiation of job until the specified time. The parameter\n                is pass through string for remote job scheduler such as slurm.\n                For more information about the exact format specification, see\n                the job scheduler documentation. Examples of valid slurm specific\n                values include: now+1hour, 16:00, 010-01-20T12:34:00. For more\n                information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "options": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler_options <str>"
            ],
            "shorthelp": "Option: scheduler arguments",
            "example": [
              "cli: -scheduler_options \"--pty\"",
              "api: option.set('options', \"--pty\")"
            ],
            "help": "\n                Advanced/export options passed through unchanged to the job\n                scheduler as-is. (The user specified options must be compatible\n                with the rest of the scheduler parameters entered.(memory etc).\n                For more information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgevent": {
            "type": "{<all,begin,end,fail,summary,timeout>}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgevent <str>"
            ],
            "shorthelp": "Option: message event trigger",
            "example": [
              "cli: -msgevent all",
              "api: option.set('msgevent', 'all')"
            ],
            "help": "\n                Directs job scheduler to send a message to the user in\n                :keypath:`option,scheduler,msgcontact` when certain events occur\n                during a task.\n\n                * fail: send an email on failures\n                * timeout: send an email on timeouts\n                * begin: send an email at the start of a node task\n                * end: send an email at the end of a node task\n                * summary: send a summary email at the end of the run\n                * all: send an email on any event\n                ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgcontact": {
            "type": "{str}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgcontact <str>"
            ],
            "shorthelp": "Option: message contact",
            "example": [
              "cli: -msgcontact 'wile.e.coyote@acme.com'",
              "api: option.set('msgcontact', 'wiley@acme.com')"
            ],
            "help": "\n                List of email addresses to message on a :keypath:`option,scheduler,msgevent`.\n                Support for email messages relies on job scheduler daemon support.\n                For more information, see the job scheduler documentation. ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "maxnodes": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-maxnodes <int>"
            ],
            "shorthelp": "Option: maximum concurrent nodes",
            "example": [
              "cli: -maxnodes 4",
              "api: option.set('maxnodes', 4)"
            ],
            "help": "\n                Maximum number of concurrent nodes to run in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "maxthreads": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: maximum number of threads to assign a task",
            "example": [
              "api: option.set('maxthreads', 4)"
            ],
            "help": "\n                Maximum number of threads for each task in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "__meta__": {
            "class": "siliconcompiler.schema_support.option/SchedulerSchema",
            "sctype": "BaseSchema"
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.option/OptionSchema",
          "sctype": "BaseSchema"
        }
      },
      "history": {},
      "__meta__": {
        "class": "siliconcompiler.project/Sim",
        "sctype": "Sim"
      }
    },
    "lint": {
      "schemaversion": {
        "type": "str",
        "require": true,
        "scope": "global",
        "lock": true,
        "switch": [],
        "shorthelp": "Schema version number",
        "example": [
          "api: project.get('schemaversion')"
        ],
        "help": null,
        "notes": null,
        "pernode": "never",
        "node": {
          "default": {
            "default": {
              "value": "0.52.1",
              "signature": null
            }
          }
        }
      },
      "arg": {
        "step": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_step <str>"
          ],
          "shorthelp": "ARG: step argument",
          "example": [
            "cli: -arg_step 'route'",
            "api: project.set('arg', 'step', 'route')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "index": {
          "type": "str",
          "require": false,
          "scope": "scratch",
          "lock": false,
          "switch": [
            "-arg_index <str>"
          ],
          "shorthelp": "ARG: index argument",
          "example": [
            "cli: -arg_index 0",
            "api: project.set('arg', 'index', '0')"
          ],
          "help": null,
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "checklist": {
        "default": {
          "default": {
            "description": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_description 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item description",
              "example": [
                "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                "api: check.set('checklist', 'ISO', 'D000', 'description', 'A-DESCRIPTION')"
              ],
              "help": "A short one line description of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "requirement": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_requirement 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item requirement",
              "example": [
                "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                "api: check.set('checklist', 'ISO', 'D000', 'requirement', 'DOCSTRING')"
              ],
              "help": "A complete requirement description of the checklist item\nentered as a multi-line string.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "dataformat": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_dataformat 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item data format",
              "example": [
                "cli: -checklist_dataformat 'ISO D000 README'",
                "api: check.set('checklist', 'ISO', 'D000', 'dataformat', 'README')"
              ],
              "help": "Free text description of the type of data files acceptable as\nchecklist signoff validation.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "rationale": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_rationale 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item rationale",
              "example": [
                "cli: -checklist_rationale 'ISO D000 reliability'",
                "api: check.set('checklist', 'ISO', 'D000', 'rationale', 'reliability')"
              ],
              "help": "Rationale for the checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "criteria": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_criteria 'standard item <str>'"
              ],
              "shorthelp": "Checklist: item criteria",
              "example": [
                "cli: -checklist_criteria 'ISO D000 errors==0'",
                "api: check.set('checklist', 'ISO', 'D000', 'criteria', 'errors==0')"
              ],
              "help": "Simple list of signoff criteria for checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form\n'metric op value'.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "task": {
              "type": "[(str,str,str)]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_task 'standard item <(str,str,str)>'"
              ],
              "shorthelp": "Checklist: item task",
              "example": [
                "cli: -checklist_task 'ISO D000 (job0,place,0)'",
                "api: check.set('checklist', 'ISO', 'D000', 'task', ('job0', 'place', '0'))"
              ],
              "help": "Flowgraph job and task used to verify the checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            },
            "report": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_report 'standard item <file>'"
              ],
              "shorthelp": "Checklist: item report",
              "example": [
                "cli: -checklist_report 'ISO D000 my.rpt'",
                "api: check.set('checklist', 'ISO', 'D000', 'report', 'my.rpt')"
              ],
              "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the checklist item.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            },
            "waiver": {
              "default": {
                "type": "[file]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-checklist_waiver 'standard item metric <file>'"
                ],
                "shorthelp": "Checklist: item metric waivers",
                "example": [
                  "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                  "api: check.set('checklist', 'ISO', 'D000', 'waiver', 'hold', 'my.txt')"
                ],
                "help": "Filepath to report(s) documenting waivers for the checklist\nitem specified on a per metric basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              }
            },
            "ok": {
              "type": "bool",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-checklist_ok 'standard item <bool>'"
              ],
              "shorthelp": "Checklist: item ok",
              "example": [
                "cli: -checklist_ok 'ISO D000 true'",
                "api: check.set('checklist', 'ISO', 'D000', 'ok', True)"
              ],
              "help": "Boolean check mark for the checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters and verified they check out.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": false,
                    "signature": null
                  }
                }
              }
            },
            "__meta__": {
              "name": null,
              "class": "siliconcompiler.checklist/Criteria",
              "sctype": "Criteria"
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.checklist/Checklist",
            "sctype": "Checklist"
          }
        }
      },
      "library": {
        "__meta__": {
          "class": "siliconcompiler.project/_ProjectLibrary",
          "sctype": "BaseSchema"
        }
      },
      "flowgraph": {
        "default": {
          "default": {
            "default": {
              "input": {
                "type": "[(str,str)]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_input 'flow step index <(str,str)>'"
                ],
                "shorthelp": "Flowgraph: step input",
                "example": [
                  "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                  "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'input', ('place', '0'))"
                ],
                "help": "A list of inputs for the current step and index, specified as a\n(step, index) tuple.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "weight": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_weight 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric weights",
                  "example": [
                    "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'weight', 'area_cells', 1.0)"
                  ],
                  "help": "Weights specified on a per step and per metric basis used to give\neffective \"goodness\" score for a step by calculating the sum all step\nreal metrics results by the corresponding per step weights.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": 0.0,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "goal": {
                "default": {
                  "type": "float",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [
                    "-flowgraph_goal 'flow step index metric <float>'"
                  ],
                  "shorthelp": "Flowgraph: metric goals",
                  "example": [
                    "cli: -flowgraph_goal 'asicflow cts 0 area_cells 1.0'",
                    "api: flow.set('flowgraph', 'asicflow', 'cts', '0', 'goal', 'errors', 0)"
                  ],
                  "help": "Goals specified on a per step and per metric basis used to\ndetermine whether a certain task can be considered when merging\nmultiple tasks at a minimum or maximum node. A task is considered\nfailing if the absolute value of any of its metrics are larger than\nthe goal for that metric, if set.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "tool": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_tool 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: tool selection",
                "example": [
                  "cli: -flowgraph_tool 'asicflow place 0 openroad'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'tool', 'openroad')"
                ],
                "help": "Name of the tool name used for task execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "task": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_task 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task selection",
                "example": [
                  "cli: -flowgraph_task 'asicflow myplace 0 place'",
                  "api: flow.set('flowgraph', 'asicflow', 'myplace', '0', 'task', 'place')"
                ],
                "help": "Name of the tool associated task used for step execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "taskmodule": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_taskmodule 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: task module",
                "example": [
                  "cli: -flowgraph_taskmodule 'asicflow place 0 siliconcompiler.tools.openroad.place'",
                  "api: flow.set('flowgraph', 'asicflow', 'place', '0', 'taskmodule', 'siliconcompiler.tools.openroad.place')"
                ],
                "help": "Full python module name of the task module used for task setup and execution.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "args": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-flowgraph_args 'flow step index <str>'"
                ],
                "shorthelp": "Flowgraph: setup arguments",
                "example": [
                  "cli: -flowgraph_args 'asicflow cts 0 0'",
                  "api: flow.add('flowgraph', 'asicflow', 'cts', '0', 'args', '0')"
                ],
                "help": "User specified flowgraph string arguments specified on a per\nstep and per index basis.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "__meta__": {
                "class": "siliconcompiler.flowgraph/FlowgraphNodeSchema",
                "sctype": "FlowgraphNodeSchema"
              }
            }
          },
          "__meta__": {
            "name": null,
            "class": "siliconcompiler.flowgraph/Flowgraph",
            "sctype": "Flowgraph"
          }
        }
      },
      "metric": {
        "errors": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_errors 'step index <int>'"
          ],
          "shorthelp": "Metric: total errors",
          "example": [
            "cli: -metric_errors 'dfm 0 0'",
            "api: project.set('metric', 'errors', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of errors on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "warnings": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_warnings 'step index <int>'"
          ],
          "shorthelp": "Metric: total warnings",
          "example": [
            "cli: -metric_warnings 'dfm 0 0'",
            "api: project.set('metric', 'warnings', 0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total number of warnings on a\nper step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "memory": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_memory 'step index <float>'"
          ],
          "shorthelp": "Metric: memory",
          "example": [
            "cli: -metric_memory 'dfm 0 10e9'",
            "api: project.set('metric', 'memory', 10e9, step='dfm', index=0)"
          ],
          "help": "Metric tracking total peak program memory footprint on a per\nstep and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "B"
        },
        "exetime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_exetime 'step index <float>'"
          ],
          "shorthelp": "Metric: exetime",
          "example": [
            "cli: -metric_exetime 'dfm 0 10.0'",
            "api: project.set('metric', 'exetime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking time spent by the EDA executable\n:keypath:`tool,<tool>,task,<task>,exe` on a\nper step and index basis. It does not include the SiliconCompiler\nruntime overhead or time waiting for I/O operations and\ninter-processor communication to complete.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "tasktime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_tasktime 'step index <float>'"
          ],
          "shorthelp": "Metric: tasktime",
          "example": [
            "cli: -metric_tasktime 'dfm 0 10.0'",
            "api: project.set('metric', 'tasktime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent on a task from\nbeginning to end, including data transfers and pre/post\nprocessing.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "totaltime": {
          "type": "float",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-metric_totaltime 'step index <float>'"
          ],
          "shorthelp": "Metric: totaltime",
          "example": [
            "cli: -metric_totaltime 'dfm 0 10.0'",
            "api: project.set('metric', 'totaltime', 10.0, step='dfm', index=0)"
          ],
          "help": "Metric tracking the total amount of time spent from the beginning\nof the run up to and including the current step and index.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.metric/MetricSchema",
          "sctype": "MetricSchema"
        }
      },
      "record": {
        "userid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_userid 'step index <str>'"
          ],
          "shorthelp": "Record: userid",
          "example": [
            "cli: -record_userid 'dfm 0 wiley'",
            "api: schema.set('record', 'userid', 'wiley', step='dfm', index=0)"
          ],
          "help": "Record tracking the userid per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "publickey": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_publickey 'step index <str>'"
          ],
          "shorthelp": "Record: public key",
          "example": [
            "cli: -record_publickey 'dfm 0 <key>'",
            "api: schema.set('record', 'publickey', '<key>', step='dfm', index=0)"
          ],
          "help": "Record tracking the public key per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "machine": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_machine 'step index <str>'"
          ],
          "shorthelp": "Record: machine name",
          "example": [
            "cli: -record_machine 'dfm 0 carbon'",
            "api: schema.set('record', 'machine', 'carbon', step='dfm', index=0)"
          ],
          "help": "Record tracking the machine name per step and index basis. (myhost, localhost, ...",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "macaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_macaddr 'step index <str>'"
          ],
          "shorthelp": "Record: MAC address",
          "example": [
            "cli: -record_macaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'macaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the MAC address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "ipaddr": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_ipaddr 'step index <str>'"
          ],
          "shorthelp": "Record: IP address",
          "example": [
            "cli: -record_ipaddr 'dfm 0 <addr>'",
            "api: schema.set('record', 'ipaddr', '<addr>', step='dfm', index=0)"
          ],
          "help": "Record tracking the IP address per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "platform": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_platform 'step index <str>'"
          ],
          "shorthelp": "Record: platform name",
          "example": [
            "cli: -record_platform 'dfm 0 linux'",
            "api: schema.set('record', 'platform', 'linux', step='dfm', index=0)"
          ],
          "help": "Record tracking the platform name per step and index basis. (linux, windows, freebsd)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "distro": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_distro 'step index <str>'"
          ],
          "shorthelp": "Record: distro name",
          "example": [
            "cli: -record_distro 'dfm 0 ubuntu'",
            "api: schema.set('record', 'distro', 'ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the distro name per step and index basis. (ubuntu, redhat, centos)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "arch": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_arch 'step index <str>'"
          ],
          "shorthelp": "Record: hardware architecture",
          "example": [
            "cli: -record_arch 'dfm 0 x86_64'",
            "api: schema.set('record', 'arch', 'x86_64', step='dfm', index=0)"
          ],
          "help": "Record tracking the hardware architecture per step and index basis. (x86_64, rv64imafdc)",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "starttime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_starttime 'step index <str>'"
          ],
          "shorthelp": "Record: start time",
          "example": [
            "cli: -record_starttime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'starttime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the start time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "endtime": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_endtime 'step index <str>'"
          ],
          "shorthelp": "Record: end time",
          "example": [
            "cli: -record_endtime 'dfm 0 \"2021-09-06 12:20:20.000000\"'",
            "api: schema.set('record', 'endtime', '\"2021-09-06 12:20:20.000000\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the end time per step and index basis. Time is recorded with the format YYYY-MM-DD HR:MIN:SEC.MICROSEC for UTC",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "region": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_region 'step index <str>'"
          ],
          "shorthelp": "Record: cloud region",
          "example": [
            "cli: -record_region 'dfm 0 \"US Gov Boston\"'",
            "api: schema.set('record', 'region', '\"US Gov Boston\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the cloud region per step and index basis. Recommended naming methodology:\n\n* local: node is the local machine\n* onprem: node in on-premises IT infrastructure\n* public: generic public cloud\n* govcloud: generic US government cloud\n* <region>: cloud and entity specific region string name",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "scversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_scversion 'step index <str>'"
          ],
          "shorthelp": "Record: software version",
          "example": [
            "cli: -record_scversion 'dfm 0 1.0'",
            "api: schema.set('record', 'scversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the software version per step and index basis. Version number for the SiliconCompiler software.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolversion 'step index <str>'"
          ],
          "shorthelp": "Record: tool version",
          "example": [
            "cli: -record_toolversion 'dfm 0 1.0'",
            "api: schema.set('record', 'toolversion', '1.0', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool version per step and index basis. The tool version captured corresponds to the 'tool'\nparameter within the 'tool' dictionary.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolpath": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolpath 'step index <str>'"
          ],
          "shorthelp": "Record: tool path",
          "example": [
            "cli: -record_toolpath 'dfm 0 /usr/bin/openroad'",
            "api: schema.set('record', 'toolpath', '/usr/bin/openroad', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool path per step and index basis. Full path to tool executable used to run this\ntask.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolargs": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolargs 'step index <str>'"
          ],
          "shorthelp": "Record: tool CLI arguments",
          "example": [
            "cli: -record_toolargs 'dfm 0 \"-I include/ foo.v\"'",
            "api: schema.set('record', 'toolargs', '\"-I include/ foo.v\"', step='dfm', index=0)"
          ],
          "help": "Record tracking the tool CLI arguments per step and index basis. Arguments passed to tool via CLI.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonversion 'step index <str>'"
          ],
          "shorthelp": "Record: Python version",
          "example": [
            "cli: -record_pythonversion 'dfm 0 3.12.3'",
            "api: schema.set('record', 'pythonversion', '3.12.3', step='dfm', index=0)"
          ],
          "help": "Record tracking the Python version per step and index basis. Version of python used to run this task.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "osversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_osversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S version",
          "example": [
            "cli: -record_osversion 'dfm 0 20.04.1-Ubuntu'",
            "api: schema.set('record', 'osversion', '20.04.1-Ubuntu', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S version per step and index basis. Since there is not standard version system for operating\nsystems, extracting information from is platform dependent.\nFor Linux based operating systems, the 'osversion' is the\nversion of the distro.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "kernelversion": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_kernelversion 'step index <str>'"
          ],
          "shorthelp": "Record: O/S kernel version",
          "example": [
            "cli: -record_kernelversion 'dfm 0 5.11.0-34-generic'",
            "api: schema.set('record', 'kernelversion', '5.11.0-34-generic', step='dfm', index=0)"
          ],
          "help": "Record tracking the O/S kernel version per step and index basis. Used for platforms that support a distinction\nbetween os kernels and os distributions.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "toolexitcode": {
          "type": "int",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_toolexitcode 'step index <int>'"
          ],
          "shorthelp": "Record: tool exit code",
          "example": [
            "cli: -record_toolexitcode 'dfm 0 0'",
            "api: schema.set('record', 'toolexitcode', 0, step='dfm', index=0)"
          ],
          "help": "Record tracking the tool exit code per step and index basis.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "remoteid": {
          "type": "str",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_remoteid '<str>'"
          ],
          "shorthelp": "Record: remote job ID",
          "example": [
            "cli: -record_remoteid '0123456789abcdeffedcba9876543210'",
            "api: schema.set('record', 'remoteid', '0123456789abcdeffedcba9876543210')"
          ],
          "help": "Record tracking the job ID for a remote run.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pythonpackage": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_pythonpackage '<str>'"
          ],
          "shorthelp": "Record: python packages",
          "example": [
            "cli: -record_pythonpackage 'siliconcompiler==0.28.0'",
            "api: schema.set('record', 'pythonpackage', 'siliconcompiler==0.28.0')"
          ],
          "help": "Record tracking for the python packages installed.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "status": {
          "type": "<error,pending,queued,running,skipped,success,timeout>",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_status 'step index <str>'"
          ],
          "shorthelp": "Record: node execution status",
          "example": [
            "cli: -record_status 'syn 0 success'",
            "api: schema.set('record', 'status', 'success', step='syn', index='0')"
          ],
          "help": "Record tracking for the status of a node.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "inputnode": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-record_inputnode 'step index <(str,str)>'"
          ],
          "shorthelp": "Record: node inputs",
          "example": [
            "cli: -record_inputnode 'cts 0 (place,42)'",
            "api: schema.set('record', 'inputnode', ('place', '42'), step='syn', index='0')"
          ],
          "help": "List of selected inputs for the current step/index specified as\n(in_step, in_index) tuple.",
          "notes": null,
          "pernode": "required",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.record/RecordSchema",
          "sctype": "RecordSchema"
        }
      },
      "tool": {
        "default": {
          "task": {
            "default": {
              "dataroot": {
                "default": {
                  "path": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory path",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
                    ],
                    "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  },
                  "tag": {
                    "type": "str",
                    "require": false,
                    "scope": "global",
                    "lock": false,
                    "switch": [],
                    "shorthelp": "Data directory reference tag/version",
                    "example": [
                      "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
                    ],
                    "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
                    "notes": null,
                    "pernode": "never",
                    "node": {
                      "default": {
                        "default": {
                          "value": null,
                          "signature": null
                        }
                      }
                    }
                  }
                }
              },
              "exe": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_exe 'tool <str>'"
                ],
                "shorthelp": "Tool: executable name",
                "example": [
                  "cli: -tool_exe 'openroad openroad'",
                  "api: task.set('tool', 'openroad', 'exe', 'openroad')"
                ],
                "help": "Tool executable name.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "sbom": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_sbom 'tool version <file>'"
                  ],
                  "shorthelp": "Tool: software BOM",
                  "example": [
                    "cli: -tool_sbom 'yosys 1.0.1 ys_sbom.json'",
                    "api: task.set('tool', 'yosys', 'sbom', '1.0', 'ys_sbom.json')"
                  ],
                  "help": "Paths to software bill of material (SBOM) document file of the tool\nspecified on a per version basis. The SBOM includes critical\npackage information about the tool including the list of included\ncomponents, licenses, and copyright. The SBOM file is generally\nprovided as in a a standardized open data format such as SPDX.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "path": {
                "type": "dir",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_path 'tool <dir>'"
                ],
                "shorthelp": "Tool: executable path",
                "example": [
                  "cli: -tool_path 'openroad /usr/local/bin'",
                  "api: task.set('tool', 'openroad', 'path', '/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is prepended to the\nsystem PATH environment variable for batch and interactive runs. The\npath parameter can be left blank if the :keypath:`tool,<tool>,task,<task>,exe` is\nalready in the environment search path.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null,
                      "filehash": null,
                      "dataroot": null
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "vswitch": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vswitch 'tool <str>'"
                ],
                "shorthelp": "Tool: executable version switch",
                "example": [
                  "cli: -tool_vswitch 'openroad -version'",
                  "api: task.set('tool', 'openroad', 'vswitch', '-version')"
                ],
                "help": "Command line switch to use with executable used to print out\nthe version number. Common switches include ``-v``, ``-version``,\n``--version``. Some tools may require extra flags to run in batch mode.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "vendor": {
                "type": "str",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_vendor 'tool <str>'"
                ],
                "shorthelp": "Tool: vendor",
                "example": [
                  "cli: -tool_vendor 'yosys yosys'",
                  "api: task.set('tool', 'yosys', 'vendor', 'yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor\nspecific technology variables in the PDK and libraries. For\nopen source projects, the project name should be used in\nplace of vendor.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "version": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_version 'tool <str>'"
                ],
                "shorthelp": "Tool: version",
                "example": [
                  "cli: -tool_version 'openroad >=v2.0'",
                  "api: task.set('tool', 'openroad', 'version', '>=v2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used. Each\nentry in this list must be a version specifier as described by Python\n`PEP-440 <https://peps.python.org/pep-0440/#version-specifiers>`_.\nDuring task execution, the tool is called with the 'vswitch' to\ncheck the runtime executable version. If the version of the system\nexecutable is not allowed by any of the specifiers in 'version',\nthen the job is halted pre-execution. For backwards compatibility,\nentries that do not conform to the standard will be interpreted as a\nversion with an '==' specifier. This check can be disabled by\nsetting :keypath:`option,novercheck` to True.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "format": {
                "type": "<json,tcl,yaml>",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_format 'tool <str>'"
                ],
                "shorthelp": "Tool: file format",
                "example": [
                  "cli: -tool_format 'yosys tcl'",
                  "api: task.set('tool', 'yosys', 'format', 'tcl')"
                ],
                "help": "File format for tool manifest handoff.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "licenseserver": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_licenseserver 'name key <str>'"
                  ],
                  "shorthelp": "Tool: license servers",
                  "example": [
                    "cli: -tool_licenseserver 'atask ACME_LICENSE 1700@server'",
                    "api: task.set('tool', 'acme', 'licenseserver', 'ACME_LICENSE', '1700@server')"
                  ],
                  "help": "Defines a set of tool-specific environment variables used by the executable\nthat depend on license key servers to control access. For multiple servers,\nseparate servers with a colon. The named license variables are read at\nruntime (:meth:`.Task.run()`) and the environment variables are set.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "warningoff": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_warningoff 'tool task <str>'"
                ],
                "shorthelp": "Task: warning filter",
                "example": [
                  "cli: -tool_task_warningoff 'verilator lint COMBDLY'",
                  "api: task.set('tool', 'verilator', 'task', 'lint', 'warningoff', 'COMBDLY')"
                ],
                "help": "A list of tool warnings for which printing should be suppressed.\nGenerally this is done on a per design basis after review has\ndetermined that warning can be safely ignored The code for turning\noff warnings can be found in the specific task reference manual.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "regex": {
                "default": {
                  "type": "[str]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_regex 'tool task suffix <str>'"
                  ],
                  "shorthelp": "Task: regex filter",
                  "example": [
                    "cli: -tool_task_regex 'openroad place errors \"'-v ERROR'\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'regex', 'errors', '-v ERROR')"
                  ],
                  "help": "A list of piped together grep commands. Each entry represents a set\nof command line arguments for grep including the regex pattern to\nmatch. Starting with the first list entry, each grep output is piped\ninto the following grep command in the list. Supported grep options\ninclude ``-v`` and ``-e``. Patterns starting with \"-\" should be\ndirectly preceded by the ``-e`` option. The following example\nillustrates the concept.\n\nUNIX grep:\n\n.. code-block:: bash\n\n    $ grep WARNING place.log | grep -v \"bbox\" > place.warnings\n\nSiliconCompiler::\n\n    task.set('task', 'openroad', 'regex', 'place', '0', 'warnings',\n             [\"WARNING\", \"-v bbox\"])\n\nThe \"errors\" and \"warnings\" suffixes are special cases. When set,\nthe number of matches found for these regexes will be added to the\nerrors and warnings metrics for the task, respectively. This will\nalso cause the logfile to be added to the :keypath:`tool, <tool>,\ntask, <task>, report` parameter for those metrics, if not already present.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": []
                      }
                    }
                  }
                }
              },
              "option": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_option 'tool task <str>'"
                ],
                "shorthelp": "Task: executable options",
                "example": [
                  "cli: -tool_task_option 'openroad cts -no_init'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'option', '-no_init')"
                ],
                "help": "List of command line options for the task executable, specified on\na per task and per step basis. Options must not include spaces.\nFor multiple argument options, each option is a separate list element.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "env": {
                "default": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_env 'tool task env <str>'"
                  ],
                  "shorthelp": "Task: environment variables",
                  "example": [
                    "cli: -tool_task_env 'openroad cts MYVAR 42'",
                    "api: task.set('tool', 'openroad', 'task', 'cts', 'env', 'MYVAR', '42')"
                  ],
                  "help": "Environment variables to set for individual tasks. Keys and values\nshould be set in accordance with the task's documentation. Most\ntasks do not require extra environment variables to function.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              },
              "input": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_input 'tool task <file>'"
                ],
                "shorthelp": "Task: input files",
                "example": [
                  "cli: -tool_task_input 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'input', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key :keypath:`flowgraph,<flow>,<step>,<index>,input`.\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "output": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_output 'tool task <file>'"
                ],
                "shorthelp": "Task: output files",
                "example": [
                  "cli: -tool_task_output 'openroad place \"place 0 oh_add.def\"'",
                  "api: task.set('tool', 'openroad', 'task', 'place', 'output', 'oh_add.def', step='place', index='0')"
                ],
                "help": "List of data files written to the 'output' directory of the\ntool/task/step/index used in the keypath. All files must be available\nfor flow to continue. If a file is missing, the program exists on an error.",
                "notes": null,
                "pernode": "required",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "stdout": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stdout",
                  "example": [
                    "cli: -tool_task_stdout_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stdout.\nSupported options are:\nnone: the stream generated to STDOUT is ignored.\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stdout_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stdout",
                  "example": [
                    "cli: -tool_task_stdout_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stdout', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stdout.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "stderr": {
                "destination": {
                  "type": "<log,none,output>",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_destination 'tool task <str>'"
                  ],
                  "shorthelp": "Task: destination for stderr",
                  "example": [
                    "cli: -tool_task_stderr_destination 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'destination', 'log')"
                  ],
                  "help": "Defines where to direct the output generated over stderr.\nSupported options are:\nnone: the stream generated to STDERR is ignored\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display.\noutput: the generated stream is stored in outputs/<design>.<suffix>",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                },
                "suffix": {
                  "type": "str",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_stderr_suffix 'tool task <str>'"
                  ],
                  "shorthelp": "Task: file suffix for redirected stderr",
                  "example": [
                    "cli: -tool_task_stderr_suffix 'ghdl import log'",
                    "api: task.set('tool', 'ghdl', 'task', 'import', 'stderr', 'suffix', 'log')"
                  ],
                  "help": "Specifies the file extension for the content redirected from stderr.",
                  "notes": null,
                  "pernode": "optional",
                  "node": {
                    "default": {
                      "default": {
                        "value": "log",
                        "signature": null
                      }
                    }
                  }
                }
              },
              "require": {
                "type": "[str]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_require 'tool task <str>'"
                ],
                "shorthelp": "Task: parameter requirements",
                "example": [
                  "cli: -tool_task_require 'openroad cts design'",
                  "api: task.set('tool', 'openroad', 'task', 'cts', 'require', 'design')"
                ],
                "help": "List of keypaths to required task parameters. The list is used\nby :meth:`.Project.check_manifest()` to verify that all parameters have been set up\nbefore step execution begins.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              },
              "report": {
                "default": {
                  "type": "[file]",
                  "require": false,
                  "scope": "job",
                  "lock": false,
                  "switch": [
                    "-tool_task_report 'tool task metric <file>'"
                  ],
                  "shorthelp": "Task: metric report files",
                  "example": [
                    "cli: -tool_task_report 'openroad place holdtns \"place 0 place.log\"'",
                    "api: task.set('tool', 'openroad', 'task', 'place', 'report', 'holdtns', 'place.log', step='place', index='0')"
                  ],
                  "help": "List of report files associated with a specific 'metric'. The file path\nspecified is relative to the run directory of the current task.",
                  "notes": null,
                  "pernode": "required",
                  "node": {
                    "default": {
                      "default": {
                        "value": [],
                        "signature": [],
                        "filehash": [],
                        "dataroot": [],
                        "date": [],
                        "author": []
                      }
                    }
                  },
                  "hashalgo": "sha256",
                  "copy": false
                }
              },
              "refdir": {
                "type": "[dir]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_refdir 'tool task <dir>'"
                ],
                "shorthelp": "Task: script directory",
                "example": [
                  "cli: -tool_task_refdir 'yosys syn ./myref'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'refdir', './myref')"
                ],
                "help": "Path to directories containing reference flow scripts, specified\non a per step and index basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "script": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_script 'tool task <file>'"
                ],
                "shorthelp": "Task: entry script",
                "example": [
                  "cli: -tool_task_script 'yosys syn syn.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'script', 'syn.tcl')"
                ],
                "help": "Path to the entry script called by the executable specified\non a per task and per step basis.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": false
              },
              "prescript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_prescript 'tool task <file>'"
                ],
                "shorthelp": "Task: pre-step script",
                "example": [
                  "cli: -tool_task_prescript 'yosys syn syn_pre.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'prescript', 'syn_pre.tcl')"
                ],
                "help": "Path to a user supplied script to execute after reading in the design\nbut before the main execution stage of the step. Exact entry point\ndepends on the step and main script being executed. An example\nof a prescript entry point would be immediately before global\nplacement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "postscript": {
                "type": "[file]",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_postscript 'tool task <file>'"
                ],
                "shorthelp": "Task: post-step script",
                "example": [
                  "cli: -tool_task_postscript 'yosys syn syn_post.tcl'",
                  "api: task.set('tool', 'yosys', 'task', 'syn_asic', 'postscript', 'syn_post.tcl')"
                ],
                "help": "Path to a user supplied script to execute after the main execution\nstage of the step but before the design is saved.\nExact entry point depends on the step and main script being\nexecuted. An example of a postscript entry point would be immediately\nafter global placement.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": [],
                      "filehash": [],
                      "dataroot": [],
                      "date": [],
                      "author": []
                    }
                  }
                },
                "hashalgo": "sha256",
                "copy": true
              },
              "threads": {
                "type": "int",
                "require": false,
                "scope": "job",
                "lock": false,
                "switch": [
                  "-tool_task_threads 'tool task <int>'"
                ],
                "shorthelp": "Task: thread parallelism",
                "example": [
                  "cli: -tool_task_threads 'magic drc 64'",
                  "api: task.set('tool', 'magic', 'task', 'drc', 'threads', '64')"
                ],
                "help": "Thread parallelism to use for execution specified on a per task and per\nstep basis. If not specified, SC queries the operating system and sets\nthe threads based on the maximum thread count supported by the\nhardware.",
                "notes": null,
                "pernode": "optional",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              },
              "__meta__": {
                "name": null,
                "class": "siliconcompiler.tool/Task",
                "sctype": "Task"
              }
            }
          }
        }
      },
      "option": {
        "remote": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-remote <bool>"
          ],
          "shorthelp": "Option: enable remote processing",
          "example": [
            "cli: -remote",
            "api: option.set('remote', True)"
          ],
          "help": "\n                Sends job for remote processing if set to true. The remote\n                option requires a credentials file to be placed in the home\n                directory. Fore more information, see the credentials\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "credentials": {
          "type": "file",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-credentials <file>"
          ],
          "shorthelp": "Option: user credentials file",
          "example": [
            "cli: -credentials /home/user/.sc/credentials",
            "api: option.set('credentials', '/home/user/.sc/credentials')"
          ],
          "help": "\n                Filepath to credentials used for remote processing. If the\n                credentials parameter is empty, the remote processing client program\n                tries to access the \".sc/credentials\" file in the user's home\n                directory. The file supports the following fields:\n\n                address=<server address>\n                port=<server port> (optional)\n                username=<user id> (optional)\n                password=<password / key used for authentication> (optional)",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null,
                "date": null,
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "cachedir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-cachedir <dir>"
          ],
          "shorthelp": "Option: user cache directory",
          "example": [
            "cli: -cachedir /home/user/.sc/cache",
            "api: option.set('cachedir', '/home/user/.sc/cache')"
          ],
          "help": "\n                Filepath to cache used for package data sources. If the\n                cache parameter is empty, \".sc/cache\" directory in the user's home\n                directory will be used.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "nice": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nice <int>"
          ],
          "shorthelp": "Option: tool scheduling priority",
          "example": [
            "cli: -nice 5",
            "api: option.set('nice', 5)"
          ],
          "help": "\n                Sets the type of execution priority of each individual flowgraph steps.\n                If the parameter is undefined, nice will not be used. For more information see\n                `Unix 'nice' <https://en.wikipedia.org/wiki/Nice_(Unix)>`_.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "flow": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-flow <str>"
          ],
          "shorthelp": "Option: flow target",
          "example": [
            "cli: -flow asicflow",
            "api: option.set('flow', 'asicflow')"
          ],
          "help": "\n                Sets the flow for the current run. The flow name\n                must match up with a 'flow' in the flowgraph",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "optmode": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-O<str>",
            "-optmode <str>"
          ],
          "shorthelp": "Option: optimization mode",
          "example": [
            "cli: -O3",
            "cli: -optmode 3",
            "api: option.set('optmode', 'O3')"
          ],
          "help": "\n                The compiler has modes to prioritize run time and ppa. Modes\n                include.\n\n                (O0) = Exploration mode for debugging setup\n                (O1) = Higher effort and better PPA than O0\n                (O2) = Higher effort and better PPA than O1\n                (O3) = Signoff quality. Better PPA and higher run times than O2\n                (O4-O98) = Reserved (compiler/target dependent)\n                (O99) = Experimental highest possible effort, may be unstable\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": 0,
                "signature": null
              }
            }
          }
        },
        "builddir": {
          "type": "dir",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-builddir <dir>"
          ],
          "shorthelp": "Option: build directory",
          "example": [
            "cli: -builddir ./build_the_future",
            "api: option.set('builddir', './build_the_future')"
          ],
          "help": "\n                The default build directory is in the local './build' where SC was\n                executed. This can be used to set an alternate\n                compilation directory path.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "build",
                "signature": null,
                "filehash": null,
                "dataroot": null
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "jobname": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobname <str>"
          ],
          "shorthelp": "Option: job name",
          "example": [
            "cli: -jobname may1",
            "api: option.set('jobname', 'may1')"
          ],
          "help": "\n                Jobname during invocation of :meth:`.Project.run()`. The jobname combined with a\n                defined director structure (<dir>/<design>/<jobname>/<step>/<index>)\n                enables multiple levels of transparent job, step, and index\n                introspection.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": "job0",
                "signature": null
              }
            }
          }
        },
        "from": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-from <str>"
          ],
          "shorthelp": "Option: starting step",
          "example": [
            "cli: -from 'import'",
            "api: option.set('from', 'import')"
          ],
          "help": "\n                Inclusive list of steps to start execution from. The default is to start\n                at all entry steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "to": {
          "type": "[str]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-to <str>"
          ],
          "shorthelp": "Option: ending step",
          "example": [
            "cli: -to 'syn'",
            "api: option.set('to', 'syn')"
          ],
          "help": "\n                Inclusive list of steps to end execution with. The default is to go\n                to all exit steps in the flow graph.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "prune": {
          "type": "[(str,str)]",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-prune 'node <(str,str)>'"
          ],
          "shorthelp": "Option: flowgraph pruning",
          "example": [
            "cli: -prune (syn,0)",
            "api: option.set('prune', ('syn', '0'))"
          ],
          "help": "\n                List of starting nodes for branches to be pruned.\n                The default is to not prune any nodes/branches.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "breakpoint": {
          "type": "bool",
          "require": false,
          "scope": "job",
          "lock": false,
          "switch": [
            "-breakpoint <bool>"
          ],
          "shorthelp": "Option: breakpoint list",
          "example": [
            "cli: -breakpoint true",
            "api: option.set('breakpoint', True)"
          ],
          "help": "\n                Set a breakpoint on specific steps. If the step is a TCL\n                based tool, then the breakpoints stops the flow inside the\n                EDA tool. If the step is a command line tool, then the flow\n                drops into a Python interpreter.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "clean": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-clean <bool>"
          ],
          "shorthelp": "Option: cleanup previous job",
          "example": [
            "cli: -clean",
            "api: option.set('clean', True)"
          ],
          "help": "\n                Run a job from the start and do not use any of the previous job.\n                If :keypath:`option, jobincr` is True, the old job is preserved and\n                a new job number is assigned.\n                ",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "hash": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-hash <bool>"
          ],
          "shorthelp": "Option: file hashing",
          "example": [
            "cli: -hash",
            "api: option.set('hash', True)"
          ],
          "help": "\n                Enables hashing of all inputs and outputs during\n                compilation. The hash values are stored in the hashvalue\n                field of the individual parameters.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "nodisplay": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodisplay <bool>"
          ],
          "shorthelp": "Option: headless execution",
          "example": [
            "cli: -nodisplay",
            "api: option.set('nodisplay', True)"
          ],
          "help": "\n                This flag prevents SiliconCompiler from opening GUI windows.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "quiet": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-quiet <bool>"
          ],
          "shorthelp": "Option: quiet execution",
          "example": [
            "cli: -quiet",
            "api: option.set('quiet', True)"
          ],
          "help": "\n                The -quiet option forces all steps to print to a log file.\n                This can be useful with Modern EDA tools which print\n                significant content to the screen.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "jobincr": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-jobincr <bool>"
          ],
          "shorthelp": "Option: autoincrement jobname",
          "example": [
            "cli: -jobincr",
            "api: option.set('jobincr', True)"
          ],
          "help": "\n                Forces an auto-update of the jobname parameter if a directory\n                matching the jobname is found in the build directory. If the\n                jobname does not include a trailing digit, then the number\n                '1' is added to the jobname before updating the jobname\n                parameter.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "novercheck": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-novercheck <bool>"
          ],
          "shorthelp": "Option: disable version checking",
          "example": [
            "cli: -novercheck",
            "api: option.set('novercheck', True)"
          ],
          "help": "\n                Disables strict version checking on all invoked tools if True.\n                The list of supported version numbers is defined in the\n                :keypath:`tool,<tool>,task,<task>,version`.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "track": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-track <bool>"
          ],
          "shorthelp": "Option: enable provenance tracking",
          "example": [
            "cli: -track",
            "api: option.set('track', True)"
          ],
          "help": "\n                Turns on tracking of all 'record' parameters during each\n                task, otherwise only tool and runtime information will be recorded.\n                Tracking will result in potentially sensitive data\n                being recorded in the manifest so only turn on this feature\n                if you have control of the final manifest.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "continue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-continue <bool>"
          ],
          "shorthelp": "Option: continue-on-error",
          "example": [
            "cli: -continue",
            "api: option.set('continue', True)"
          ],
          "help": "\n                Attempt to continue even when errors are encountered in the SC\n                implementation. The default behavior is to quit executing the flow\n                if a task ends and the errors metric is greater than 0. Note that\n                the flow will always cease executing if the tool returns a nonzero\n                status code.\n                ",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "timeout": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-timeout <float>"
          ],
          "shorthelp": "Option: timeout value",
          "example": [
            "cli: -timeout 3600",
            "api: option.set('timeout', 3600)"
          ],
          "help": "\n                Timeout value in seconds. The timeout value is compared\n                against the wall time tracked by the SC runtime to determine\n                if an operation should continue.",
          "notes": null,
          "pernode": "optional",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "s"
        },
        "env": {
          "default": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: environment variables",
            "example": [
              "api: option.set('env', 'PDK_HOME', '/disk/mypdk')"
            ],
            "help": "Certain tools and reference flows require global environment\nvariables to be set. These variables can be managed externally or\nspecified through the env variable.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        },
        "design": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-design <str>"
          ],
          "shorthelp": "Option: Design library name",
          "example": [
            "cli: -design hello_world",
            "api: option.set('design', 'hello_world')"
          ],
          "help": "Name of the top level library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "alias": {
          "type": "[(str,str,str,str)]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Fileset alias mapping",
          "example": [
            "api: option.set('alias', ('design', 'rtl', 'lambda', 'rtl'))"
          ],
          "help": "List of filesets to alias during a run. When an alias is specific\nit will be used instead of the source fileset. It is useful when you\nwant to substitute a fileset from one library with a fileset from another,\nwithout changing the original design's code.\nFor example, you might use it to swap in a different version of an IP\nblock or a specific test environment.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "fileset": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Option: Selected design filesets",
          "example": [
            "api: option.set('fileset', 'rtl')"
          ],
          "help": "List of filesets to use from the selected design library",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "nodashboard": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-nodashboard <bool>"
          ],
          "shorthelp": "Option: Disables the dashboard",
          "example": [
            "api: option.set('nodashboard', True)"
          ],
          "help": "Disables the dashboard during execution",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "autoissue": {
          "type": "bool",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-autoissue <bool>"
          ],
          "shorthelp": "Option: Enables automatic generation of testcases",
          "example": [
            "api: option.set('autoissue', True)"
          ],
          "help": "Enables automatic generation of testcases\nif the specific node fails",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": false,
                "signature": null
              }
            }
          }
        },
        "scheduler": {
          "name": {
            "type": "<docker,lsf,sge,slurm>",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler <str>"
            ],
            "shorthelp": "Option: scheduler platform",
            "example": [
              "cli: -scheduler slurm",
              "api: option.set('name', 'slurm')"
            ],
            "help": "\n                Sets the type of job scheduler to be used for each individual\n                flowgraph steps. If the parameter is undefined, the steps are executed\n                on the same machine that the SC was launched on. If 'slurm' is used,\n                the host running the 'sc' command must be running a 'slurmctld' daemon\n                managing a Slurm cluster. Additionally, the build directory\n                (:keypath:`option,builddir`) must be located in shared storage which\n                can be accessed by all hosts in the cluster.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "cores": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-cores <int>"
            ],
            "shorthelp": "Option: Scheduler core constraint",
            "example": [
              "cli: -cores 48",
              "api: option.set('cores', 48)"
            ],
            "help": "\n                Specifies the number CPU cores required to run the job.\n                For the slurm scheduler, this translates to the '-c'\n                switch. For more information, see the job scheduler\n                documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "memory": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-memory <int>"
            ],
            "shorthelp": "Option: scheduler memory constraint",
            "example": [
              "cli: -memory 8000",
              "api: option.set('memory', 8000)"
            ],
            "help": "\n                Specifies the amount of memory required to run the job,\n                specified in MB. For the slurm scheduler, this translates to\n                the '--mem' switch. For more information, see the job\n                scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            },
            "unit": "MB"
          },
          "queue": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-queue <str>"
            ],
            "shorthelp": "Option: scheduler queue",
            "example": [
              "cli: -queue nightrun",
              "api: option.set('queue', 'nightrun')"
            ],
            "help": "\n                Send the job to the specified queue. With slurm, this\n                translates to 'partition'. The queue name must match\n                the name of an existing job scheduler queue. For more information,\n                see the job scheduler documentation",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "defer": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-defer <str>"
            ],
            "shorthelp": "Option: scheduler start time",
            "example": [
              "cli: -defer 16:00",
              "api: option.set('defer', '16:00')"
            ],
            "help": "\n                Defer initiation of job until the specified time. The parameter\n                is pass through string for remote job scheduler such as slurm.\n                For more information about the exact format specification, see\n                the job scheduler documentation. Examples of valid slurm specific\n                values include: now+1hour, 16:00, 010-01-20T12:34:00. For more\n                information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "options": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-scheduler_options <str>"
            ],
            "shorthelp": "Option: scheduler arguments",
            "example": [
              "cli: -scheduler_options \"--pty\"",
              "api: option.set('options', \"--pty\")"
            ],
            "help": "\n                Advanced/export options passed through unchanged to the job\n                scheduler as-is. (The user specified options must be compatible\n                with the rest of the scheduler parameters entered.(memory etc).\n                For more information, see the job scheduler documentation.",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgevent": {
            "type": "{<all,begin,end,fail,summary,timeout>}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgevent <str>"
            ],
            "shorthelp": "Option: message event trigger",
            "example": [
              "cli: -msgevent all",
              "api: option.set('msgevent', 'all')"
            ],
            "help": "\n                Directs job scheduler to send a message to the user in\n                :keypath:`option,scheduler,msgcontact` when certain events occur\n                during a task.\n\n                * fail: send an email on failures\n                * timeout: send an email on timeouts\n                * begin: send an email at the start of a node task\n                * end: send an email at the end of a node task\n                * summary: send a summary email at the end of the run\n                * all: send an email on any event\n                ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "msgcontact": {
            "type": "{str}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-msgcontact <str>"
            ],
            "shorthelp": "Option: message contact",
            "example": [
              "cli: -msgcontact 'wile.e.coyote@acme.com'",
              "api: option.set('msgcontact', 'wiley@acme.com')"
            ],
            "help": "\n                List of email addresses to message on a :keypath:`option,scheduler,msgevent`.\n                Support for email messages relies on job scheduler daemon support.\n                For more information, see the job scheduler documentation. ",
            "notes": null,
            "pernode": "optional",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "maxnodes": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-maxnodes <int>"
            ],
            "shorthelp": "Option: maximum concurrent nodes",
            "example": [
              "cli: -maxnodes 4",
              "api: option.set('maxnodes', 4)"
            ],
            "help": "\n                Maximum number of concurrent nodes to run in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "maxthreads": {
            "type": "int",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Option: maximum number of threads to assign a task",
            "example": [
              "api: option.set('maxthreads', 4)"
            ],
            "help": "\n                Maximum number of threads for each task in a job. If not set this will default\n                to the number of cpu cores available.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "__meta__": {
            "class": "siliconcompiler.schema_support.option/SchedulerSchema",
            "sctype": "BaseSchema"
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.option/OptionSchema",
          "sctype": "BaseSchema"
        }
      },
      "history": {},
      "__meta__": {
        "class": "siliconcompiler.project/Lint",
        "sctype": "Lint"
      }
    }
  },
  "library": {
    "design": {
      "dataroot": {
        "default": {
          "path": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory path",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
            ],
            "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "tag": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory reference tag/version",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
            ],
            "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        }
      },
      "fileset": {
        "default": {
          "file": {
            "default": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Fileset files",
              "example": [
                "api: schema.set('fileset', 'rtl', 'file', 'verilog', 'mytop.v')",
                "api: schema.set('fileset', 'testbench', 'file', 'verilog', 'tb.v')"
              ],
              "help": "List of files grouped as a named set ('fileset'). The exact names of\nfiletypes and filesets must match the names used in tasks\ncalled during flowgraph execution. The files are processed in\nthe order specified by the ordered file list.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": true
            }
          },
          "topmodule": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Top module name",
            "example": [
              "api: design.set('fileset', 'rtl', 'topmodule', 'mytop')",
              "api: design.set('fileset', 'testbench', 'topmodule', 'tb')"
            ],
            "help": "Name of top module specified on a per fileset basis.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "idir": {
            "type": "[dir]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Include file search paths",
            "example": [
              "api: design.set('fileset', 'rtl', 'idir', './rtl')",
              "api: design.set('fileset', 'testbench', 'idir', '/testbench')"
            ],
            "help": "Include paths specify directories to scan for header files during\ncompilation. If multiple paths are provided, they are searched\nin the order given.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": true
          },
          "define": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Preprocessor macro definitions",
            "example": [
              "api: design.set('fileset', 'rtl', 'define', 'CFG_TARGET=FPGA')"
            ],
            "help": "Defines macros at compile time for design languages that support\npreprocessing, such as Verilog, C, and C++. The macro format is\nis `MACRONAME[=value]`, where [=value] is optional.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "undefine": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Preprocessor macro undefine",
            "example": [
              "api: design.set('fileset', 'rtl', 'undefine', 'CFG_TARGET')"
            ],
            "help": "Undefines a macro that may have been previously defined via the\ncompiler, options, or header files.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "libdir": {
            "type": "[dir]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Library search paths",
            "example": [
              "api: design.set('fileset', 'rtl', 'libdir', '/usr/lib')"
            ],
            "help": "Specifies directories to scan for libraries provided with the\n:keypath:`Design,fileset,<fileset>,lib` parameter. If multiple paths are provided,\nthey are searched based on the order of the libdir list.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": true
          },
          "lib": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Design libraries to include",
            "example": [
              "api: design.set('fileset', 'rtl', 'lib', 'mylib')"
            ],
            "help": "Specifies libraries to use during compilation. The compiler searches for\nlibrary in the compiler standard library paths and in the\npaths specified by :keypath:`Design,fileset,<fileset>,libdir` parameter.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "param": {
            "default": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Design parameters",
              "example": [
                "api: design.set('fileset', 'rtl', 'param', 'N', '64')"
              ],
              "help": "Sets a named parameter to a string value. The value is limited to basic\ndata literals. The types of parameters and values supported is tightly\ncoupled to tools being used. For example, in Verilog only integer\nliterals (64'h4, 2'b0, 4) and strings are supported.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            }
          },
          "depfileset": {
            "type": "[(str,str)]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Design dependency fileset",
            "example": [
              "api: design.set('fileset', 'rtl', 'depfileset', ('lambdalib', 'rtl'))"
            ],
            "help": "Sets the mapping for dependency filesets.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          }
        }
      },
      "package": {
        "version": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_version <str>"
          ],
          "shorthelp": "Package: version",
          "example": [
            "cli: -package_version 1.0",
            "api: schema.set('version', '1.0')"
          ],
          "help": "Package version. Can be a branch, tag, commit hash,\nor a semver compatible version.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "vendor": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_vendor <str>"
          ],
          "shorthelp": "Package: vendor",
          "example": [
            "cli: -package_vendor acme",
            "api: schema.set('vendor', 'acme')"
          ],
          "help": "Package vendor.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "description": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_description <str>"
          ],
          "shorthelp": "Package: description",
          "example": [
            "cli: -package_description 'Yet another cpu'",
            "api: schema.set('description', 'Yet another cpu')"
          ],
          "help": "Package short one line description for package\nmanagers and summary reports.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "doc": {
          "datasheet": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_datasheet <file>"
            ],
            "shorthelp": "Package: datasheet document",
            "example": [
              "cli: -package_doc_datasheet datasheet.pdf",
              "api: schema.set('doc', 'datasheet', 'datasheet.pdf')"
            ],
            "help": "Package list of datasheet documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "reference": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_reference <file>"
            ],
            "shorthelp": "Package: reference document",
            "example": [
              "cli: -package_doc_reference reference.pdf",
              "api: schema.set('doc', 'reference', 'reference.pdf')"
            ],
            "help": "Package list of reference documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "userguide": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_userguide <file>"
            ],
            "shorthelp": "Package: userguide document",
            "example": [
              "cli: -package_doc_userguide userguide.pdf",
              "api: schema.set('doc', 'userguide', 'userguide.pdf')"
            ],
            "help": "Package list of userguide documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "quickstart": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_quickstart <file>"
            ],
            "shorthelp": "Package: quickstart document",
            "example": [
              "cli: -package_doc_quickstart quickstart.pdf",
              "api: schema.set('doc', 'quickstart', 'quickstart.pdf')"
            ],
            "help": "Package list of quickstart documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "releasenotes": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_releasenotes <file>"
            ],
            "shorthelp": "Package: releasenotes document",
            "example": [
              "cli: -package_doc_releasenotes releasenotes.pdf",
              "api: schema.set('doc', 'releasenotes', 'releasenotes.pdf')"
            ],
            "help": "Package list of releasenotes documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "testplan": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_testplan <file>"
            ],
            "shorthelp": "Package: testplan document",
            "example": [
              "cli: -package_doc_testplan testplan.pdf",
              "api: schema.set('doc', 'testplan', 'testplan.pdf')"
            ],
            "help": "Package list of testplan documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "signoff": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_signoff <file>"
            ],
            "shorthelp": "Package: signoff document",
            "example": [
              "cli: -package_doc_signoff signoff.pdf",
              "api: schema.set('doc', 'signoff', 'signoff.pdf')"
            ],
            "help": "Package list of signoff documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "tutorial": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_tutorial <file>"
            ],
            "shorthelp": "Package: tutorial document",
            "example": [
              "cli: -package_doc_tutorial tutorial.pdf",
              "api: schema.set('doc', 'tutorial', 'tutorial.pdf')"
            ],
            "help": "Package list of tutorial documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          }
        },
        "license": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_license <str>"
          ],
          "shorthelp": "Package: license identifiers",
          "example": [
            "cli: -package_license 'Apache-2.0'",
            "api: schema.set('license', 'Apache-2.0')"
          ],
          "help": "Package list of SPDX license identifiers.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "licensefile": {
          "type": "[file]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_licensefile <file>"
          ],
          "shorthelp": "Package: license files",
          "example": [
            "cli: -package_licensefile './LICENSE'",
            "api: schema.set('licensefile', './LICENSE')"
          ],
          "help": "Package list of license files for to be\napplied in cases when a SPDX identifier is not available.\n(eg. proprietary licenses).",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": [],
                "filehash": [],
                "dataroot": [],
                "date": [],
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "author": {
          "default": {
            "name": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_name 'userid <str>'"
              ],
              "shorthelp": "Package: author name",
              "example": [
                "cli: -package_author_name 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'name', 'wiley@acme.com')"
              ],
              "help": "Package author name provided with full name as key and\nname as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "email": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_email 'userid <str>'"
              ],
              "shorthelp": "Package: author email",
              "example": [
                "cli: -package_author_email 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'email', 'wiley@acme.com')"
              ],
              "help": "Package author email provided with full name as key and\nemail as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "organization": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_organization 'userid <str>'"
              ],
              "shorthelp": "Package: author organization",
              "example": [
                "cli: -package_author_organization 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'organization', 'wiley@acme.com')"
              ],
              "help": "Package author organization provided with full name as key and\norganization as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.packageschema/PackageSchema",
          "sctype": "PackageSchema"
        }
      },
      "deps": {
        "type": "[str]",
        "require": false,
        "scope": "global",
        "lock": true,
        "switch": [],
        "shorthelp": "List of object dependencies",
        "example": [],
        "help": "List of named object dependencies included via add_dep().",
        "notes": null,
        "pernode": "never",
        "node": {
          "default": {
            "default": {
              "value": [],
              "signature": []
            }
          }
        }
      },
      "__meta__": {
        "name": null,
        "class": "siliconcompiler.design/Design",
        "sctype": "Design"
      }
    },
    "pdk": {
      "dataroot": {
        "default": {
          "path": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory path",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
            ],
            "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "tag": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory reference tag/version",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
            ],
            "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        }
      },
      "fileset": {
        "default": {
          "file": {
            "default": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Fileset files",
              "example": [
                "api: schema.set('fileset', 'rtl', 'file', 'verilog', 'mytop.v')",
                "api: schema.set('fileset', 'testbench', 'file', 'verilog', 'tb.v')"
              ],
              "help": "List of files grouped as a named set ('fileset'). The exact names of\nfiletypes and filesets must match the names used in tasks\ncalled during flowgraph execution. The files are processed in\nthe order specified by the ordered file list.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            }
          }
        }
      },
      "package": {
        "version": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_version <str>"
          ],
          "shorthelp": "Package: version",
          "example": [
            "cli: -package_version 1.0",
            "api: schema.set('version', '1.0')"
          ],
          "help": "Package version. Can be a branch, tag, commit hash,\nor a semver compatible version.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "vendor": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_vendor <str>"
          ],
          "shorthelp": "Package: vendor",
          "example": [
            "cli: -package_vendor acme",
            "api: schema.set('vendor', 'acme')"
          ],
          "help": "Package vendor.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "description": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_description <str>"
          ],
          "shorthelp": "Package: description",
          "example": [
            "cli: -package_description 'Yet another cpu'",
            "api: schema.set('description', 'Yet another cpu')"
          ],
          "help": "Package short one line description for package\nmanagers and summary reports.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "doc": {
          "datasheet": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_datasheet <file>"
            ],
            "shorthelp": "Package: datasheet document",
            "example": [
              "cli: -package_doc_datasheet datasheet.pdf",
              "api: schema.set('doc', 'datasheet', 'datasheet.pdf')"
            ],
            "help": "Package list of datasheet documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "reference": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_reference <file>"
            ],
            "shorthelp": "Package: reference document",
            "example": [
              "cli: -package_doc_reference reference.pdf",
              "api: schema.set('doc', 'reference', 'reference.pdf')"
            ],
            "help": "Package list of reference documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "userguide": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_userguide <file>"
            ],
            "shorthelp": "Package: userguide document",
            "example": [
              "cli: -package_doc_userguide userguide.pdf",
              "api: schema.set('doc', 'userguide', 'userguide.pdf')"
            ],
            "help": "Package list of userguide documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "quickstart": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_quickstart <file>"
            ],
            "shorthelp": "Package: quickstart document",
            "example": [
              "cli: -package_doc_quickstart quickstart.pdf",
              "api: schema.set('doc', 'quickstart', 'quickstart.pdf')"
            ],
            "help": "Package list of quickstart documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "releasenotes": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_releasenotes <file>"
            ],
            "shorthelp": "Package: releasenotes document",
            "example": [
              "cli: -package_doc_releasenotes releasenotes.pdf",
              "api: schema.set('doc', 'releasenotes', 'releasenotes.pdf')"
            ],
            "help": "Package list of releasenotes documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "testplan": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_testplan <file>"
            ],
            "shorthelp": "Package: testplan document",
            "example": [
              "cli: -package_doc_testplan testplan.pdf",
              "api: schema.set('doc', 'testplan', 'testplan.pdf')"
            ],
            "help": "Package list of testplan documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "signoff": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_signoff <file>"
            ],
            "shorthelp": "Package: signoff document",
            "example": [
              "cli: -package_doc_signoff signoff.pdf",
              "api: schema.set('doc', 'signoff', 'signoff.pdf')"
            ],
            "help": "Package list of signoff documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "tutorial": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_tutorial <file>"
            ],
            "shorthelp": "Package: tutorial document",
            "example": [
              "cli: -package_doc_tutorial tutorial.pdf",
              "api: schema.set('doc', 'tutorial', 'tutorial.pdf')"
            ],
            "help": "Package list of tutorial documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          }
        },
        "license": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_license <str>"
          ],
          "shorthelp": "Package: license identifiers",
          "example": [
            "cli: -package_license 'Apache-2.0'",
            "api: schema.set('license', 'Apache-2.0')"
          ],
          "help": "Package list of SPDX license identifiers.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "licensefile": {
          "type": "[file]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_licensefile <file>"
          ],
          "shorthelp": "Package: license files",
          "example": [
            "cli: -package_licensefile './LICENSE'",
            "api: schema.set('licensefile', './LICENSE')"
          ],
          "help": "Package list of license files for to be\napplied in cases when a SPDX identifier is not available.\n(eg. proprietary licenses).",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": [],
                "filehash": [],
                "dataroot": [],
                "date": [],
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "author": {
          "default": {
            "name": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_name 'userid <str>'"
              ],
              "shorthelp": "Package: author name",
              "example": [
                "cli: -package_author_name 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'name', 'wiley@acme.com')"
              ],
              "help": "Package author name provided with full name as key and\nname as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "email": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_email 'userid <str>'"
              ],
              "shorthelp": "Package: author email",
              "example": [
                "cli: -package_author_email 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'email', 'wiley@acme.com')"
              ],
              "help": "Package author email provided with full name as key and\nemail as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "organization": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_organization 'userid <str>'"
              ],
              "shorthelp": "Package: author organization",
              "example": [
                "cli: -package_author_organization 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'organization', 'wiley@acme.com')"
              ],
              "help": "Package author organization provided with full name as key and\norganization as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.packageschema/PackageSchema",
          "sctype": "PackageSchema"
        }
      },
      "pdk": {
        "foundry": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_foundry 'pdkname <str>'"
          ],
          "shorthelp": "PDK: foundry name",
          "example": [
            "cli: -pdk_foundry 'asap7 virtual'",
            "api: pdk.set('pdk', 'asap7', 'foundry', 'virtual')"
          ],
          "help": "Name of foundry corporation. Examples include intel, gf, tsmc,\nsamsung, skywater, virtual. The 'virtual' keyword is reserved for\nsimulated non-manufacturable processes.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "node": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_node 'pdkname <float>'"
          ],
          "shorthelp": "PDK: process node",
          "example": [
            "cli: -pdk_node 'asap7 130'",
            "api: pdk.set('pdk', 'asap7', 'node', 130)"
          ],
          "help": "Approximate relative minimum dimension of the process target specified\nin nanometers. The parameter is required for flows and tools that\nleverage the value to drive technology dependent synthesis and APR\noptimization. Node examples include 180, 130, 90, 65, 45, 32, 22 14,\n10, 7, 5, 3.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "nm"
        },
        "stackup": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_stackup 'pdkname <str>'"
          ],
          "shorthelp": "PDK: metal stackups",
          "example": [
            "cli: -pdk_stackup 'asap7 2MA4MB2MC'",
            "api: pdk.add('pdk', 'asap7', 'stackup', '2MA4MB2MC')"
          ],
          "help": "List of all metal stackups offered in the process node. Older process\nnodes may only offer a single metal stackup, while advanced nodes\noffer a large but finite list of metal stacks with varying combinations\nof metal line pitches and thicknesses. Stackup naming is unique to a\nfoundry, but is generally a long string or code. For example, a 10\nmetal stackup with two 1x wide, four 2x wide, and 4x wide metals,\nmight be identified as 2MA4MB2MC, where MA, MB, and MC denote wiring\nlayers with different properties (thickness, width, space). Each\nstackup will come with its own set of routing technology files and\nparasitic models specified in the pdk_pexmodel and pdk_aprtech\nparameters.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "minlayer": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_minlayer 'pdk stackup <str>'"
          ],
          "shorthelp": "PDK: minimum routing layer",
          "example": [
            "cli: -pdk_minlayer 'asap7 2MA4MB2MC M2'",
            "api: pdk.set('pdk', 'asap7', 'minlayer', '2MA4MB2MC', 'M2')"
          ],
          "help": "Minimum metal layer to be used for automated place and route\nspecified on a per stackup basis.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "maxlayer": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_maxlayer 'pdk stackup <str>'"
          ],
          "shorthelp": "PDK: maximum routing layer",
          "example": [
            "cli: -pdk_maxlayer 'asap7 2MA4MB2MC M8'",
            "api: pdk.set('pdk', 'asap7', 'maxlayer', 'MA4MB2MC', 'M8')"
          ],
          "help": "Maximum metal layer to be used for automated place and route\nspecified on a per stackup basis.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "wafersize": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_wafersize 'pdkname <float>'"
          ],
          "shorthelp": "PDK: wafer size",
          "example": [
            "cli: -pdk_wafersize 'asap7 300'",
            "api: pdk.set('pdk', 'asap7', 'wafersize', 300)"
          ],
          "help": "Wafer diameter used in wafer based manufacturing process.\nThe standard diameter for leading edge manufacturing is 300mm. For\nolder process technologies and specialty fabs, smaller diameters\nsuch as 200, 150, 125, and 100 are common. The value is used to\ncalculate dies per wafer and full factory chip costs.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mm"
        },
        "unitcost": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_unitcost 'pdkname <float>'"
          ],
          "shorthelp": "PDK: unit cost",
          "example": [
            "cli: -pdk_unitcost 'asap7 10000'",
            "api: pdk.set('pdk', 'asap7', 'unitcost', 10000)"
          ],
          "help": "Raw cost per unit shipped by the factory, not accounting for yield\nloss.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "USD"
        },
        "d0": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_d0 'pdkname <float>'"
          ],
          "shorthelp": "PDK: process defect density",
          "example": [
            "cli: -pdk_d0 'asap7 0.1'",
            "api: pdk.set('pdk', 'asap7', 'd0', 0.1)"
          ],
          "help": "Process defect density (d0) expressed as random defects per cm^2. The\nvalue is used to calculate yield losses as a function of area, which in\nturn affects the chip full factory costs. Two yield models are\nsupported: Poisson (default), and Murphy. The Poisson based yield is\ncalculated as dy = exp(-area * d0/100). The Murphy based yield is\ncalculated as dy = ((1-exp(-area * d0/100))/(area * d0/100))^2.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "scribe": {
          "type": "(float,float)",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_scribe 'pdkname <(float,float)>'"
          ],
          "shorthelp": "PDK: horizontal scribe line width",
          "example": [
            "cli: -pdk_scribe 'asap7 (0.1,0.1)'",
            "api: pdk.set('pdk', 'asap7', 'scribe', (0.1, 0.1))"
          ],
          "help": "Width of the horizontal and vertical scribe line used during die separation.\nThe process is generally completed using a mechanical saw, but can be\ndone through combinations of mechanical saws, lasers, wafer thinning,\nand chemical etching in more advanced technologies. The value is used\nto calculate effective dies per wafer and full factory cost.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mm"
        },
        "edgemargin": {
          "type": "float",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-pdk_edgemargin 'pdkname <float>'"
          ],
          "shorthelp": "PDK: wafer edge keep-out margin",
          "example": [
            "cli: -pdk_edgemargin 'asap7 1'",
            "api: pdk.set('pdk', 'asap7', 'edgemargin', 1)"
          ],
          "help": "Keep-out distance/margin from the edge inwards. The edge\nis prone to chipping and need special treatment that preclude\nplacement of designs in this area. The edge value is used to\ncalculate effective units per wafer/panel and full factory cost.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          },
          "unit": "mm"
        },
        "devmodelfileset": {
          "default": {
            "default": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-pdk_devmodel 'pdkname tool simtype stackup <file>'"
              ],
              "shorthelp": "PDK: device models",
              "example": [
                "cli: -pdk_devmodel 'asap7 xyce spice M10 asap7.sp'",
                "api: pdk.set('pdk', 'asap7', 'devmodelfileset', 'xyce', 'spice', 'M10', 'asap7.sp')"
              ],
              "help": "List of filepaths to PDK device models for different simulation\npurposes and for different tools. Examples of device model types\ninclude spice, aging, electromigration, radiation. An example of a\n'spice' tool is xyce. Device models are specified on a per metal stack\nbasis. Process nodes with a single device model across all stacks will\nhave a unique parameter record per metal stack pointing to the same\ndevice model file. Device types and tools are dynamic entries\nthat depend on the tool setup and device technology. Pseudo-standardized\ndevice types include spice, em (electromigration), and aging.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            }
          }
        },
        "pexmodelfileset": {
          "default": {
            "default": {
              "type": "[str]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-pdk_pexmodel 'pdkname tool stackup corner <file>'"
              ],
              "shorthelp": "PDK: parasitic TCAD models",
              "example": [
                "cli: -pdk_pexmodel 'asap7 fastcap M10 max wire.mod'",
                "api: pdk.set('pdk', 'asap7', 'pexmodel', 'fastcap', 'M10', 'max', 'wire.mod')"
              ],
              "help": "List of filepaths to PDK wire TCAD models used during automated\nsynthesis, APR, and signoff verification. Pexmodels are specified on\na per metal stack basis. Corner values depend on the process being\nused, but typically include nomenclature such as min, max, nominal.\nFor exact names, refer to the DRM. Pexmodels are generally not\nstandardized and specified on a per tool basis. An example of pexmodel\ntype is 'fastcap'.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            }
          }
        },
        "layermapfileset": {
          "default": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_layermap 'pdkname tool src dst stackup <file>'"
                ],
                "shorthelp": "PDK: layer map file",
                "example": [
                  "cli: -pdk_layermap 'asap7 klayout db gds M10 asap7.map'",
                  "api: pdk.set('pdk', 'asap7', 'layermap', 'klayout', 'db', 'gds', 'M10', 'asap7.map')"
                ],
                "help": "Files describing input/output mapping for streaming layout data from\none format to another. A foundry PDK will include an official layer\nlist for all user entered and generated layers supported in the GDS\naccepted by the foundry for processing, but there is no standardized\nlayer definition format that can be read and written by all EDA tools.\nTo ensure mask layer matching, key/value type mapping files are needed\nto convert EDA databases to/from GDS and to convert between different\ntypes of EDA databases. Layer maps are specified on a per metal\nstackup basis. The 'src' and 'dst' can be names of SC supported tools\nor file formats (like 'gds').",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          }
        },
        "displayfileset": {
          "default": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-pdk_display 'pdkname tool stackup <file>'"
            ],
            "shorthelp": "PDK: display file",
            "example": [
              "cli: -pdk_display 'asap7 klayout M10 display.lyt'",
              "api: pdk.set('pdk', 'asap7', 'display', 'klayout', 'M10', 'display.cfg')"
            ],
            "help": "Display configuration files describing colors and pattern schemes for\nall layers in the PDK. The display configuration file is entered on a\nstackup and tool basis.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          }
        },
        "aprtechfileset": {
          "default": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-pdk_aprtech 'pdkname tool stackup libarch filetype <file>'"
            ],
            "shorthelp": "PDK: APR technology files",
            "example": [
              "cli: -pdk_aprtech 'asap7 openroad M10 12t lef tech.lef'",
              "api: pdk.set('pdk', 'asap7', 'aprtech', 'openroad', 'M10', '12t', 'lef', 'tech.lef')"
            ],
            "help": "Technology file containing setup information needed to enable DRC clean APR\nfor the specified stackup, libarch, and format. The 'libarch' specifies the\nlibrary architecture (e.g. library height). For example a PDK with support\nfor 9 and 12 track libraries might have 'libarchs' called 9t and 12t.\nThe standard filetype for specifying place and route design rules for a\nprocess node is through a 'lef' format technology file. The\n'filetype' used in the aprtech is used by the tool specific APR TCL scripts\nto set up the technology parameters. Some tools may require additional\nfiles beyond the tech.lef file. Examples of extra file types include\nantenna, tracks, tapcell, viarules, and em.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          }
        },
        "lvs": {
          "runsetfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_lvs_runset 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: LVS runset files",
                "example": [
                  "cli: -pdk_lvs_runset 'asap7 magic M10 basic $PDK/lvs.rs'",
                  "api: pdk.set('lvs', 'runset', 'magic', 'M10', 'basic', '$PDK/lvs.rs')"
                ],
                "help": "Runset files for LVS task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          },
          "waiverfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_lvs_waiver 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: LVS waiver files",
                "example": [
                  "cli: -pdk_lvs_waiver 'asap7 magic M10 basic $PDK/lvs.txt'",
                  "api: pdk.set('lvs', 'waiver', 'magic', 'M10', 'basic', '$PDK/lvs.txt')"
                ],
                "help": "Waiver files for LVS task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          }
        },
        "drc": {
          "runsetfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_drc_runset 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: DRC runset files",
                "example": [
                  "cli: -pdk_drc_runset 'asap7 magic M10 basic $PDK/drc.rs'",
                  "api: pdk.set('drc', 'runset', 'magic', 'M10', 'basic', '$PDK/drc.rs')"
                ],
                "help": "Runset files for DRC task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          },
          "waiverfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_drc_waiver 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: DRC waiver files",
                "example": [
                  "cli: -pdk_drc_waiver 'asap7 magic M10 basic $PDK/drc.txt'",
                  "api: pdk.set('drc', 'waiver', 'magic', 'M10', 'basic', '$PDK/drc.txt')"
                ],
                "help": "Waiver files for DRC task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          }
        },
        "erc": {
          "runsetfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_erc_runset 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: ERC runset files",
                "example": [
                  "cli: -pdk_erc_runset 'asap7 magic M10 basic $PDK/erc.rs'",
                  "api: pdk.set('erc', 'runset', 'magic', 'M10', 'basic', '$PDK/erc.rs')"
                ],
                "help": "Runset files for ERC task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          },
          "waiverfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_erc_waiver 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: ERC waiver files",
                "example": [
                  "cli: -pdk_erc_waiver 'asap7 magic M10 basic $PDK/erc.txt'",
                  "api: pdk.set('erc', 'waiver', 'magic', 'M10', 'basic', '$PDK/erc.txt')"
                ],
                "help": "Waiver files for ERC task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          }
        },
        "fill": {
          "runsetfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_fill_runset 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: FILL runset files",
                "example": [
                  "cli: -pdk_fill_runset 'asap7 magic M10 basic $PDK/fill.rs'",
                  "api: pdk.set('fill', 'runset', 'magic', 'M10', 'basic', '$PDK/fill.rs')"
                ],
                "help": "Runset files for FILL task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          },
          "waiverfileset": {
            "default": {
              "default": {
                "type": "[str]",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [
                  "-pdk_fill_waiver 'pdkname tool stackup name <file>'"
                ],
                "shorthelp": "PDK: FILL waiver files",
                "example": [
                  "cli: -pdk_fill_waiver 'asap7 magic M10 basic $PDK/fill.txt'",
                  "api: pdk.set('fill', 'waiver', 'magic', 'M10', 'basic', '$PDK/fill.txt')"
                ],
                "help": "Waiver files for FILL task.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": [],
                      "signature": []
                    }
                  }
                }
              }
            }
          }
        }
      },
      "__meta__": {
        "name": null,
        "class": "siliconcompiler.pdk/PDK",
        "sctype": "PDK"
      }
    },
    "fpgadevice": {
      "dataroot": {
        "default": {
          "path": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory path",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
            ],
            "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "tag": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory reference tag/version",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
            ],
            "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        }
      },
      "fileset": {
        "default": {
          "file": {
            "default": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Fileset files",
              "example": [
                "api: schema.set('fileset', 'rtl', 'file', 'verilog', 'mytop.v')",
                "api: schema.set('fileset', 'testbench', 'file', 'verilog', 'tb.v')"
              ],
              "help": "List of files grouped as a named set ('fileset'). The exact names of\nfiletypes and filesets must match the names used in tasks\ncalled during flowgraph execution. The files are processed in\nthe order specified by the ordered file list.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            }
          }
        }
      },
      "package": {
        "version": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_version <str>"
          ],
          "shorthelp": "Package: version",
          "example": [
            "cli: -package_version 1.0",
            "api: schema.set('version', '1.0')"
          ],
          "help": "Package version. Can be a branch, tag, commit hash,\nor a semver compatible version.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "vendor": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_vendor <str>"
          ],
          "shorthelp": "Package: vendor",
          "example": [
            "cli: -package_vendor acme",
            "api: schema.set('vendor', 'acme')"
          ],
          "help": "Package vendor.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "description": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_description <str>"
          ],
          "shorthelp": "Package: description",
          "example": [
            "cli: -package_description 'Yet another cpu'",
            "api: schema.set('description', 'Yet another cpu')"
          ],
          "help": "Package short one line description for package\nmanagers and summary reports.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "doc": {
          "datasheet": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_datasheet <file>"
            ],
            "shorthelp": "Package: datasheet document",
            "example": [
              "cli: -package_doc_datasheet datasheet.pdf",
              "api: schema.set('doc', 'datasheet', 'datasheet.pdf')"
            ],
            "help": "Package list of datasheet documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "reference": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_reference <file>"
            ],
            "shorthelp": "Package: reference document",
            "example": [
              "cli: -package_doc_reference reference.pdf",
              "api: schema.set('doc', 'reference', 'reference.pdf')"
            ],
            "help": "Package list of reference documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "userguide": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_userguide <file>"
            ],
            "shorthelp": "Package: userguide document",
            "example": [
              "cli: -package_doc_userguide userguide.pdf",
              "api: schema.set('doc', 'userguide', 'userguide.pdf')"
            ],
            "help": "Package list of userguide documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "quickstart": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_quickstart <file>"
            ],
            "shorthelp": "Package: quickstart document",
            "example": [
              "cli: -package_doc_quickstart quickstart.pdf",
              "api: schema.set('doc', 'quickstart', 'quickstart.pdf')"
            ],
            "help": "Package list of quickstart documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "releasenotes": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_releasenotes <file>"
            ],
            "shorthelp": "Package: releasenotes document",
            "example": [
              "cli: -package_doc_releasenotes releasenotes.pdf",
              "api: schema.set('doc', 'releasenotes', 'releasenotes.pdf')"
            ],
            "help": "Package list of releasenotes documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "testplan": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_testplan <file>"
            ],
            "shorthelp": "Package: testplan document",
            "example": [
              "cli: -package_doc_testplan testplan.pdf",
              "api: schema.set('doc', 'testplan', 'testplan.pdf')"
            ],
            "help": "Package list of testplan documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "signoff": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_signoff <file>"
            ],
            "shorthelp": "Package: signoff document",
            "example": [
              "cli: -package_doc_signoff signoff.pdf",
              "api: schema.set('doc', 'signoff', 'signoff.pdf')"
            ],
            "help": "Package list of signoff documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "tutorial": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_tutorial <file>"
            ],
            "shorthelp": "Package: tutorial document",
            "example": [
              "cli: -package_doc_tutorial tutorial.pdf",
              "api: schema.set('doc', 'tutorial', 'tutorial.pdf')"
            ],
            "help": "Package list of tutorial documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          }
        },
        "license": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_license <str>"
          ],
          "shorthelp": "Package: license identifiers",
          "example": [
            "cli: -package_license 'Apache-2.0'",
            "api: schema.set('license', 'Apache-2.0')"
          ],
          "help": "Package list of SPDX license identifiers.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "licensefile": {
          "type": "[file]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_licensefile <file>"
          ],
          "shorthelp": "Package: license files",
          "example": [
            "cli: -package_licensefile './LICENSE'",
            "api: schema.set('licensefile', './LICENSE')"
          ],
          "help": "Package list of license files for to be\napplied in cases when a SPDX identifier is not available.\n(eg. proprietary licenses).",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": [],
                "filehash": [],
                "dataroot": [],
                "date": [],
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "author": {
          "default": {
            "name": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_name 'userid <str>'"
              ],
              "shorthelp": "Package: author name",
              "example": [
                "cli: -package_author_name 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'name', 'wiley@acme.com')"
              ],
              "help": "Package author name provided with full name as key and\nname as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "email": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_email 'userid <str>'"
              ],
              "shorthelp": "Package: author email",
              "example": [
                "cli: -package_author_email 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'email', 'wiley@acme.com')"
              ],
              "help": "Package author email provided with full name as key and\nemail as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "organization": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_organization 'userid <str>'"
              ],
              "shorthelp": "Package: author organization",
              "example": [
                "cli: -package_author_organization 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'organization', 'wiley@acme.com')"
              ],
              "help": "Package author organization provided with full name as key and\norganization as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.packageschema/PackageSchema",
          "sctype": "PackageSchema"
        }
      },
      "fpga": {
        "partname": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-fpga_partname <str>"
          ],
          "shorthelp": "FPGA: part name",
          "example": [
            "cli: -fpga_partname fpga64k",
            "api: fpga.set('fpga', 'partname', 'fpga64k')"
          ],
          "help": "Complete part name used as a device target by the FPGA compilation\ntool. The part name must be an exact string match to the partname\nhard coded within the FPGA EDA tool.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "lutsize": {
          "type": "int",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-fpga_lutsize 'partname <int>'"
          ],
          "shorthelp": "FPGA: lutsize",
          "example": [
            "cli: -fpga_lutsize 'fpga64k 4'",
            "api: fpga.set('fpga', 'fpga64k', 'lutsize', '4')"
          ],
          "help": "Specify the number of inputs in each lookup table (LUT) for the\nFPGA partname.  For architectures with fracturable LUTs, this is\nthe number of inputs of the unfractured LUT.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        }
      },
      "__meta__": {
        "name": null,
        "class": "siliconcompiler.fpga/FPGADevice",
        "sctype": "FPGADevice"
      }
    },
    "stdcelllibrary": {
      "dataroot": {
        "default": {
          "path": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory path",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'path', 'ssh://git@github.com/siliconcompiler/freepdk45/')"
            ],
            "help": "Data directory path, this points the location where the data can be\nretrieved or accessed.\nAllowed roots:\n\n* /path/on/network/drive\n* file:///path/on/network/drive\n* git+https://github.com/xyz/xyz\n* git://github.com/xyz/xyz\n* git+ssh://github.com/xyz/xyz\n* ssh://github.com/xyz/xyz\n* https://github.com/xyz/xyz/archive\n* https://zeroasic.com/xyz.tar.gz\n* github://siliconcompiler/lambdapdk/v1.0/asap7.tar.gz\n* python://siliconcompiler",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          },
          "tag": {
            "type": "str",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "Data directory reference tag/version",
            "example": [
              "api: project.set('dataroot', 'freepdk45_data', 'tag', '07ec4aa')"
            ],
            "help": "Data directory reference tag. The meaning of the this tag depends on the\ncontext of the path.\nFor git, this can be a tag, branch, or commit id. For https this is the version\nof the file that will be downloaded.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": null,
                  "signature": null
                }
              }
            }
          }
        }
      },
      "fileset": {
        "default": {
          "file": {
            "default": {
              "type": "[file]",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Fileset files",
              "example": [
                "api: schema.set('fileset', 'rtl', 'file', 'verilog', 'mytop.v')",
                "api: schema.set('fileset', 'testbench', 'file', 'verilog', 'tb.v')"
              ],
              "help": "List of files grouped as a named set ('fileset'). The exact names of\nfiletypes and filesets must match the names used in tasks\ncalled during flowgraph execution. The files are processed in\nthe order specified by the ordered file list.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": [],
                    "filehash": [],
                    "dataroot": [],
                    "date": [],
                    "author": []
                  }
                }
              },
              "hashalgo": "sha256",
              "copy": false
            }
          }
        }
      },
      "package": {
        "version": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_version <str>"
          ],
          "shorthelp": "Package: version",
          "example": [
            "cli: -package_version 1.0",
            "api: schema.set('version', '1.0')"
          ],
          "help": "Package version. Can be a branch, tag, commit hash,\nor a semver compatible version.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "vendor": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_vendor <str>"
          ],
          "shorthelp": "Package: vendor",
          "example": [
            "cli: -package_vendor acme",
            "api: schema.set('vendor', 'acme')"
          ],
          "help": "Package vendor.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "description": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_description <str>"
          ],
          "shorthelp": "Package: description",
          "example": [
            "cli: -package_description 'Yet another cpu'",
            "api: schema.set('description', 'Yet another cpu')"
          ],
          "help": "Package short one line description for package\nmanagers and summary reports.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "doc": {
          "datasheet": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_datasheet <file>"
            ],
            "shorthelp": "Package: datasheet document",
            "example": [
              "cli: -package_doc_datasheet datasheet.pdf",
              "api: schema.set('doc', 'datasheet', 'datasheet.pdf')"
            ],
            "help": "Package list of datasheet documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "reference": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_reference <file>"
            ],
            "shorthelp": "Package: reference document",
            "example": [
              "cli: -package_doc_reference reference.pdf",
              "api: schema.set('doc', 'reference', 'reference.pdf')"
            ],
            "help": "Package list of reference documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "userguide": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_userguide <file>"
            ],
            "shorthelp": "Package: userguide document",
            "example": [
              "cli: -package_doc_userguide userguide.pdf",
              "api: schema.set('doc', 'userguide', 'userguide.pdf')"
            ],
            "help": "Package list of userguide documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "quickstart": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_quickstart <file>"
            ],
            "shorthelp": "Package: quickstart document",
            "example": [
              "cli: -package_doc_quickstart quickstart.pdf",
              "api: schema.set('doc', 'quickstart', 'quickstart.pdf')"
            ],
            "help": "Package list of quickstart documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "releasenotes": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_releasenotes <file>"
            ],
            "shorthelp": "Package: releasenotes document",
            "example": [
              "cli: -package_doc_releasenotes releasenotes.pdf",
              "api: schema.set('doc', 'releasenotes', 'releasenotes.pdf')"
            ],
            "help": "Package list of releasenotes documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "testplan": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_testplan <file>"
            ],
            "shorthelp": "Package: testplan document",
            "example": [
              "cli: -package_doc_testplan testplan.pdf",
              "api: schema.set('doc', 'testplan', 'testplan.pdf')"
            ],
            "help": "Package list of testplan documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "signoff": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_signoff <file>"
            ],
            "shorthelp": "Package: signoff document",
            "example": [
              "cli: -package_doc_signoff signoff.pdf",
              "api: schema.set('doc', 'signoff', 'signoff.pdf')"
            ],
            "help": "Package list of signoff documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          },
          "tutorial": {
            "type": "[file]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [
              "-package_doc_tutorial <file>"
            ],
            "shorthelp": "Package: tutorial document",
            "example": [
              "cli: -package_doc_tutorial tutorial.pdf",
              "api: schema.set('doc', 'tutorial', 'tutorial.pdf')"
            ],
            "help": "Package list of tutorial documents.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": [],
                  "filehash": [],
                  "dataroot": [],
                  "date": [],
                  "author": []
                }
              }
            },
            "hashalgo": "sha256",
            "copy": false
          }
        },
        "license": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_license <str>"
          ],
          "shorthelp": "Package: license identifiers",
          "example": [
            "cli: -package_license 'Apache-2.0'",
            "api: schema.set('license', 'Apache-2.0')"
          ],
          "help": "Package list of SPDX license identifiers.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "licensefile": {
          "type": "[file]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [
            "-package_licensefile <file>"
          ],
          "shorthelp": "Package: license files",
          "example": [
            "cli: -package_licensefile './LICENSE'",
            "api: schema.set('licensefile', './LICENSE')"
          ],
          "help": "Package list of license files for to be\napplied in cases when a SPDX identifier is not available.\n(eg. proprietary licenses).",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": [],
                "filehash": [],
                "dataroot": [],
                "date": [],
                "author": []
              }
            }
          },
          "hashalgo": "sha256",
          "copy": false
        },
        "author": {
          "default": {
            "name": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_name 'userid <str>'"
              ],
              "shorthelp": "Package: author name",
              "example": [
                "cli: -package_author_name 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'name', 'wiley@acme.com')"
              ],
              "help": "Package author name provided with full name as key and\nname as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "email": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_email 'userid <str>'"
              ],
              "shorthelp": "Package: author email",
              "example": [
                "cli: -package_author_email 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'email', 'wiley@acme.com')"
              ],
              "help": "Package author email provided with full name as key and\nemail as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "organization": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [
                "-package_author_organization 'userid <str>'"
              ],
              "shorthelp": "Package: author organization",
              "example": [
                "cli: -package_author_organization 'wiley wiley@acme.com'",
                "api: schema.set('author', 'wiley', 'organization', 'wiley@acme.com')"
              ],
              "help": "Package author organization provided with full name as key and\norganization as value.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            }
          }
        },
        "__meta__": {
          "class": "siliconcompiler.schema_support.packageschema/PackageSchema",
          "sctype": "PackageSchema"
        }
      },
      "deps": {
        "type": "[str]",
        "require": false,
        "scope": "global",
        "lock": true,
        "switch": [],
        "shorthelp": "List of object dependencies",
        "example": [],
        "help": "List of named object dependencies included via add_dep().",
        "notes": null,
        "pernode": "never",
        "node": {
          "default": {
            "default": {
              "value": [],
              "signature": []
            }
          }
        }
      },
      "asic": {
        "pdk": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: ",
          "example": [
            "api: schema.set('asic', 'libcornerfileset', 'slow', 'nldm', 'timing.slow')"
          ],
          "help": "",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "stackup": {
          "type": "{str}",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: ",
          "example": [
            "api: schema.set('asic', 'libcornerfileset', 'slow', 'nldm', 'timing.slow')"
          ],
          "help": "Set of supported stackups",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "libcornerfileset": {
          "default": {
            "default": {
              "type": "{str}",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "ASIC: map of filesets to timing corners",
              "example": [
                "api: schema.set('asic', 'libcornerfileset', 'slow', 'nldm', 'timing.slow')"
              ],
              "help": "Map between filesets and timing corners.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": [],
                    "signature": []
                  }
                }
              }
            }
          }
        },
        "pexcornerfileset": {
          "default": {
            "type": "{str}",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: map of filesets to pex corners",
            "example": [
              "api: schema.set('asic', 'pexcornerfileset', 'slow', 'timing.slow')"
            ],
            "help": "Map between filesets and pex corners.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          }
        },
        "aprfileset": {
          "type": "{str}",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: map of filesets to APR files",
          "example": [
            "api: schema.set('asic', 'aprfileset', 'model.lef')"
          ],
          "help": "Map between filesets and automated place and route tool files.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        },
        "cells": {
          "decap": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: decap cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'decap', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "tie": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: tie cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'tie', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "hold": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: hold cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'hold', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "clkbuf": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: clkbuf cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'clkbuf', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "clkgate": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: clkgate cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'clkgate', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "clklogic": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: clklogic cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'clklogic', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "dontuse": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: dontuse cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'dontuse', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "filler": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: filler cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'filler', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "tap": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: tap cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'tap', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "endcap": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: endcap cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'endcap', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          },
          "antenna": {
            "type": "[str]",
            "require": false,
            "scope": "global",
            "lock": false,
            "switch": [],
            "shorthelp": "ASIC: antenna cell list",
            "example": [
              "api: schema.set('asic', 'cells', 'antenna', '*eco*')"
            ],
            "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
            "notes": null,
            "pernode": "never",
            "node": {
              "default": {
                "default": {
                  "value": [],
                  "signature": []
                }
              }
            }
          }
        },
        "site": {
          "type": "[str]",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "ASIC: library sites",
          "example": [
            "api: schema.set('asic', 'site', 'Site_12T')"
          ],
          "help": "Site names for a given library architecture.",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": [],
                "signature": []
              }
            }
          }
        }
      },
      "__meta__": {
        "name": null,
        "class": "siliconcompiler.library/StdCellLibrary",
        "sctype": "StdCellLibrary"
      }
    },
    "schematic": {
      "schematic": {
        "hierchar": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Schematic hierarchy character",
          "example": [
            "api: schematic.set('schematic', 'hierchar', '/')"
          ],
          "help": "Specifies the character used to express hierarchy. If\nthe hierarchy character is used as part of a name, it must be\nescaped with a backslash('').",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "buschar": {
          "type": "str",
          "require": false,
          "scope": "global",
          "lock": false,
          "switch": [],
          "shorthelp": "Schematic bus character",
          "example": [
            "api: schematic.set('schematic', 'buschar', '[]')"
          ],
          "help": "Specifies the character used to express bus bits. If the\nbus character is used as part of a name, it must be\nescaped with a backslash('').",
          "notes": null,
          "pernode": "never",
          "node": {
            "default": {
              "default": {
                "value": null,
                "signature": null
              }
            }
          }
        },
        "pin": {
          "default": {
            "direction": {
              "type": "<inout,input,output>",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Pin direction",
              "example": [
                "api: schematic.set('schematic','pin', 'A', 'direction', 'input')"
              ],
              "help": "Direction of pin specified on a per pin basis.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "bitrange": {
              "type": "(int,int)",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Pin bitrange",
              "example": [
                "api: schematic.set('schematic','pin', 'A', 'bitrange', (7,0)"
              ],
              "help": "Pin vector size, specified as a (max,min) tuple. A range of (0,0)\nindicates a scalar single bit pin.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            }
          }
        },
        "net": {
          "default": {
            "bitrange": {
              "type": "(int,int)",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Net bit range",
              "example": [
                "api: schematic.set('schematic', 'net', 'net0', 'bitrange', (7,0)"
              ],
              "help": "Net vector bit range specified as (max,min) tuple.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            }
          }
        },
        "part": {
          "default": {
            "pin": {
              "default": {
                "bitrange": {
                  "type": "(int,int)",
                  "require": false,
                  "scope": "global",
                  "lock": false,
                  "switch": [],
                  "shorthelp": "Library part pin bitrange",
                  "example": [
                    "api: schematic.set('schematic', 'part', 'INV', 'pin', 'A', 'bitrange', (7,0)"
                  ],
                  "help": "Part pin vector size, specified as a (max,min) tuple. A range of (0,0)\nindicates a scalar single bit pin.",
                  "notes": null,
                  "pernode": "never",
                  "node": {
                    "default": {
                      "default": {
                        "value": null,
                        "signature": null
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "component": {
          "default": {
            "partname": {
              "type": "str",
              "require": false,
              "scope": "global",
              "lock": false,
              "switch": [],
              "shorthelp": "Component part name",
              "example": [
                "api: schematic.set('schematic','component','i0','partname','INV')"
              ],
              "help": "Partname (cellname) of a component (instance) specified on a\nper instance basis.",
              "notes": null,
              "pernode": "never",
              "node": {
                "default": {
                  "default": {
                    "value": null,
                    "signature": null
                  }
                }
              }
            },
            "connection": {
              "default": {
                "type": "str",
                "require": false,
                "scope": "global",
                "lock": false,
                "switch": [],
                "shorthelp": "Component pin connections",
                "example": [
                  "api: schematic.set('schematic','component','i0','connection', 'A[0]', 'in[0]')",
                  "api: schematic.set('schematic','component','i0','connection', 'CLK', 'clk_in')"
                ],
                "help": "Net connections specified on a per instance and per instance-pin basis.\nPin and net names must include the appropriate bit index in cases of pin or\nnet vectors. Bit index optional for scalar nets and pins.",
                "notes": null,
                "pernode": "never",
                "node": {
                  "default": {
                    "default": {
                      "value": null,
                      "signature": null
                    }
                  }
                }
              }
            }
          }
        }
      },
      "__meta__": {
        "class": "siliconcompiler.schematic/Schematic",
        "sctype": "Schematic"
      }
    }
  },
  "__meta__": {
    "class": "__main__/CompositeProject",
    "sctype": "BaseSchema"
  }
}