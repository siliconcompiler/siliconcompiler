{
    "arg": {
        "index": {
            "example": [
                "cli: -arg_index 0",
                "api: chip.set('arg', 'index', '0')"
            ],
            "help": "Dynamic parameter passed in by the SC runtime as an argument to\na runtime task. The parameter enables configuration code\n(usually TCL) to use control flow that depend on the current\n'index'. The parameter is used the run() function and\nis not intended for external use.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "scratch",
            "shorthelp": "ARG: Index argument",
            "switch": [
                "-arg_index <str>"
            ],
            "type": "str"
        },
        "step": {
            "example": [
                "cli: -arg_step 'route'",
                "api: chip.set('arg', 'step', 'route')"
            ],
            "help": "Dynamic parameter passed in by the SC runtime as an argument to\na runtime task. The parameter enables configuration code\n(usually TCL) to use control flow that depend on the current\n'step'. The parameter is used the run() function and\nis not intended for external use.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "scratch",
            "shorthelp": "ARG: Step argument",
            "switch": [
                "-arg_step <str>"
            ],
            "type": "str"
        }
    },
    "asic": {
        "cells": {
            "antenna": {
                "example": [
                    "cli: -asic_cells_antenna '*eco*'",
                    "api: chip.set('asic', 'cells', 'antenna', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: antenna cell list",
                "switch": [
                    "-asic_cells_antenna '<str>'"
                ],
                "type": "[str]"
            },
            "clkbuf": {
                "example": [
                    "cli: -asic_cells_clkbuf '*eco*'",
                    "api: chip.set('asic', 'cells', 'clkbuf', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: clkbuf cell list",
                "switch": [
                    "-asic_cells_clkbuf '<str>'"
                ],
                "type": "[str]"
            },
            "clkdelay": {
                "example": [
                    "cli: -asic_cells_clkdelay '*eco*'",
                    "api: chip.set('asic', 'cells', 'clkdelay', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: clkdelay cell list",
                "switch": [
                    "-asic_cells_clkdelay '<str>'"
                ],
                "type": "[str]"
            },
            "clkgate": {
                "example": [
                    "cli: -asic_cells_clkgate '*eco*'",
                    "api: chip.set('asic', 'cells', 'clkgate', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: clkgate cell list",
                "switch": [
                    "-asic_cells_clkgate '<str>'"
                ],
                "type": "[str]"
            },
            "clkicg": {
                "example": [
                    "cli: -asic_cells_clkicg '*eco*'",
                    "api: chip.set('asic', 'cells', 'clkicg', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: clkicg cell list",
                "switch": [
                    "-asic_cells_clkicg '<str>'"
                ],
                "type": "[str]"
            },
            "clkinv": {
                "example": [
                    "cli: -asic_cells_clkinv '*eco*'",
                    "api: chip.set('asic', 'cells', 'clkinv', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: clkinv cell list",
                "switch": [
                    "-asic_cells_clkinv '<str>'"
                ],
                "type": "[str]"
            },
            "clklogic": {
                "example": [
                    "cli: -asic_cells_clklogic '*eco*'",
                    "api: chip.set('asic', 'cells', 'clklogic', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: clklogic cell list",
                "switch": [
                    "-asic_cells_clklogic '<str>'"
                ],
                "type": "[str]"
            },
            "decap": {
                "example": [
                    "cli: -asic_cells_decap '*eco*'",
                    "api: chip.set('asic', 'cells', 'decap', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: decap cell list",
                "switch": [
                    "-asic_cells_decap '<str>'"
                ],
                "type": "[str]"
            },
            "delay": {
                "example": [
                    "cli: -asic_cells_delay '*eco*'",
                    "api: chip.set('asic', 'cells', 'delay', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: delay cell list",
                "switch": [
                    "-asic_cells_delay '<str>'"
                ],
                "type": "[str]"
            },
            "dontuse": {
                "example": [
                    "cli: -asic_cells_dontuse '*eco*'",
                    "api: chip.set('asic', 'cells', 'dontuse', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: dontuse cell list",
                "switch": [
                    "-asic_cells_dontuse '<str>'"
                ],
                "type": "[str]"
            },
            "endcap": {
                "example": [
                    "cli: -asic_cells_endcap '*eco*'",
                    "api: chip.set('asic', 'cells', 'endcap', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: endcap cell list",
                "switch": [
                    "-asic_cells_endcap '<str>'"
                ],
                "type": "[str]"
            },
            "filler": {
                "example": [
                    "cli: -asic_cells_filler '*eco*'",
                    "api: chip.set('asic', 'cells', 'filler', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: filler cell list",
                "switch": [
                    "-asic_cells_filler '<str>'"
                ],
                "type": "[str]"
            },
            "hold": {
                "example": [
                    "cli: -asic_cells_hold '*eco*'",
                    "api: chip.set('asic', 'cells', 'hold', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: hold cell list",
                "switch": [
                    "-asic_cells_hold '<str>'"
                ],
                "type": "[str]"
            },
            "tap": {
                "example": [
                    "cli: -asic_cells_tap '*eco*'",
                    "api: chip.set('asic', 'cells', 'tap', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: tap cell list",
                "switch": [
                    "-asic_cells_tap '<str>'"
                ],
                "type": "[str]"
            },
            "tie": {
                "example": [
                    "cli: -asic_cells_tie '*eco*'",
                    "api: chip.set('asic', 'cells', 'tie', '*eco*')"
                ],
                "help": "List of cells grouped by a property that can be accessed\ndirectly by the designer and tools. The example below shows how\nall cells containing the string 'eco' could be marked as dont use\nfor the tool.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: tie cell list",
                "switch": [
                    "-asic_cells_tie '<str>'"
                ],
                "type": "[str]"
            }
        },
        "delaymodel": {
            "example": [
                "cli: -asic_delaymodel ccs",
                "api: chip.set('asic', 'delaymodel', 'ccs')"
            ],
            "help": "Delay model to use for the target libs. Supported values\nare nldm and ccs.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC: delay model",
            "switch": [
                "-asic_delaymodel <str>"
            ],
            "type": "str"
        },
        "libarch": {
            "example": [
                "cli: -asic_libarch '12track'",
                "api: chip.set('asic', 'libarch', '12track')"
            ],
            "help": "The library architecture (e.g. library height) used to build the\ndesign. For example a PDK with support for 9 and 12 track libraries\nmight have 'libarchs' called 9t and 12t.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC: library architecture",
            "switch": [
                "-asic_libarch '<str>'"
            ],
            "type": "str"
        },
        "logiclib": {
            "example": [
                "cli: -asic_logiclib nangate45",
                "api: chip.set('asic', 'logiclib', 'nangate45')"
            ],
            "help": "List of all selected logic libraries libraries\nto use for optimization for a given library architecture\n(9T, 11T, etc).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC: logic libraries",
            "switch": [
                "-asic_logiclib <str>"
            ],
            "type": "[str]"
        },
        "macrolib": {
            "example": [
                "cli: -asic_macrolib sram64x1024",
                "api: chip.set('asic', 'macrolib', 'sram64x1024')"
            ],
            "help": "List of macro libraries to be linked in during synthesis and place\nand route. Macro libraries are used for resolving instances but are\nnot used as targets for logic synthesis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "ASIC: macro libraries",
            "switch": [
                "-asic_macrolib <str>"
            ],
            "type": "[str]"
        },
        "site": {
            "default": {
                "example": [
                    "cli: -asic_site '12track Site_12T'",
                    "api: chip.set('asic', 'site', '12track', 'Site_12T')"
                ],
                "help": "Site names for a given library architecture.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "ASIC: Library sites",
                "switch": [
                    "-asic_site 'libarch <str>'"
                ],
                "type": "[str]"
            }
        }
    },
    "checklist": {
        "default": {
            "default": {
                "criteria": {
                    "example": [
                        "cli: -checklist_criteria 'ISO D000 errors==0'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'criteria', 'errors==0')"
                    ],
                    "help": "Simple list of signoff criteria for checklist item which\nmust all be met for signoff. Each signoff criteria consists of\na metric, a relational operator, and a value in the form.\n'metric op value'.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist: item criteria",
                    "switch": [
                        "-checklist_criteria 'standard item <float>'"
                    ],
                    "type": "[str]"
                },
                "dataformat": {
                    "example": [
                        "cli: -checklist_dataformat 'ISO D000 dataformat README'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'dataformat', 'README')"
                    ],
                    "help": "Free text description of the type of data files acceptable as\nchecklist signoff validation.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist: item data format",
                    "switch": [
                        "-checklist_dataformat 'standard item <float>'"
                    ],
                    "type": "str"
                },
                "description": {
                    "example": [
                        "cli: -checklist_description 'ISO D000 A-DESCRIPTION'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'description', 'A-DESCRIPTION')"
                    ],
                    "help": "A short one line description of the checklist item.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist: item description",
                    "switch": [
                        "-checklist_description 'standard item <str>"
                    ],
                    "type": "str"
                },
                "ok": {
                    "example": [
                        "cli: -checklist_ok 'ISO D000 true'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'ok', True)"
                    ],
                    "help": "Boolean check mark for the checklist item. A value of\nTrue indicates a human has inspected the all item dictionary\nparameters check out.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": false
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": "all",
                    "scope": "global",
                    "shorthelp": "Checklist: item ok",
                    "switch": [
                        "-checklist_ok 'standard item <str>'"
                    ],
                    "type": "bool"
                },
                "rationale": {
                    "example": [
                        "cli: -checklist_rationale 'ISO D000 reliability'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'rationale', 'reliability')"
                    ],
                    "help": "Rationale for the the checklist item. Rationale should be a\nunique alphanumeric code used by the standard or a short one line\nor single word description.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist: item rational",
                    "switch": [
                        "-checklist_rationale 'standard item <str>"
                    ],
                    "type": "[str]"
                },
                "report": {
                    "copy": false,
                    "example": [
                        "cli: -checklist_report 'ISO D000 my.rpt'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'report', 'my.rpt')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to report(s) of specified type documenting the successful\nvalidation of the checklist item.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist: item report",
                    "switch": [
                        "-checklist_report 'standard item <file>'"
                    ],
                    "type": "[file]"
                },
                "requirement": {
                    "example": [
                        "cli: -checklist_requirement 'ISO D000 DOCSTRING'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'requirement', 'DOCSTRING')"
                    ],
                    "help": "A complete requirement description of the checklist item\nentered as a multi-line string.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist: item requirement",
                    "switch": [
                        "-checklist_requirement 'standard item <str>"
                    ],
                    "type": "str"
                },
                "task": {
                    "example": [
                        "cli: -checklist_task 'ISO D000 (job0,place,0)'",
                        "api: chip.set('checklist', 'ISO', 'D000', 'task', ('job0', 'place', '0'))"
                    ],
                    "help": "Flowgraph job and task used to verify the checklist item.\nThe parameter should be left empty for manual and for tool\nflows that bypass the SC infrastructure.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Checklist: item task",
                    "switch": [
                        "-checklist_task 'standard item <(str,str,str)>'"
                    ],
                    "type": "[(str,str,str)]"
                },
                "waiver": {
                    "default": {
                        "copy": false,
                        "example": [
                            "cli: -checklist_waiver 'ISO D000 bold my.txt'",
                            "api: chip.set('checklist', 'ISO', 'D000', 'waiver', 'hold', 'my.txt')"
                        ],
                        "hashalgo": "sha256",
                        "help": "Filepath to report(s) documenting waivers for the checklist\nitem specified on a per metric basis.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "author": [],
                                    "date": [],
                                    "filehash": [],
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "Checklist: item metric waivers",
                        "switch": [
                            "-checklist_waiver 'standard item metric <file>'"
                        ],
                        "type": "[file]"
                    }
                }
            }
        }
    },
    "constraint": {
        "aspectratio": {
            "example": [
                "cli: -constraint_aspectratio 2.0",
                "api: chip.set('constraint', 'aspectratio', '2.0')"
            ],
            "help": "Height to width ratio of the block for automated floorplanning.\nValues below 0.1 and above 10 should be avoided as they will likely fail\nto converge during placement and routing. The ideal aspect ratio for\nmost designs is 1. This value is only used when no diearea or floorplan\nis supplied.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "1.0"
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "Constraint: Layout aspect ratio",
            "switch": [
                "-constraint_aspectratio <float>"
            ],
            "type": "float"
        },
        "component": {
            "default": {
                "flip": {
                    "example": [
                        "cli: -constraint_component_flip 'i0 true'",
                        "api: chip.set('constraint', 'component', 'i0', 'flip', True)"
                    ],
                    "help": "Boolean parameter specifying that the instanced library component should be flipped\naround the vertical axis before being placed on the substrate. The need to\nflip a component depends on the component footprint. Most dies have pads\nfacing up and so must be flipped when assembled face down (eg. flip-chip,\nWCSP).",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": false
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": "all",
                    "scope": "job",
                    "shorthelp": "Constraint: Component flip option",
                    "switch": [
                        "-constraint_component_flip 'inst <bool>'"
                    ],
                    "type": "bool"
                },
                "halo": {
                    "example": [
                        "cli: -constraint_component_halo 'i0 (1,1)'",
                        "api: chip.set('constraint', 'component', 'i0', 'halo', (1, 1))"
                    ],
                    "help": "Placement keepout halo around the named component, specified as a\n(horizontal, vertical) tuple represented in microns or lambda units.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Component halo",
                    "switch": [
                        "-constraint_component_halo 'inst <(float,float)>'"
                    ],
                    "type": "(float,float)",
                    "unit": "um"
                },
                "partname": {
                    "example": [
                        "cli: -constraint_component_partname 'i0 filler_x1'",
                        "api: chip.set('constraint', 'component', 'i0', 'partname', 'filler_x1')"
                    ],
                    "help": "Part name of a named instance. The parameter is required for instances\nthat are not contained within the design netlist (ie. physical only cells).",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Component part name",
                    "switch": [
                        "-constraint_component_partname 'inst <str>'"
                    ],
                    "type": "str"
                },
                "placement": {
                    "example": [
                        "cli: -constraint_component_placement 'i0 (2.0,3.0,0.0)'",
                        "api: chip.set('constraint', 'component', 'i0', 'placement', (2.0, 3.0, 0.0))"
                    ],
                    "help": "Placement location of a named instance, specified as a (x, y, z) tuple of\nfloats. The location refers to the placement of the center/centroid of the\ncomponent. The 'placement' parameter is a goal/intent, not an exact specification.\nThe compiler and layout system may adjust coordinates to meet competing\ngoals such as manufacturing design rules and grid placement\nguidelines. The 'z' coordinate shall be set to 0 for planar systems\nwith only (x, y) coordinates. Discretized systems like PCB stacks,\npackage stacks, and breadboards only allow a reduced\nset of floating point values (0, 1, 2, 3). The user specifying the\nplacement will need to have some understanding of the type of\nlayout system the component is being placed in (ASIC, SIP, PCB) but\nshould not need to know exact manufacturing specifications.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Component placement",
                    "switch": [
                        "-constraint_component_placement 'inst <(float,float,float)>'"
                    ],
                    "type": "(float,float,float)",
                    "unit": "um"
                },
                "rotation": {
                    "example": [
                        "cli: -constraint_component_rotation 'i0 90'",
                        "api: chip.set('constraint', 'component', 'i0', 'rotation', '90')"
                    ],
                    "help": "Placement rotation of the component specified in degrees. Rotation\ngoes counter-clockwise for all parts on top and clock-wise for parts\non the bottom. In both cases, this is from the perspective of looking\nat the top of the board. Rotation is specified in degrees. Most gridded\nlayout systems (like ASICs) only allow a finite number of rotation\nvalues (0, 90, 180, 270).",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Component rotation",
                    "switch": [
                        "-constraint_component_rotation 'inst <float>'"
                    ],
                    "type": "float"
                }
            }
        },
        "corearea": {
            "example": [
                "cli: -constraint_corearea '(0,0)'",
                "api: chip.set('constraint', 'corearea', (0, 0))"
            ],
            "help": "List of (x, y) points that define the outline of the core area for the\nphysical design. Simple rectangle areas can be defined with two points,\none for the lower left corner and one for the upper right corner. All\nvalues are specified in microns or lambda units.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "Constraint: Layout core area",
            "switch": [
                "-constraint_corearea <[(float,float)]>"
            ],
            "type": "[(float,float)]",
            "unit": "um"
        },
        "coremargin": {
            "example": [
                "cli: -constraint_coremargin 1",
                "api: chip.set('constraint', 'coremargin', '1')"
            ],
            "help": "Halo/margin between the outline and core area for fully\nautomated layout sizing and floorplanning, specified in\nmicrons or lambda units.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "Constraint: Layout core margin",
            "switch": [
                "-constraint_coremargin <float>"
            ],
            "type": "float",
            "unit": "um"
        },
        "density": {
            "example": [
                "cli: -constraint_density 30",
                "api: chip.set('constraint', 'density', '30')"
            ],
            "help": "Target density based on the total design cells area reported\nafter synthesis/elaboration. This number is used when no outline\nor floorplan is supplied. Any number between 1 and 100 is legal,\nbut values above 50 may fail due to area/congestion issues during\nautomated place and route.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "Constraint: Layout density",
            "switch": [
                "-constraint_density <float>"
            ],
            "type": "float"
        },
        "net": {
            "default": {
                "diffpair": {
                    "example": [
                        "cli: -constraint_net_diffpair 'clkn clkp'",
                        "api: chip.set('constraint', 'net', 'clkn', 'diffpair', 'clkp')"
                    ],
                    "help": "Differential pair signal of the named net (only used for actual\ndifferential pairs).",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net diffpair",
                    "switch": [
                        "-constraint_net_diffpair 'name <str>'"
                    ],
                    "type": "str"
                },
                "match": {
                    "example": [
                        "cli: -constraint_net_match 'clk1 clk2'",
                        "api: chip.set('constraint', 'net', 'clk1', 'match', 'clk2')"
                    ],
                    "help": "List of nets whose routing should closely matched the named\nnet in terms of length, layer, width, etc. Wildcards ('*') can\nbe used for net names.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net matched routing",
                    "switch": [
                        "-constraint_net_match 'name <str>'"
                    ],
                    "type": "[str]"
                },
                "maxlayer": {
                    "example": [
                        "cli: -constraint_net_maxlayer 'nreset m1'",
                        "api: chip.set('constraint', 'net', 'nreset', 'maxlayer', 'm1')"
                    ],
                    "help": "Maximum metal layer to be used for automated place and route\nspecified on a per net basis. Metal names should either be the PDK\nspecific metal stack name or an integer with '1' being the lowest\nrouting layer. Wildcards ('*') can be used for net names.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net maximum routing layer",
                    "switch": [
                        "-constraint_net_maxlayer 'name <str>'"
                    ],
                    "type": "str"
                },
                "maxlength": {
                    "example": [
                        "cli: -constraint_net_maxlength 'nreset 1000'",
                        "api: chip.set('constraint', 'net', 'nreset', 'maxlength', '1000')"
                    ],
                    "help": "Maximum total length of a net, specified in microns or lambda units.\nWildcards ('*') can be used for net names.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net max length",
                    "switch": [
                        "-constraint_net_maxlength 'name <float>'"
                    ],
                    "type": "float",
                    "unit": "um"
                },
                "maxresistance": {
                    "example": [
                        "cli: -constraint_net_maxresistance 'nreset 1'",
                        "api: chip.set('constraint', 'net', 'nreset', 'maxresistance', '1')"
                    ],
                    "help": "Maximum resistance of named net between driver and receiver\nspecified in ohms. Wildcards ('*') can be used for net names.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net max resistance",
                    "switch": [
                        "-constraint_net_maxresistance 'name <float>'"
                    ],
                    "type": "float",
                    "unit": "ohm"
                },
                "minlayer": {
                    "example": [
                        "cli: -constraint_net_minlayer 'nreset m1'",
                        "api: chip.set('constraint', 'net', 'nreset', 'minlayer', 'm1')"
                    ],
                    "help": "Minimum metal layer to be used for automated place and route\nspecified on a per net basis. Metal names should either be the PDK\nspecific metal stack name or an integer with '1' being the lowest\nrouting layer. Wildcards ('*') can be used for net names.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net minimum routing layer",
                    "switch": [
                        "-constraint_net_minlayer 'name <str>'"
                    ],
                    "type": "str"
                },
                "ndr": {
                    "example": [
                        "cli: -constraint_net_ndr 'nreset (0.4,0.4)'",
                        "api: chip.set('constraint', 'net', 'nreset', 'ndr', (0.4, 0.4))"
                    ],
                    "help": "Definitions of non-default routing rule specified on a per\nnet basis. Constraints are entered as a (width, space) tuples\nspecified in microns or lambda units. Wildcards ('*') can be used\nfor net names.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net routing rule",
                    "switch": [
                        "-constraint_net_ndr 'name <(float,float)>'"
                    ],
                    "type": "(float,float)",
                    "unit": "um"
                },
                "shield": {
                    "example": [
                        "cli: -constraint_net_shield 'clk vss'",
                        "api: chip.set('constraint', 'net', 'clk', 'shield', 'vss')"
                    ],
                    "help": "Specifies that the named net should be shielded by the given\nsignal on both sides of the net.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net shielding",
                    "switch": [
                        "-constraint_net_shield 'name <str>'"
                    ],
                    "type": "str"
                },
                "sympair": {
                    "example": [
                        "cli: -constraint_net_sympair 'netA netB'",
                        "api: chip.set('constraint', 'net', 'netA', 'sympair', 'netB')"
                    ],
                    "help": "Symmetrical pair signal to the named net. The two nets should be routed\nas reflections around the vertical or horizontal axis to minimize on-chip\nvariability.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Net sympair",
                    "switch": [
                        "-constraint_net_sympair 'name <str>'"
                    ],
                    "type": "str"
                }
            }
        },
        "outline": {
            "example": [
                "cli: -constraint_outline '(0,0)'",
                "api: chip.set('constraint', 'outline', (0, 0))"
            ],
            "help": "List of (x, y) points that define the outline physical layout\nphysical design. Simple rectangle areas can be defined with two points,\none for the lower left corner and one for the upper right corner. All\nvalues are specified in microns or lambda units.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "Constraint: Layout outline",
            "switch": [
                "-constraint_outline <[(float,float)]>"
            ],
            "type": "[(float,float)]",
            "unit": "um"
        },
        "pin": {
            "default": {
                "layer": {
                    "example": [
                        "cli: -constraint_pin_layer 'nreset m4'",
                        "api: chip.set('constraint', 'pin', 'nreset', 'layer', 'm4')"
                    ],
                    "help": "Pin metal layer specified based on the SC standard layer stack\nstarting with m1 as the lowest routing layer and ending\nwith m<n> as the highest routing layer.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Pin layer",
                    "switch": [
                        "-constraint_pin_layer 'name <str>'"
                    ],
                    "type": "str"
                },
                "order": {
                    "example": [
                        "cli: -constraint_pin_order 'nreset 1'",
                        "api: chip.set('constraint', 'pin', 'nreset', 'order', 1)"
                    ],
                    "help": "The relative position of the named pin in a vector of pins\non the side specified by the 'side' option. Pin order counting\nis done clockwise. If multiple pins on the same side have the\nsame order number, the actual order is at the discretion of the\ntool.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Pin order",
                    "switch": [
                        "-constraint_pin_order 'name <int>'"
                    ],
                    "type": "int"
                },
                "placement": {
                    "example": [
                        "cli: -constraint_pin_placement 'nreset (2.0,3.0,0.0)'",
                        "api: chip.set('constraint', 'pin', 'nreset', 'placement', (2.0, 3.0, 0.0))"
                    ],
                    "help": "Placement location of a named pin, specified as a (x, y, z) tuple of\nfloats. The location refers to the placement of the center of the\npin. The 'placement' parameter is a goal/intent, not an exact specification.\nThe compiler and layout system may adjust sizes to meet competing\ngoals such as manufacturing design rules and grid placement\nguidelines. The 'z' coordinate shall be set to 0 for planar components\nwith only (x, y) coordinates. Discretized systems like 3D chips with\npins on top and bottom may choose to discretize the top and bottom\nlayer as 0, 1 or use absolute coordinates. Values are specified\nin microns or lambda units.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Pin placement",
                    "switch": [
                        "-constraint_pin_placement 'name <(float,float,float)>'"
                    ],
                    "type": "(float,float,float)",
                    "unit": "um"
                },
                "side": {
                    "example": [
                        "cli: -constraint_pin_side 'nreset 1'",
                        "api: chip.set('constraint', 'pin', 'nreset', 'side', 1)"
                    ],
                    "help": "Side of block where the named pin should be placed. Sides are\nenumerated as integers with '1' being the lower left side,\nwith the side index incremented on right turn in a clock wise\nfashion. In case of conflict between 'lower' and 'left',\n'left' has precedence. The side option and order option are\northogonal to the placement option.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: Pin side",
                    "switch": [
                        "-constraint_pin_side 'name <int>'"
                    ],
                    "type": "int"
                }
            }
        },
        "timing": {
            "default": {
                "check": {
                    "example": [
                        "cli: -constraint_timing_check 'worst setup'",
                        "api: chip.add('constraint', 'timing', 'worst', 'check', 'setup')"
                    ],
                    "help": "List of checks for to perform for the scenario. The checks must\nalign with the capabilities of the EDA tools and flow being used.\nChecks generally include objectives like meeting setup and hold goals\nand minimize power. Standard check names include setup, hold, power,\nnoise, reliability.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: timing checks",
                    "switch": [
                        "-constraint_timing_check 'scenario <str>'"
                    ],
                    "type": "[str]"
                },
                "file": {
                    "copy": true,
                    "example": [
                        "cli: -constraint_timing_file 'worst hello.sdc'",
                        "api: chip.set('constraint', 'timing', 'worst', 'file', 'hello.sdc')"
                    ],
                    "hashalgo": "sha256",
                    "help": "List of timing constraint files to use for the scenario. The\nvalues are combined with any constraints specified by the design\n'constraint' parameter. If no constraints are found, a default\nconstraint file is used based on the clock definitions.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: SDC files",
                    "switch": [
                        "-constraint_timing_file 'scenario <file>'"
                    ],
                    "type": "[file]"
                },
                "libcorner": {
                    "example": [
                        "cli: -constraint_timing_libcorner 'worst ttt'",
                        "api: chip.set('constraint', 'timing', 'worst', 'libcorner', 'ttt')"
                    ],
                    "help": "List of characterization corners used to select\ntiming files for all logiclibs and macrolibs.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: library corner",
                    "switch": [
                        "-constraint_timing_libcorner 'scenario <str>'"
                    ],
                    "type": "[str]"
                },
                "mode": {
                    "example": [
                        "cli: -constraint_timing_mode 'worst test'",
                        "api: chip.set('constraint', 'timing', 'worst', 'mode', 'test')"
                    ],
                    "help": "Operating mode for the scenario. Operating mode strings\ncan be values such as test, functional, standby.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: operating mode",
                    "switch": [
                        "-constraint_timing_mode 'scenario <str>'"
                    ],
                    "type": "str"
                },
                "opcond": {
                    "example": [
                        "cli: -constraint_timing_opcond 'worst typical_1.0'",
                        "api: chip.set('constraint', 'timing', 'worst', 'opcond', 'typical_1.0')"
                    ],
                    "help": "Operating condition applied to the scenario. The value\ncan be used to access specific conditions within the library\ntiming models from the 'logiclib' timing models.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: operating condition",
                    "switch": [
                        "-constraint_timing_opcond 'scenario <str>'"
                    ],
                    "type": "str"
                },
                "pexcorner": {
                    "example": [
                        "cli: -constraint_timing_pexcorner 'worst max'",
                        "api: chip.set('constraint', 'timing', 'worst', 'pexcorner', 'max')"
                    ],
                    "help": "Parasitic corner applied to the scenario. The\n'pexcorner' string must match a corner found in the pdk\npexmodel setup.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: pex corner",
                    "switch": [
                        "-constraint_timing_pexcorner 'scenario <str>'"
                    ],
                    "type": "str"
                },
                "temperature": {
                    "example": [
                        "cli: -constraint_timing_temperature 'worst 125'",
                        "api: chip.set('constraint', 'timing', 'worst', 'temperature', '125')"
                    ],
                    "help": "Chip temperature applied to the scenario specified in degrees C.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Constraint: temperature",
                    "switch": [
                        "-constraint_timing_temperature 'scenario <float>'"
                    ],
                    "type": "float",
                    "unit": "C"
                },
                "voltage": {
                    "default": {
                        "example": [
                            "cli: -constraint_timing_voltage 'worst VDD 0.9'",
                            "api: chip.set('constraint', 'timing', 'worst', 'voltage', 'VDD', '0.9')"
                        ],
                        "help": "Operating voltage applied to a specific pin in the scenario.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Constraint: pin voltage level",
                        "switch": [
                            "-constraint_timing_voltage 'scenario <pin> <float>'"
                        ],
                        "type": "float",
                        "unit": "V"
                    }
                }
            }
        }
    },
    "datasheet": {
        "feature": {
            "default": {
                "example": [
                    "cli: -datasheet_feature 'ram 64e6'",
                    "api: chip.set('datasheet', 'feature', 'ram', 64e6)"
                ],
                "help": "Quantity of a specified feature. The 'unit'\nfield should be used to specify the units used when unclear.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: features",
                "switch": [
                    "-datasheet_feature 'name <float>'"
                ],
                "type": "float"
            }
        },
        "limit": {
            "junctiontemp": {
                "example": [
                    "cli: -datasheet_limit_junctiontemp '(-40, 125)'",
                    "api: chip.set('datasheet', 'limit', 'junctiontemp', (-40, 125)"
                ],
                "help": "Limit junction temperature limits. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit junction temperature limits",
                "switch": [
                    "-datasheet_limit_junctiontemp '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "C"
            },
            "seb": {
                "example": [
                    "cli: -datasheet_limit_seb '(75, 75)'",
                    "api: chip.set('datasheet', 'limit', 'seb', (75, 75)"
                ],
                "help": "Limit single event burnout threshold. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit single event burnout threshold",
                "switch": [
                    "-datasheet_limit_seb '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "MeV-cm2/mg"
            },
            "segr": {
                "example": [
                    "cli: -datasheet_limit_segr '(75, 75)'",
                    "api: chip.set('datasheet', 'limit', 'segr', (75, 75)"
                ],
                "help": "Limit single event gate rupture threshold. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit single event gate rupture threshold",
                "switch": [
                    "-datasheet_limit_segr '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "MeV-cm2/mg"
            },
            "sel": {
                "example": [
                    "cli: -datasheet_limit_sel '(75, 75)'",
                    "api: chip.set('datasheet', 'limit', 'sel', (75, 75)"
                ],
                "help": "Limit single event latchup threshold. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit single event latchup threshold",
                "switch": [
                    "-datasheet_limit_sel '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "MeV-cm2/mg"
            },
            "set": {
                "example": [
                    "cli: -datasheet_limit_set '(75, 75)'",
                    "api: chip.set('datasheet', 'limit', 'set', (75, 75)"
                ],
                "help": "Limit single event transient threshold. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit single event transient threshold",
                "switch": [
                    "-datasheet_limit_set '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "MeV-cm2/mg"
            },
            "seu": {
                "example": [
                    "cli: -datasheet_limit_seu '(75, 75)'",
                    "api: chip.set('datasheet', 'limit', 'seu', (75, 75)"
                ],
                "help": "Limit single event upset threshold. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit single event upset threshold",
                "switch": [
                    "-datasheet_limit_seu '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "MeV-cm2/mg"
            },
            "soldertemp": {
                "example": [
                    "cli: -datasheet_limit_soldertemp '(-40, 125)'",
                    "api: chip.set('datasheet', 'limit', 'soldertemp', (-40, 125)"
                ],
                "help": "Limit solder temperature limits. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit solder temperature limits",
                "switch": [
                    "-datasheet_limit_soldertemp '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "C"
            },
            "storagetemp": {
                "example": [
                    "cli: -datasheet_limit_storagetemp '(-40, 125)'",
                    "api: chip.set('datasheet', 'limit', 'storagetemp', (-40, 125)"
                ],
                "help": "Limit storage temperature limits. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit storage temperature limits",
                "switch": [
                    "-datasheet_limit_storagetemp '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "C"
            },
            "tid": {
                "example": [
                    "cli: -datasheet_limit_tid '(300000.0, 300000.0)'",
                    "api: chip.set('datasheet', 'limit', 'tid', (300000.0, 300000.0)"
                ],
                "help": "Limit total ionizing dose threshold. Values are tuples of (min, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit total ionizing dose threshold",
                "switch": [
                    "-datasheet_limit_tid '<(float,float)>'"
                ],
                "type": "(float,float)",
                "unit": "rad"
            }
        },
        "mechanical": {
            "bodyheight": {
                "example": [
                    "cli: -datasheet_mechanical_bodyheight '(0.8, 0.85, 0.9)'",
                    "api: chip.set('datasheet', 'mechanical', 'bodyheight', (0.8, 0.85, 0.9)"
                ],
                "help": "Mechanical specification thickness of packaged body. Values are tuples of\n(min, nominal, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit thickness of packaged body",
                "switch": [
                    "-datasheet_mechanical_bodyheight '<(float,float,float)>'"
                ],
                "type": "(float,float,float)",
                "unit": "mm"
            },
            "bumpdiameter": {
                "example": [
                    "cli: -datasheet_mechanical_bumpdiameter '(0.45, 0.5, 0.55)'",
                    "api: chip.set('datasheet', 'mechanical', 'bumpdiameter', (0.45, 0.5, 0.55)"
                ],
                "help": "Mechanical specification bump diameter. Values are tuples of\n(min, nominal, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit bump diameter",
                "switch": [
                    "-datasheet_mechanical_bumpdiameter '<(float,float,float)>'"
                ],
                "type": "(float,float,float)",
                "unit": "mm"
            },
            "bumpheight": {
                "example": [
                    "cli: -datasheet_mechanical_bumpheight '(0.2, 0.25, 0.3)'",
                    "api: chip.set('datasheet', 'mechanical', 'bumpheight', (0.2, 0.25, 0.3)"
                ],
                "help": "Mechanical specification bump height. Values are tuples of\n(min, nominal, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit bump height",
                "switch": [
                    "-datasheet_mechanical_bumpheight '<(float,float,float)>'"
                ],
                "type": "(float,float,float)",
                "unit": "mm"
            },
            "bumppitch": {
                "example": [
                    "cli: -datasheet_mechanical_bumppitch '(1, 1, 1)'",
                    "api: chip.set('datasheet', 'mechanical', 'bumppitch', (1, 1, 1)"
                ],
                "help": "Mechanical specification bump pitch. Values are tuples of\n(min, nominal, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit bump pitch",
                "switch": [
                    "-datasheet_mechanical_bumppitch '<(float,float,float)>'"
                ],
                "type": "(float,float,float)",
                "unit": "mm"
            },
            "length": {
                "example": [
                    "cli: -datasheet_mechanical_length '(20, 20, 20)'",
                    "api: chip.set('datasheet', 'mechanical', 'length', (20, 20, 20)"
                ],
                "help": "Mechanical specification package length. Values are tuples of\n(min, nominal, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit package length",
                "switch": [
                    "-datasheet_mechanical_length '<(float,float,float)>'"
                ],
                "type": "(float,float,float)",
                "unit": "mm"
            },
            "thickness": {
                "example": [
                    "cli: -datasheet_mechanical_thickness '(1.0, 1.1, 1.2)'",
                    "api: chip.set('datasheet', 'mechanical', 'thickness', (1.0, 1.1, 1.2)"
                ],
                "help": "Mechanical specification total package thickness. Values are tuples of\n(min, nominal, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit total package thickness",
                "switch": [
                    "-datasheet_mechanical_thickness '<(float,float,float)>'"
                ],
                "type": "(float,float,float)",
                "unit": "mm"
            },
            "width": {
                "example": [
                    "cli: -datasheet_mechanical_width '(20, 20, 20)'",
                    "api: chip.set('datasheet', 'mechanical', 'width', (20, 20, 20)"
                ],
                "help": "Mechanical specification package width. Values are tuples of\n(min, nominal, max).",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: limit package width",
                "switch": [
                    "-datasheet_mechanical_width '<(float,float,float)>'"
                ],
                "type": "(float,float,float)",
                "unit": "mm"
            }
        },
        "pin": {
            "default": {
                "bw": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_bw 'sclk global (500000000.0, 600000000.0, 700000000.0)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'bw', 'global', (500000000.0, 600000000.0, 700000000.0)"
                        ],
                        "help": "Pin nyquist bandwidth. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin nyquist bandwidth",
                        "switch": [
                            "-datasheet_pin_bw 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "Hz"
                    }
                },
                "cap": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_cap 'sclk global (1e-12, 1.2e-12, 1.5e-12)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'cap', 'global', (1e-12, 1.2e-12, 1.5e-12)"
                        ],
                        "help": "Pin capacitance. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin capacitance",
                        "switch": [
                            "-datasheet_pin_cap 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "F"
                    }
                },
                "cmrr": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_cmrr 'sclk global (70, 80, 90)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'cmrr', 'global', (70, 80, 90)"
                        ],
                        "help": "Pin common mode rejection ratio. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin common mode rejection ratio",
                        "switch": [
                            "-datasheet_pin_cmrr 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "complement": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_complement 'ina global inb'",
                            "api: chip.set('datasheet', 'pin', 'ina', 'complement', 'global', 'inb')"
                        ],
                        "help": "Pin complement specified on a per mode basis for differential\nsignals.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin complement",
                        "switch": [
                            "-datasheet_pin_complement 'name mode <str>'"
                        ],
                        "type": "str"
                    }
                },
                "dir": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_dir 'clk global input'",
                            "api: chip.set('datasheet', 'pin', 'clk', 'dir', 'global', 'input')"
                        ],
                        "help": "Pin direction specified on a per mode basis. Acceptable pin\ndirections include: input, output, inout.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin direction",
                        "switch": [
                            "-datasheet_pin_dir 'name mode <str>'"
                        ],
                        "type": "str"
                    }
                },
                "dnl": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_dnl 'sclk global (-1.0, 0.0, 1.0)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'dnl', 'global', (-1.0, 0.0, 1.0)"
                        ],
                        "help": "Pin differential nonlinearity. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin differential nonlinearity",
                        "switch": [
                            "-datasheet_pin_dnl 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "LSB"
                    }
                },
                "enob": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_enob 'sclk global (8, 9, 10)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'enob', 'global', (8, 9, 10)"
                        ],
                        "help": "Pin effective number of bits. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin effective number of bits",
                        "switch": [
                            "-datasheet_pin_enob 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "bits"
                    }
                },
                "function": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_function 'z global a&b'",
                            "api: chip.set('datasheet', 'pin', 'z', 'function', 'global', 'a&b')"
                        ],
                        "help": "Pin function specified on a per mode basis.\nOnly applicable to output pins.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin function",
                        "switch": [
                            "-datasheet_pin_function 'name mode <str>'"
                        ],
                        "type": "str"
                    }
                },
                "gain": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_gain 'sclk global (11.4, 11.4, 11.4)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'gain', 'global', (11.4, 11.4, 11.4)"
                        ],
                        "help": "Pin gain. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin gain",
                        "switch": [
                            "-datasheet_pin_gain 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "hd2": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_hd2 'sclk global (62, 64, 66)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'hd2', 'global', (62, 64, 66)"
                        ],
                        "help": "Pin 2nd order harmonic distortion. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin 2nd order harmonic distortion",
                        "switch": [
                            "-datasheet_pin_hd2 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBc"
                    }
                },
                "hd3": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_hd3 'sclk global (62, 64, 66)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'hd3', 'global', (62, 64, 66)"
                        ],
                        "help": "Pin 3rd order harmonic distortion. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin 3rd order harmonic distortion",
                        "switch": [
                            "-datasheet_pin_hd3 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBc"
                    }
                },
                "hd4": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_hd4 'sclk global (62, 64, 66)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'hd4', 'global', (62, 64, 66)"
                        ],
                        "help": "Pin 4th order harmonic distortion. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin 4th order harmonic distortion",
                        "switch": [
                            "-datasheet_pin_hd4 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBc"
                    }
                },
                "ib1db": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_ib1db 'sclk global (-1, 1, 1)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'ib1db', 'global', (-1, 1, 1)"
                        ],
                        "help": "Pin rf in band 1 dB compression point. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf in band 1 dB compression point",
                        "switch": [
                            "-datasheet_pin_ib1db 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBm"
                    }
                },
                "ibias": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_ibias 'sclk global (0.001, 0.0012, 0.0015)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'ibias', 'global', (0.001, 0.0012, 0.0015)"
                        ],
                        "help": "Pin bias current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin bias current",
                        "switch": [
                            "-datasheet_pin_ibias 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "iinject": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_iinject 'sclk global (0.001, 0.0012, 0.0015)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'iinject', 'global', (0.001, 0.0012, 0.0015)"
                        ],
                        "help": "Pin injection current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin injection current",
                        "switch": [
                            "-datasheet_pin_iinject 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "iip3": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_iip3 'sclk global (3, 3, 3)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'iip3', 'global', (3, 3, 3)"
                        ],
                        "help": "Pin rf 3rd order input intercept point. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf 3rd order input intercept point",
                        "switch": [
                            "-datasheet_pin_iip3 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBm"
                    }
                },
                "ileakage": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_ileakage 'sclk global (1e-06, 1.2e-06, 1.5e-06)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'ileakage', 'global', (1e-06, 1.2e-06, 1.5e-06)"
                        ],
                        "help": "Pin leakage current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin leakage current",
                        "switch": [
                            "-datasheet_pin_ileakage 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "imd3": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_imd3 'sclk global (82, 88, 98)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'imd3', 'global', (82, 88, 98)"
                        ],
                        "help": "Pin 3rd order intermodulation distortion. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin 3rd order intermodulation distortion",
                        "switch": [
                            "-datasheet_pin_imd3 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBc"
                    }
                },
                "inl": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_inl 'sclk global (-7, 0.0, 7)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'inl', 'global', (-7, 0.0, 7)"
                        ],
                        "help": "Pin integral nonlinearity. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin integral nonlinearity",
                        "switch": [
                            "-datasheet_pin_inl 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "LSB"
                    }
                },
                "interface": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_signal 'clk0 ddr4 CLKN'",
                            "api: chip.set('datasheet', 'pin', 'clk0', 'interface', 'ddr4', 'CLKN')"
                        ],
                        "help": "Pin mapping to standardized interface names.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin interface map",
                        "switch": [
                            "-datasheet_pin_signal 'name mode <str>'"
                        ],
                        "type": "[str]"
                    }
                },
                "ioffset": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_ioffset 'sclk global (0.001, 0.0012, 0.0015)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'ioffset', 'global', (0.001, 0.0012, 0.0015)"
                        ],
                        "help": "Pin offset current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin offset current",
                        "switch": [
                            "-datasheet_pin_ioffset 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "ioh": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_ioh 'sclk global (0.01, 0.012, 0.015)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'ioh', 'global', (0.01, 0.012, 0.015)"
                        ],
                        "help": "Pin output high current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin output high current",
                        "switch": [
                            "-datasheet_pin_ioh 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "iol": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_iol 'sclk global (0.01, 0.012, 0.015)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'iol', 'global', (0.01, 0.012, 0.015)"
                        ],
                        "help": "Pin output low current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin output low current",
                        "switch": [
                            "-datasheet_pin_iol 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "ishort": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_ishort 'sclk global (0.001, 0.0012, 0.0015)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'ishort', 'global', (0.001, 0.0012, 0.0015)"
                        ],
                        "help": "Pin short circuit current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin short circuit current",
                        "switch": [
                            "-datasheet_pin_ishort 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "isupply": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_isupply 'sclk global (0.001, 0.012, 0.015)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'isupply', 'global', (0.001, 0.012, 0.015)"
                        ],
                        "help": "Pin supply current. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin supply current",
                        "switch": [
                            "-datasheet_pin_isupply 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "A"
                    }
                },
                "map": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_map 'in0 B4 (100.0, 100.0)'",
                            "api: chip.set('datasheet', 'pin','in0','map','B4',(100.0, 100.0)"
                        ],
                        "help": "Mapping of signal pin to physical package pin name and location. Power\nand ground signals usually map to multiple pins/bumps/balls. Pin locations\nspecify the (x,y) center of the pin with respect to the centroid of the\ndesign/package.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin map",
                        "switch": [
                            "-datasheet_pin_map 'name bump <(float,float)>'"
                        ],
                        "type": "(float,float)",
                        "unit": "um"
                    }
                },
                "noisefigure": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_noisefigure 'sclk global (4.6, 4.6, 4.6)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'noisefigure', 'global', (4.6, 4.6, 4.6)"
                        ],
                        "help": "Pin rf noise figure. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf noise figure",
                        "switch": [
                            "-datasheet_pin_noisefigure 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "nsd": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_nsd 'sclk global (-158, -158, -158)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'nsd', 'global', (-158, -158, -158)"
                        ],
                        "help": "Pin noise spectral density. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin noise spectral density",
                        "switch": [
                            "-datasheet_pin_nsd 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBFS/Hz"
                    }
                },
                "oob1db": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_oob1db 'sclk global (3, 3, 3)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'oob1db', 'global', (3, 3, 3)"
                        ],
                        "help": "Pin rf out of band 1 dB compression point. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf out of band 1 dB compression point",
                        "switch": [
                            "-datasheet_pin_oob1db 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBm"
                    }
                },
                "phasenoise": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_phasenoise 'sclk global (-158, -158, -158)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'phasenoise', 'global', (-158, -158, -158)"
                        ],
                        "help": "Pin phase noise. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin phase noise",
                        "switch": [
                            "-datasheet_pin_phasenoise 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBc/Hz"
                    }
                },
                "polarity": {
                    "default": {
                        "default": {
                            "enum": [
                                "positive",
                                "negative",
                                "none"
                            ],
                            "example": [
                                "cli: -datasheet_pin_polarity 'q def clk none'",
                                "api: chip.set('datasheet', 'pin', 'q', 'polarity', 'def', 'clk', 'none')"
                            ],
                            "help": "Pin polarity specified on a per mode basis. Only applicable to output\npins.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin polarity",
                            "switch": [
                                "-datasheet_pin_polarity 'name mode relpin <str>'"
                            ],
                            "type": "enum"
                        }
                    }
                },
                "pout": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_pout 'sclk global (12.2, 12.2, 12.2)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'pout', 'global', (12.2, 12.2, 12.2)"
                        ],
                        "help": "Pin output power. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin output power",
                        "switch": [
                            "-datasheet_pin_pout 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBm"
                    }
                },
                "pout2": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_pout2 'sclk global (-14, -14, -14)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'pout2', 'global', (-14, -14, -14)"
                        ],
                        "help": "Pin 2nd harmonic power. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin 2nd harmonic power",
                        "switch": [
                            "-datasheet_pin_pout2 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBm"
                    }
                },
                "pout3": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_pout3 'sclk global (-28, -28, -28)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'pout3', 'global', (-28, -28, -28)"
                        ],
                        "help": "Pin 3rd harmonic power. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin 3rd harmonic power",
                        "switch": [
                            "-datasheet_pin_pout3 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBm"
                    }
                },
                "power": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_power 'sclk global (1, 2, 3)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'power', 'global', (1, 2, 3)"
                        ],
                        "help": "Pin power consumption. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin power consumption",
                        "switch": [
                            "-datasheet_pin_power 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "W"
                    }
                },
                "psnr": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_psnr 'sclk global (61, 61, 61)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'psnr', 'global', (61, 61, 61)"
                        ],
                        "help": "Pin power supply noise rejection. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin power supply noise rejection",
                        "switch": [
                            "-datasheet_pin_psnr 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "rdiff": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_rdiff 'sclk global (45, 50, 55)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'rdiff', 'global', (45, 50, 55)"
                        ],
                        "help": "Pin differential pair resistance. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin differential pair resistance",
                        "switch": [
                            "-datasheet_pin_rdiff 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "Ohm"
                    }
                },
                "rdown": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_rdown 'sclk global (1000, 1200, 3000)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'rdown', 'global', (1000, 1200, 3000)"
                        ],
                        "help": "Pin output pulldown resistance. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin output pulldown resistance",
                        "switch": [
                            "-datasheet_pin_rdown 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "Ohm"
                    }
                },
                "resetvalue": {
                    "default": {
                        "enum": [
                            "weak1",
                            "weak0",
                            "strong0",
                            "strong1",
                            "highz"
                        ],
                        "example": [
                            "cli: -datasheet_pin_resetvalue 'clk global weak1'",
                            "api: chip.set('datasheet', 'pin', 'clk', 'resetvalue', 'global', 'weak1')"
                        ],
                        "help": "Pin reset value specified on a per mode basis.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin reset value",
                        "switch": [
                            "-datasheet_pin_resetvalue 'name mode <str>'"
                        ],
                        "type": "enum"
                    }
                },
                "rin": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_rin 'sclk global (1000, 1200, 3000)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'rin', 'global', (1000, 1200, 3000)"
                        ],
                        "help": "Pin input resistance. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin input resistance",
                        "switch": [
                            "-datasheet_pin_rin 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "Ohm"
                    }
                },
                "rup": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_rup 'sclk global (1000, 1200, 3000)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'rup', 'global', (1000, 1200, 3000)"
                        ],
                        "help": "Pin output pullup resistance. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin output pullup resistance",
                        "switch": [
                            "-datasheet_pin_rup 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "Ohm"
                    }
                },
                "rweakdown": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_rweakdown 'sclk global (1000, 1200, 3000)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'rweakdown', 'global', (1000, 1200, 3000)"
                        ],
                        "help": "Pin weak pulldown resistance. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin weak pulldown resistance",
                        "switch": [
                            "-datasheet_pin_rweakdown 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "Ohm"
                    }
                },
                "rweakup": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_rweakup 'sclk global (1000, 1200, 3000)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'rweakup', 'global', (1000, 1200, 3000)"
                        ],
                        "help": "Pin weak pullup resistance. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin weak pullup resistance",
                        "switch": [
                            "-datasheet_pin_rweakup 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "Ohm"
                    }
                },
                "s11": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_s11 'sclk global (7, 7, 7)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 's11', 'global', (7, 7, 7)"
                        ],
                        "help": "Pin rf input return loss. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf input return loss",
                        "switch": [
                            "-datasheet_pin_s11 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "s12": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_s12 'sclk global (-20, -20, -20)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 's12', 'global', (-20, -20, -20)"
                        ],
                        "help": "Pin rf reverse isolation. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf reverse isolation",
                        "switch": [
                            "-datasheet_pin_s12 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "s21": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_s21 'sclk global (10, 11, 12)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 's21', 'global', (10, 11, 12)"
                        ],
                        "help": "Pin rf gain. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf gain",
                        "switch": [
                            "-datasheet_pin_s21 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "s22": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_s22 'sclk global (10, 10, 10)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 's22', 'global', (10, 10, 10)"
                        ],
                        "help": "Pin rf output return loss. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rf output return loss",
                        "switch": [
                            "-datasheet_pin_s22 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "sfdr": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_sfdr 'sclk global (82, 88, 98)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'sfdr', 'global', (82, 88, 98)"
                        ],
                        "help": "Pin spurious-free dynamic range. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin spurious-free dynamic range",
                        "switch": [
                            "-datasheet_pin_sfdr 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dBc"
                    }
                },
                "sinad": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_sinad 'sclk global (71, 72, 73)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'sinad', 'global', (71, 72, 73)"
                        ],
                        "help": "Pin signal to noise and distortion ratio. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin signal to noise and distortion ratio",
                        "switch": [
                            "-datasheet_pin_sinad 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "snr": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_snr 'sclk global (70, 72, 74)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'snr', 'global', (70, 72, 74)"
                        ],
                        "help": "Pin signal to noise ratio. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin signal to noise ratio",
                        "switch": [
                            "-datasheet_pin_snr 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "dB"
                    }
                },
                "standard": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_standard 'clk def LVCMOS'",
                            "api: chip.set('datasheet', 'pin', 'clk', 'standard', 'def', 'LVCMOS')"
                        ],
                        "help": "Pin electrical signaling standard (LVDS, LVCMOS, TTL, ...).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin standard",
                        "switch": [
                            "-datasheet_pin_standard 'name mode <str>'"
                        ],
                        "type": "[str]"
                    }
                },
                "tdelayf": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -datasheet_pin_tdelayf 'a glob clock (1e-09, 2e-09, 4e-09)'",
                                "api: chip.set('datasheet', 'pin', 'a', 'tdelayf', 'glob', 'ck', (1e-09, 2e-09, 4e-09)"
                            ],
                            "help": "Pin propagation delay (fall) specified on a per pin, mode, and relpin basis.\nValues are tuples of (min, typical, max).",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin propagation delay (fall)",
                            "switch": [
                                "-datasheet_pin_tdelayf 'pin mode relpin <(float,float,float)>'"
                            ],
                            "type": "(float,float,float)",
                            "unit": "s"
                        }
                    }
                },
                "tdelayr": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -datasheet_pin_tdelayr 'a glob clock (1e-09, 2e-09, 4e-09)'",
                                "api: chip.set('datasheet', 'pin', 'a', 'tdelayr', 'glob', 'ck', (1e-09, 2e-09, 4e-09)"
                            ],
                            "help": "Pin propagation delay (rise) specified on a per pin, mode, and relpin basis.\nValues are tuples of (min, typical, max).",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin propagation delay (rise)",
                            "switch": [
                                "-datasheet_pin_tdelayr 'pin mode relpin <(float,float,float)>'"
                            ],
                            "type": "(float,float,float)",
                            "unit": "s"
                        }
                    }
                },
                "tduty": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_tduty 'sclk global (45, 50, 55)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'tduty', 'global', (45, 50, 55)"
                        ],
                        "help": "Pin duty cycle. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin duty cycle",
                        "switch": [
                            "-datasheet_pin_tduty 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "%"
                    }
                },
                "tfall": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -datasheet_pin_tfall 'a glob clock (1e-09, 2e-09, 4e-09)'",
                                "api: chip.set('datasheet', 'pin', 'a', 'tfall', 'glob', 'ck', (1e-09, 2e-09, 4e-09)"
                            ],
                            "help": "Pin fall transition specified on a per pin, mode, and relpin basis.\nValues are tuples of (min, typical, max).",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin fall transition",
                            "switch": [
                                "-datasheet_pin_tfall 'pin mode relpin <(float,float,float)>'"
                            ],
                            "type": "(float,float,float)",
                            "unit": "s"
                        }
                    }
                },
                "thigh": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_thigh 'sclk global (1e-09, 2e-09, 4e-09)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'thigh', 'global', (1e-09, 2e-09, 4e-09)"
                        ],
                        "help": "Pin pulse width high. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin pulse width high",
                        "switch": [
                            "-datasheet_pin_thigh 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "s"
                    }
                },
                "thold": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -datasheet_pin_thold 'a glob clock (1e-09, 2e-09, 4e-09)'",
                                "api: chip.set('datasheet', 'pin', 'a', 'thold', 'glob', 'ck', (1e-09, 2e-09, 4e-09)"
                            ],
                            "help": "Pin hold time specified on a per pin, mode, and relpin basis.\nValues are tuples of (min, typical, max).",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin hold time",
                            "switch": [
                                "-datasheet_pin_thold 'pin mode relpin <(float,float,float)>'"
                            ],
                            "type": "(float,float,float)",
                            "unit": "s"
                        }
                    }
                },
                "tjitter": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_tjitter 'sclk global (1e-09, 2e-09, 4e-09)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'tjitter', 'global', (1e-09, 2e-09, 4e-09)"
                        ],
                        "help": "Pin rms jitter. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin rms jitter",
                        "switch": [
                            "-datasheet_pin_tjitter 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "s"
                    }
                },
                "tlow": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_tlow 'sclk global (1e-09, 2e-09, 4e-09)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'tlow', 'global', (1e-09, 2e-09, 4e-09)"
                        ],
                        "help": "Pin pulse width low. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin pulse width low",
                        "switch": [
                            "-datasheet_pin_tlow 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "s"
                    }
                },
                "tperiod": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_tperiod 'sclk global (1e-09, 2e-09, 4e-09)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'tperiod', 'global', (1e-09, 2e-09, 4e-09)"
                        ],
                        "help": "Pin minimum period. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin minimum period",
                        "switch": [
                            "-datasheet_pin_tperiod 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "s"
                    }
                },
                "tpulse": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_tpulse 'sclk global (1e-09, 2e-09, 4e-09)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'tpulse', 'global', (1e-09, 2e-09, 4e-09)"
                        ],
                        "help": "Pin pulse width. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin pulse width",
                        "switch": [
                            "-datasheet_pin_tpulse 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "s"
                    }
                },
                "trise": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -datasheet_pin_trise 'a glob clock (1e-09, 2e-09, 4e-09)'",
                                "api: chip.set('datasheet', 'pin', 'a', 'trise', 'glob', 'ck', (1e-09, 2e-09, 4e-09)"
                            ],
                            "help": "Pin rise transition specified on a per pin, mode, and relpin basis.\nValues are tuples of (min, typical, max).",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin rise transition",
                            "switch": [
                                "-datasheet_pin_trise 'pin mode relpin <(float,float,float)>'"
                            ],
                            "type": "(float,float,float)",
                            "unit": "s"
                        }
                    }
                },
                "tsetup": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -datasheet_pin_tsetup 'a glob clock (1e-09, 2e-09, 4e-09)'",
                                "api: chip.set('datasheet', 'pin', 'a', 'tsetup', 'glob', 'ck', (1e-09, 2e-09, 4e-09)"
                            ],
                            "help": "Pin setup time specified on a per pin, mode, and relpin basis.\nValues are tuples of (min, typical, max).",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin setup time",
                            "switch": [
                                "-datasheet_pin_tsetup 'pin mode relpin <(float,float,float)>'"
                            ],
                            "type": "(float,float,float)",
                            "unit": "s"
                        }
                    }
                },
                "tskew": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -datasheet_pin_tskew 'a glob clock (1e-09, 2e-09, 4e-09)'",
                                "api: chip.set('datasheet', 'pin', 'a', 'tskew', 'glob', 'ck', (1e-09, 2e-09, 4e-09)"
                            ],
                            "help": "Pin timing skew specified on a per pin, mode, and relpin basis.\nValues are tuples of (min, typical, max).",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Datasheet: pin timing skew",
                            "switch": [
                                "-datasheet_pin_tskew 'pin mode relpin <(float,float,float)>'"
                            ],
                            "type": "(float,float,float)",
                            "unit": "s"
                        }
                    }
                },
                "type": {
                    "default": {
                        "enum": [
                            "digital",
                            "analog",
                            "clock",
                            "supply",
                            "ground"
                        ],
                        "example": [
                            "cli: -datasheet_pin_type 'vdd global supply'",
                            "api: chip.set('datasheet', 'pin', 'vdd', 'type', 'global', 'supply')"
                        ],
                        "help": "Pin type specified on a per mode basis.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin type",
                        "switch": [
                            "-datasheet_pin_type 'name mode <str>'"
                        ],
                        "type": "enum"
                    }
                },
                "vcdm": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vcdm 'sclk global (125, 150, 175)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vcdm', 'global', (125, 150, 175)"
                        ],
                        "help": "Pin ESD charge device model voltage level. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin ESD charge device model voltage level",
                        "switch": [
                            "-datasheet_pin_vcdm 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vcm": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vcm 'sclk global (0.3, 1.2, 1.6)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vcm', 'global', (0.3, 1.2, 1.6)"
                        ],
                        "help": "Pin common mode voltage. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin common mode voltage",
                        "switch": [
                            "-datasheet_pin_vcm 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vdiff": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vdiff 'sclk global (0.2, 0.3, 0.9)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vdiff', 'global', (0.2, 0.3, 0.9)"
                        ],
                        "help": "Pin differential voltage. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin differential voltage",
                        "switch": [
                            "-datasheet_pin_vdiff 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vgainerror": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vgainerror 'sclk global (-1.0, 0.0, 1.0)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vgainerror', 'global', (-1.0, 0.0, 1.0)"
                        ],
                        "help": "Pin gain error. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin gain error",
                        "switch": [
                            "-datasheet_pin_vgainerror 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "mV"
                    }
                },
                "vhbm": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vhbm 'sclk global (200, 250, 300)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vhbm', 'global', (200, 250, 300)"
                        ],
                        "help": "Pin ESD human body model voltage level. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin ESD human body model voltage level",
                        "switch": [
                            "-datasheet_pin_vhbm 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vih": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vih 'sclk global (1.4, 1.8, 2.2)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vih', 'global', (1.4, 1.8, 2.2)"
                        ],
                        "help": "Pin high input voltage level. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin high input voltage level",
                        "switch": [
                            "-datasheet_pin_vih 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vil": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vil 'sclk global (-0.2, 0, 1.0)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vil', 'global', (-0.2, 0, 1.0)"
                        ],
                        "help": "Pin low input voltage level. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin low input voltage level",
                        "switch": [
                            "-datasheet_pin_vil 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vmax": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vmax 'sclk global (0.2, 0.3, 0.9)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vmax', 'global', (0.2, 0.3, 0.9)"
                        ],
                        "help": "Pin absolute maximum voltage. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin absolute maximum voltage",
                        "switch": [
                            "-datasheet_pin_vmax 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vmm": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vmm 'sclk global (100, 125, 150)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vmm', 'global', (100, 125, 150)"
                        ],
                        "help": "Pin ESD machine model voltage level. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin ESD machine model voltage level",
                        "switch": [
                            "-datasheet_pin_vmm 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vnoise": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vnoise 'sclk global (0, 0.01, 0.1)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vnoise', 'global', (0, 0.01, 0.1)"
                        ],
                        "help": "Pin random voltage noise. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin random voltage noise",
                        "switch": [
                            "-datasheet_pin_vnoise 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vnominal": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vnominal 'sclk global (1.72, 1.8, 1.92)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vnominal', 'global', (1.72, 1.8, 1.92)"
                        ],
                        "help": "Pin nominal operating voltage. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin nominal operating voltage",
                        "switch": [
                            "-datasheet_pin_vnominal 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vofferror": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vofferror 'sclk global (-1.0, 0.0, 1.0)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vofferror', 'global', (-1.0, 0.0, 1.0)"
                        ],
                        "help": "Pin offset error. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin offset error",
                        "switch": [
                            "-datasheet_pin_vofferror 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "mV"
                    }
                },
                "voffset": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_voffset 'sclk global (0.2, 0.3, 0.9)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'voffset', 'global', (0.2, 0.3, 0.9)"
                        ],
                        "help": "Pin offset voltage. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin offset voltage",
                        "switch": [
                            "-datasheet_pin_voffset 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "voh": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_voh 'sclk global (4.6, 4.8, 5.2)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'voh', 'global', (4.6, 4.8, 5.2)"
                        ],
                        "help": "Pin high output voltage level. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin high output voltage level",
                        "switch": [
                            "-datasheet_pin_voh 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vol": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vol 'sclk global (-0.2, 0, 0.2)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vol', 'global', (-0.2, 0, 0.2)"
                        ],
                        "help": "Pin low output voltage level. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin low output voltage level",
                        "switch": [
                            "-datasheet_pin_vol 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V"
                    }
                },
                "vslew": {
                    "default": {
                        "example": [
                            "cli: -datasheet_pin_vslew 'sclk global (1e-09, 2e-09, 4e-09)'",
                            "api: chip.set('datasheet', 'pin', 'sclk', 'vslew', 'global', (1e-09, 2e-09, 4e-09)"
                        ],
                        "help": "Pin slew rate. Values are tuples of (min, typical, max).",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Datasheet: pin slew rate",
                        "switch": [
                            "-datasheet_pin_vslew 'pin mode <(float,float,float)>'"
                        ],
                        "type": "(float,float,float)",
                        "unit": "V/s"
                    }
                }
            }
        },
        "reliability": {
            "default": {
                "default": {
                    "example": [
                        "cli: -datasheet_reliability 'JESD22-A104 time 1000'",
                        "api: chip.set('datasheet', 'reliability', 'JESD22-A104', 'time', 1000)"
                    ],
                    "help": "Device reliability specified on a per standard basis. The\nreliability test condition is captured as key/value pairs, where\nthe key is any test condition capture in the standard. Examples\nof test conditions include time, mintemp, maxtemp, cycles, vmax,\nmoisture.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Datasheet: reliability",
                    "switch": [
                        "-datasheet_reliability 'standard item <float>'"
                    ],
                    "type": "float"
                }
            }
        },
        "thermal": {
            "rja": {
                "example": [
                    "cli: -datasheet_thermal_rja '30.4'",
                    "api: chip.set('datasheet', 'thermal', 'rja', 30.4)"
                ],
                "help": "Device rja.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: thermal junction to ambient resistance",
                "switch": [
                    "-datasheet_thermal_rja '<float>'"
                ],
                "type": "float",
                "unit": "C/W"
            },
            "rjb": {
                "example": [
                    "cli: -datasheet_thermal_rjb '30.4'",
                    "api: chip.set('datasheet', 'thermal', 'rjb', 30.4)"
                ],
                "help": "Device rjb.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: thermal junction to board resistance",
                "switch": [
                    "-datasheet_thermal_rjb '<float>'"
                ],
                "type": "float",
                "unit": "C/W"
            },
            "rjcb": {
                "example": [
                    "cli: -datasheet_thermal_rjcb '30.4'",
                    "api: chip.set('datasheet', 'thermal', 'rjcb', 30.4)"
                ],
                "help": "Device rjcb.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: thermal junction to case (bottom) resistance",
                "switch": [
                    "-datasheet_thermal_rjcb '<float>'"
                ],
                "type": "float",
                "unit": "C/W"
            },
            "rjct": {
                "example": [
                    "cli: -datasheet_thermal_rjct '30.4'",
                    "api: chip.set('datasheet', 'thermal', 'rjct', 30.4)"
                ],
                "help": "Device rjct.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: thermal junction to case (top) resistance",
                "switch": [
                    "-datasheet_thermal_rjct '<float>'"
                ],
                "type": "float",
                "unit": "C/W"
            },
            "tjb": {
                "example": [
                    "cli: -datasheet_thermal_tjb '30.4'",
                    "api: chip.set('datasheet', 'thermal', 'tjb', 30.4)"
                ],
                "help": "Device tjb.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: thermal junction to bottom model",
                "switch": [
                    "-datasheet_thermal_tjb '<float>'"
                ],
                "type": "float",
                "unit": "C/W"
            },
            "tjt": {
                "example": [
                    "cli: -datasheet_thermal_tjt '30.4'",
                    "api: chip.set('datasheet', 'thermal', 'tjt', 30.4)"
                ],
                "help": "Device tjt.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Datasheet: thermal junction to top model",
                "switch": [
                    "-datasheet_thermal_tjt '<float>'"
                ],
                "type": "float",
                "unit": "C/W"
            }
        }
    },
    "design": {
        "example": [
            "cli: -design hello_world",
            "api: chip.set('design', 'hello_world')"
        ],
        "help": "Name of the top level module or library. Required for all\nchip objects.",
        "lock": false,
        "node": {
            "default": {
                "default": {
                    "signature": null,
                    "value": null
                }
            }
        },
        "notes": null,
        "pernode": "never",
        "require": "all",
        "scope": "global",
        "shorthelp": "Design top module name",
        "switch": [
            "-design <str>"
        ],
        "type": "str"
    },
    "flowgraph": {
        "default": {
            "default": {
                "default": {
                    "args": {
                        "example": [
                            "cli: -flowgraph_args 'asicflow cts 0 0'",
                            "api: chip.add('flowgraph', 'asicflow', 'cts', '0', 'args', '0')"
                        ],
                        "help": "User specified flowgraph string arguments specified on a per\nstep and per index basis.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: setup arguments",
                        "switch": [
                            "-flowgraph_args 'flow step index <str>'"
                        ],
                        "type": "[str]"
                    },
                    "goal": {
                        "default": {
                            "example": [
                                "cli: -flowgraph_goal 'asicflow cts 0 area_cells 1.0'",
                                "api: chip.set('flowgraph', 'asicflow', 'cts', '0', 'goal', 'errors', 0)"
                            ],
                            "help": "Goals specified on a per step and per metric basis used to\ndetermine whether a certain task can be considered when merging\nmultiple tasks at a minimum or maximum node. A task is considered\nfailing if the absolute value of any of its metrics are larger than\nthe goal for that metric, if set.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Flowgraph: metric goals",
                            "switch": [
                                "-flowgraph_goal 'flow step index metric <float>'"
                            ],
                            "type": "float"
                        }
                    },
                    "input": {
                        "example": [
                            "cli: -flowgraph_input 'asicflow cts 0 (place,0)'",
                            "api: chip.set('flowgraph', 'asicflow', 'cts', '0', 'input', ('place', '0'))"
                        ],
                        "help": "A list of inputs for the current step and index, specified as a\n(step, index) tuple.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: step input",
                        "switch": [
                            "-flowgraph_input 'flow step index <(str,str)>'"
                        ],
                        "type": "[(str,str)]"
                    },
                    "select": {
                        "example": [
                            "cli: -flowgraph_select 'asicflow cts 0 (place,42)'",
                            "api: chip.set('flowgraph', 'asicflow', 'cts', '0', 'select', ('place', '42'))"
                        ],
                        "help": "List of selected inputs for the current step/index specified as\n(in_step, in_index) tuple.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: task select record",
                        "switch": [
                            "-flowgraph_select 'flow step index <(str,str)>'"
                        ],
                        "type": "[(str,str)]"
                    },
                    "status": {
                        "enum": [
                            "pending",
                            "success",
                            "error"
                        ],
                        "example": [
                            "cli: -flowgraph_status 'asicflow cts 10 success'",
                            "api: chip.set('flowgraph', 'asicflow', 'cts', '10', 'status', 'success')"
                        ],
                        "help": "Parameter that tracks the status of a task. Valid values are:\n\n* \"success\": task ran successfully\n* \"error\": task failed with an error\n\nAn empty value indicates the task has not yet been completed.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: task status",
                        "switch": [
                            "-flowgraph_status 'flow step index <str>'"
                        ],
                        "type": "enum"
                    },
                    "task": {
                        "example": [
                            "cli: -flowgraph_task 'asicflow myplace 0 place'",
                            "api: chip.set('flowgraph', 'asicflow', 'myplace', '0', 'task', 'place')"
                        ],
                        "help": "Name of the tool associated task used for step execution. Builtin\ntask names include: minimum, maximum, join, verify, mux.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: task selection",
                        "switch": [
                            "-flowgraph_task 'flow step <str>'"
                        ],
                        "type": "str"
                    },
                    "taskmodule": {
                        "example": [
                            "cli: -flowgraph_taskmodule 'asicflow place 0 siliconcompiler.tools.openroad.place'",
                            "api: chip.set('flowgraph', 'asicflow', 'place', '0', 'taskmodule', 'siliconcompiler.tools.openroad.place')"
                        ],
                        "help": "Full python module name of the task module used for task setup and execution.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: task module",
                        "switch": [
                            "-flowgraph_taskmodule 'flow step <str>'"
                        ],
                        "type": "str"
                    },
                    "timeout": {
                        "example": [
                            "cli: -flowgraph_timeout 'asicflow cts 0 3600'",
                            "api: chip.set('flowgraph', 'asicflow', 'cts', '0', 'timeout', 3600)"
                        ],
                        "help": "Timeout value in seconds specified on a per step and per index\nbasis. The flowgraph timeout value is compared against the\nwall time tracked by the SC runtime to determine if an\noperation should continue. Timeout values help in situations\nwhere 1.) an operation is stuck and may never finish. 2.) the\noperation progress has saturated and continued execution has\na negative return on investment.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: task timeout value",
                        "switch": [
                            "-flowgraph_timeout 'flow step 0 <float>'"
                        ],
                        "type": "float",
                        "unit": "s"
                    },
                    "tool": {
                        "example": [
                            "cli: -flowgraph_tool 'asicflow place 0 openroad'",
                            "api: chip.set('flowgraph', 'asicflow', 'place', '0', 'tool', 'openroad')"
                        ],
                        "help": "Name of the tool name used for task execution. The 'tool' parameter\nis ignored for builtin tasks.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Flowgraph: tool selection",
                        "switch": [
                            "-flowgraph_tool 'flow step <str>'"
                        ],
                        "type": "str"
                    },
                    "valid": {
                        "example": [
                            "cli: -flowgraph_valid 'asicflow cts 0 true'",
                            "api: chip.set('flowgraph', 'asicflow', 'cts', '0', 'valid', True)"
                        ],
                        "help": "Flowgraph valid bit specified on a per step and per index basis.\nThe parameter can be used to control flow execution. If the bit\nis cleared (0), then the step/index combination is invalid and\nshould not be run.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": false
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Flowgraph: task valid bit",
                        "switch": [
                            "-flowgraph_valid 'flow step index <str>'"
                        ],
                        "type": "bool"
                    },
                    "weight": {
                        "default": {
                            "example": [
                                "cli: -flowgraph_weight 'asicflow cts 0 area_cells 1.0'",
                                "api: chip.set('flowgraph', 'asicflow', 'cts', '0', 'weight', 'area_cells', 1.0)"
                            ],
                            "help": "Weights specified on a per step and per metric basis used to give\neffective \"goodness\" score for a step by calculating the sum all step\nreal metrics results by the corresponding per step weights.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Flowgraph: metric weights",
                            "switch": [
                                "-flowgraph_weight 'flow step index metric <float>'"
                            ],
                            "type": "float"
                        }
                    }
                }
            }
        }
    },
    "fpga": {
        "board": {
            "example": [
                "cli: -fpga_board parallella",
                "api: chip.set('fpga', 'board', 'parallella')"
            ],
            "help": "Complete board name used as a device target by the FPGA compilation\ntool. The board name must be an exact string match to the partname\nhard coded within the FPGA EDA tool. The parameter is optional and can\nbe used in place of a partname and pin constraints for some tools.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "FPGA: board name",
            "switch": [
                "-fpga_board <str>"
            ],
            "type": "str"
        },
        "default": {
            "file": {
                "default": {
                    "copy": false,
                    "example": [
                        "cli: -fpga_file 'fpga64k file archfile my_arch.xml'",
                        "api: chip.set('fpga', 'fpga64k', 'file', 'archfile', 'my_arch.xml')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Specify a file for the FPGA partname.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "FPGA: file",
                    "switch": [
                        "-fpga_file 'partname key <str>'"
                    ],
                    "type": "[file]"
                }
            },
            "lutsize": {
                "example": [
                    "cli: -fpga_lutsize 'fpga64k 4'",
                    "api: chip.set('fpga', 'fpga64k', 'lutsize', '4')"
                ],
                "help": "Specify the number of inputs in each lookup table (LUT) for the\nFPGA partname.  For architectures with fracturable LUTs, this is\nthe number of inputs of the unfractured LUT.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "FPGA: lutsize",
                "switch": [
                    "-fpga_lutsize 'partname <int>'"
                ],
                "type": "int"
            },
            "var": {
                "default": {
                    "example": [
                        "cli: -fpga_var 'fpga64k channelwidth 100'",
                        "api: chip.set('fpga', 'fpga64k', 'var', 'channelwidth', '100')"
                    ],
                    "help": "Specify a variable value for the FPGA partname.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "FPGA: var",
                    "switch": [
                        "-fpga_var 'partname key <str>'"
                    ],
                    "type": "[str]"
                }
            },
            "vendor": {
                "example": [
                    "cli: -fpga_vendor 'fpga64k acme'",
                    "api: chip.set('fpga', 'fpga64k', 'vendor', 'acme')"
                ],
                "help": "Name of the FPGA vendor for the FPGA partname.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "FPGA: vendor name",
                "switch": [
                    "-fpga_vendor '<str>'"
                ],
                "type": "str"
            }
        },
        "flash": {
            "example": [
                "cli: -fpga_flash",
                "api: chip.set('fpga', 'flash', True)"
            ],
            "help": "Specifies that the bitstream should be flashed in the board/device.\nThe default is to load the bitstream into volatile memory (SRAM).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "FPGA: flash enable",
            "switch": [
                "-fpga_flash <bool>"
            ],
            "type": "bool"
        },
        "partname": {
            "example": [
                "cli: -fpga_partname fpga64k",
                "api: chip.set('fpga', 'partname', 'fpga64k')"
            ],
            "help": "Complete part name used as a device target by the FPGA compilation\ntool. The part name must be an exact string match to the partname\nhard coded within the FPGA EDA tool.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "fpga",
            "scope": "job",
            "shorthelp": "FPGA: part name",
            "switch": [
                "-fpga_partname <str>"
            ],
            "type": "str"
        },
        "program": {
            "example": [
                "cli: -fpga_program",
                "api: chip.set('fpga', 'program', True)"
            ],
            "help": "Specifies that the bitstream should be loaded into an FPGA.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "FPGA: program enable",
            "switch": [
                "-fpga_program <bool>"
            ],
            "type": "bool"
        }
    },
    "history": {},
    "input": {
        "default": {
            "default": {
                "copy": true,
                "example": [
                    "cli: -input 'rtl verilog hello_world.v'",
                    "api: chip.set('input', 'rtl', 'verilog', 'hello_world.v')"
                ],
                "hashalgo": "sha256",
                "help": "List of files of type ('filetype') grouped as a named set ('fileset').\nThe exact names of filetypes and filesets must match the string names\nused by the tasks called during flowgraph execution. By convention,\nthe fileset names should match the the name of the flowgraph being\nexecuted.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Input: files",
                "switch": [
                    "-input 'fileset filetype <file>'"
                ],
                "type": "[file]"
            }
        }
    },
    "library": {},
    "metric": {
        "averagepower": {
            "example": [
                "cli: -metric_averagepower 'place 0 0.01'",
                "api: chip.set('metric', 'averagepower', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the average workload power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power averagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: averagepower",
            "switch": [
                "-metric_averagepower 'step index <float>'"
            ],
            "type": "float",
            "unit": "mw"
        },
        "brams": {
            "example": [
                "cli: -metric_brams 'place 0 100'",
                "api: chip.set('metric', 'brams', 100, step='place', index=0)"
            ],
            "help": "Metric tracking the total FPGA BRAM tiles used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: FPGA BRAM tiles",
            "switch": [
                "-metric_brams 'step index <int>'"
            ],
            "type": "int"
        },
        "buffers": {
            "example": [
                "cli: -metric_buffers 'place 0 100'",
                "api: chip.set('metric', 'buffers', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of buffer and inverter instances in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: buffers",
            "switch": [
                "-metric_buffers 'step index <float>'"
            ],
            "type": "int"
        },
        "cellarea": {
            "example": [
                "cli: -metric_cellarea 'place 0 100.00'",
                "api: chip.set('metric', 'cellarea', 100.00, step='place', index=0)"
            ],
            "help": "Metric tracking the total cell area (ignoring fillers) occupied by the design.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: cellarea",
            "switch": [
                "-metric_cellarea 'step index <float>'"
            ],
            "type": "float",
            "unit": "um^2"
        },
        "cells": {
            "example": [
                "cli: -metric_cells 'place 0 100'",
                "api: chip.set('metric', 'cells', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of cell instances in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: cells",
            "switch": [
                "-metric_cells 'step index <float>'"
            ],
            "type": "int"
        },
        "coverage": {
            "example": [
                "cli: -metric_coverage 'place 0 99.9'",
                "api: chip.set('metric', 'coverage', 99.9, step='place', index=0)"
            ],
            "help": "Metric tracking the test coverage in the design expressed as a percentage\nwith 100 meaning full coverage. The meaning of the metric depends on the\ntask being executed. It can refer to code coverage, feature coverage,\nstuck at fault coverage.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: coverage",
            "switch": [
                "-metric_coverage 'step index <float>'"
            ],
            "type": "float",
            "unit": "%"
        },
        "dozepower": {
            "example": [
                "cli: -metric_dozepower 'place 0 0.01'",
                "api: chip.set('metric', 'dozepower', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the power consumed while in low frequency operating mode of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power dozepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: dozepower",
            "switch": [
                "-metric_dozepower 'step index <float>'"
            ],
            "type": "float",
            "unit": "mw"
        },
        "drvs": {
            "example": [
                "cli: -metric_drvs 'dfm 0 0'",
                "api: chip.set('metric', 'drvs', 0, step='dfm', index=0)"
            ],
            "help": "Metric tracking the total number of design rule violations on a\nper step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: total drvs",
            "switch": [
                "-metric_drvs 'step index <int>'"
            ],
            "type": "int"
        },
        "dsps": {
            "example": [
                "cli: -metric_dsps 'place 0 100'",
                "api: chip.set('metric', 'dsps', 100, step='place', index=0)"
            ],
            "help": "Metric tracking the total FPGA DSP slices used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: FPGA DSP slices",
            "switch": [
                "-metric_dsps 'step index <int>'"
            ],
            "type": "int"
        },
        "errors": {
            "example": [
                "cli: -metric_errors 'dfm 0 0'",
                "api: chip.set('metric', 'errors', 0, step='dfm', index=0)"
            ],
            "help": "Metric tracking the total number of errors on a\nper step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: total errors",
            "switch": [
                "-metric_errors 'step index <int>'"
            ],
            "type": "int"
        },
        "exetime": {
            "example": [
                "cli: -metric_exetime 'dfm 0 10.0'",
                "api: chip.set('metric', 'exetime', 10.0, step='dfm', index=0)"
            ],
            "help": "Metric tracking time spent by the EDA executable 'exe' on a\nper step and index basis. It does not include the SiliconCompiler\nruntime overhead or time waiting for I/O operations and\ninter-processor communication to complete.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: exetime",
            "switch": [
                "-metric_exetime 'step index <float>'"
            ],
            "type": "float",
            "unit": "s"
        },
        "fmax": {
            "example": [
                "cli: -metric_fmax 'place 0 100e6'",
                "api: chip.set('metric', 'fmax', 100e6, step='place', index=0)"
            ],
            "help": "Metric tracking the maximum clock frequency on a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: fmax",
            "switch": [
                "-metric_fmax 'step index <float>'"
            ],
            "type": "float",
            "unit": "Hz"
        },
        "holdpaths": {
            "example": [
                "cli: -metric_holdpaths 'place 0 10'",
                "api: chip.set('metric', 'holdpaths', 10, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of timing paths violating hold\nconstraints.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: holdpaths",
            "switch": [
                "-metric_holdpaths 'step index <float>'"
            ],
            "type": "int"
        },
        "holdslack": {
            "example": [
                "cli: -metric_holdslack 'place 0 0.01'",
                "api: chip.set('metric', 'holdslack', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the worst hold slack (positive or negative) on a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: holdslack",
            "switch": [
                "-metric_holdslack 'step index <float>'"
            ],
            "type": "float",
            "unit": "ns"
        },
        "holdtns": {
            "example": [
                "cli: -metric_holdtns 'place 0 0.01'",
                "api: chip.set('metric', 'holdtns', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the total negative hold slack (TNS) on a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: holdtns",
            "switch": [
                "-metric_holdtns 'step index <float>'"
            ],
            "type": "float",
            "unit": "ns"
        },
        "holdwns": {
            "example": [
                "cli: -metric_holdwns 'place 0 0.01'",
                "api: chip.set('metric', 'holdwns', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the worst negative hold slack (positive values truncated to zero) on a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: holdwns",
            "switch": [
                "-metric_holdwns 'step index <float>'"
            ],
            "type": "float",
            "unit": "ns"
        },
        "idlepower": {
            "example": [
                "cli: -metric_idlepower 'place 0 0.01'",
                "api: chip.set('metric', 'idlepower', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the power while not performing useful work of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power idlepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: idlepower",
            "switch": [
                "-metric_idlepower 'step index <float>'"
            ],
            "type": "float",
            "unit": "mw"
        },
        "irdrop": {
            "example": [
                "cli: -metric_irdrop 'place 0 0.05'",
                "api: chip.set('metric', 'irdrop', 0.05, step='place', index=0)"
            ],
            "help": "Metric tracking the peak IR drop in the design based on extracted\npower and ground rail parasitics, library power models, and\nswitching activity. The switching activity calculated on a per\nnode basis is taken from one of three possible sources, in order\nof priority: VCD file, SAIF file, 'activityfactor' parameter.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: peak IR drop",
            "switch": [
                "-metric_irdrop 'step index <float>'"
            ],
            "type": "float",
            "unit": "mv"
        },
        "leakagepower": {
            "example": [
                "cli: -metric_leakagepower 'place 0 0.01'",
                "api: chip.set('metric', 'leakagepower', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the leakage power with rails active but without any dynamic switching activity of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power leakagepower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: leakagepower",
            "switch": [
                "-metric_leakagepower 'step index <float>'"
            ],
            "type": "float",
            "unit": "mw"
        },
        "luts": {
            "example": [
                "cli: -metric_luts 'place 0 100'",
                "api: chip.set('metric', 'luts', 100, step='place', index=0)"
            ],
            "help": "Metric tracking the total FPGA LUTs used by the design as reported\nby the implementation tool. There is no standardized definition\nfor this metric across vendors, so metric comparisons can\ngenerally only be done between runs on identical tools and\ndevice families.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: FPGA LUTs",
            "switch": [
                "-metric_luts 'step index <int>'"
            ],
            "type": "int"
        },
        "macros": {
            "example": [
                "cli: -metric_macros 'place 0 100'",
                "api: chip.set('metric', 'macros', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of macros in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: macros",
            "switch": [
                "-metric_macros 'step index <float>'"
            ],
            "type": "int"
        },
        "memory": {
            "example": [
                "cli: -metric_memory 'dfm 0 10e9'",
                "api: chip.set('metric', 'memory', 10e9, step='dfm', index=0)"
            ],
            "help": "Metric tracking total peak program memory footprint on a per\nstep and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: memory",
            "switch": [
                "-metric_memory 'step index <float>'"
            ],
            "type": "float",
            "unit": "B"
        },
        "nets": {
            "example": [
                "cli: -metric_nets 'place 0 100'",
                "api: chip.set('metric', 'nets', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of nets in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: nets",
            "switch": [
                "-metric_nets 'step index <float>'"
            ],
            "type": "int"
        },
        "overflow": {
            "example": [
                "cli: -metric_overflow 'place 0 0'",
                "api: chip.set('metric', 'overflow', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of overflow tracks for the routing\non per step and index basis. Any non-zero number suggests an over\ncongested design. To analyze where the congestion is occurring\ninspect the router log files for detailed per metal overflow\nreporting and open up the design to find routing hotspots.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: overflow",
            "switch": [
                "-metric_overflow 'step index <float>'"
            ],
            "type": "int"
        },
        "peakpower": {
            "example": [
                "cli: -metric_peakpower 'place 0 0.01'",
                "api: chip.set('metric', 'peakpower', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the worst case total peak power of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power peakpower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: peakpower",
            "switch": [
                "-metric_peakpower 'step index <float>'"
            ],
            "type": "float",
            "unit": "mw"
        },
        "pins": {
            "example": [
                "cli: -metric_pins 'place 0 100'",
                "api: chip.set('metric', 'pins', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of pins in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: pins",
            "switch": [
                "-metric_pins 'step index <float>'"
            ],
            "type": "int"
        },
        "registers": {
            "example": [
                "cli: -metric_registers 'place 0 100'",
                "api: chip.set('metric', 'registers', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of register instances in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: registers",
            "switch": [
                "-metric_registers 'step index <float>'"
            ],
            "type": "int"
        },
        "security": {
            "example": [
                "cli: -metric_security 'place 0 100'",
                "api: chip.set('metric', 'security', 100, step='place', index=0)"
            ],
            "help": "Metric tracking the level of security (1/vulnerability) of the design.\nA completely secure design would have a score of 100. There is no\nabsolute scale for the security metrics (like with power, area, etc)\nso the metric will be task and tool dependent.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: security",
            "switch": [
                "-metric_security 'step index <float>'"
            ],
            "type": "float",
            "unit": "%"
        },
        "setuppaths": {
            "example": [
                "cli: -metric_setuppaths 'place 0 10'",
                "api: chip.set('metric', 'setuppaths', 10, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of timing paths violating setup\nconstraints.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: setuppaths",
            "switch": [
                "-metric_setuppaths 'step index <float>'"
            ],
            "type": "int"
        },
        "setupslack": {
            "example": [
                "cli: -metric_setupslack 'place 0 0.01'",
                "api: chip.set('metric', 'setupslack', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the worst setup slack (positive or negative) on a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: setupslack",
            "switch": [
                "-metric_setupslack 'step index <float>'"
            ],
            "type": "float",
            "unit": "ns"
        },
        "setuptns": {
            "example": [
                "cli: -metric_setuptns 'place 0 0.01'",
                "api: chip.set('metric', 'setuptns', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the total negative setup slack (TNS) on a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: setuptns",
            "switch": [
                "-metric_setuptns 'step index <float>'"
            ],
            "type": "float",
            "unit": "ns"
        },
        "setupwns": {
            "example": [
                "cli: -metric_setupwns 'place 0 0.01'",
                "api: chip.set('metric', 'setupwns', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the worst negative setup slack (positive values truncated to zero) on a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: setupwns",
            "switch": [
                "-metric_setupwns 'step index <float>'"
            ],
            "type": "float",
            "unit": "ns"
        },
        "sleeppower": {
            "example": [
                "cli: -metric_sleeppower 'place 0 0.01'",
                "api: chip.set('metric', 'sleeppower', 0.01, step='place', index=0)"
            ],
            "help": "Metric tracking the power consumed with some or all power rails gated off of the design specified on a per step\nand index basis. Power metric depend heavily on the method\nbeing used for extraction: dynamic vs static, workload\nspecification (vcd vs saif), power models, process/voltage/temperature.\nThe power sleeppower metric tries to capture the data that would\nusually be reflected inside a datasheet given the appropriate\nfootnote conditions.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: sleeppower",
            "switch": [
                "-metric_sleeppower 'step index <float>'"
            ],
            "type": "float",
            "unit": "mw"
        },
        "tasktime": {
            "example": [
                "cli: -metric_tasktime 'dfm 0 10.0'",
                "api: chip.set('metric', 'tasktime', 10.0, step='dfm', index=0)"
            ],
            "help": "Metric tracking the total amount of time spent on a task from\nbeginning to end, including data transfers and pre/post\nprocessing.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: tasktime",
            "switch": [
                "-metric_tasktime 'step index <float>'"
            ],
            "type": "float",
            "unit": "s"
        },
        "totalarea": {
            "example": [
                "cli: -metric_totalarea 'place 0 100.00'",
                "api: chip.set('metric', 'totalarea', 100.00, step='place', index=0)"
            ],
            "help": "Metric tracking the total physical die area occupied by the design.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: totalarea",
            "switch": [
                "-metric_totalarea 'step index <float>'"
            ],
            "type": "float",
            "unit": "um^2"
        },
        "totaltime": {
            "example": [
                "cli: -metric_totaltime 'dfm 0 10.0'",
                "api: chip.set('metric', 'totaltime', 10.0, step='dfm', index=0)"
            ],
            "help": "Metric tracking the total amount of time spent from the beginning\nof the run up to and including the current step and index.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: totaltime",
            "switch": [
                "-metric_totaltime 'step index <float>'"
            ],
            "type": "float",
            "unit": "s"
        },
        "transistors": {
            "example": [
                "cli: -metric_transistors 'place 0 100'",
                "api: chip.set('metric', 'transistors', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of transistors in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: transistors",
            "switch": [
                "-metric_transistors 'step index <float>'"
            ],
            "type": "int"
        },
        "unconstrained": {
            "example": [
                "cli: -metric_unconstrained 'dfm 0 0'",
                "api: chip.set('metric', 'unconstrained', 0, step='dfm', index=0)"
            ],
            "help": "Metric tracking the total number of unconstrained timing paths on a\nper step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: total unconstrained",
            "switch": [
                "-metric_unconstrained 'step index <int>'"
            ],
            "type": "int"
        },
        "utilization": {
            "example": [
                "cli: -metric_utilization 'place 0 50.00'",
                "api: chip.set('metric', 'utilization', 50.00, step='place', index=0)"
            ],
            "help": "Metric tracking the area utilization of the design calculated as\n100 * (cellarea/totalarea).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: area utilization",
            "switch": [
                "-metric_utilization step index <float>"
            ],
            "type": "float",
            "unit": "%"
        },
        "vias": {
            "example": [
                "cli: -metric_vias 'place 0 100'",
                "api: chip.set('metric', 'vias', 50, step='place', index=0)"
            ],
            "help": "Metric tracking the total number of vias in the design\non a per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: vias",
            "switch": [
                "-metric_vias 'step index <float>'"
            ],
            "type": "int"
        },
        "warnings": {
            "example": [
                "cli: -metric_warnings 'dfm 0 0'",
                "api: chip.set('metric', 'warnings', 0, step='dfm', index=0)"
            ],
            "help": "Metric tracking the total number of warnings on a\nper step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: total warnings",
            "switch": [
                "-metric_warnings 'step index <int>'"
            ],
            "type": "int"
        },
        "wirelength": {
            "example": [
                "cli: -metric_wirelength 'place 0 100.0'",
                "api: chip.set('metric', 'wirelength', 50.0, step='place', index=0)"
            ],
            "help": "Metric tracking the total wirelength of the design on a per step\nand index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric: wirelength",
            "switch": [
                "-metric_wirelength 'step index <float>'"
            ],
            "type": "float",
            "unit": "um"
        }
    },
    "option": {
        "autoinstall": {
            "example": [
                "cli: -autoinstall true",
                "api: chip.set('option', 'autoinstall', True)"
            ],
            "help": "Enables automatic installation of missing dependencies from\nthe registry.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Option: auto install packages",
            "switch": [
                "-autoinstall <bool>"
            ],
            "type": "bool"
        },
        "breakpoint": {
            "example": [
                "cli: -breakpoint true",
                "api: chip.set('option, 'breakpoint', True)"
            ],
            "help": "Set a breakpoint on specific steps. If the step is a TCL\nbased tool, then the breakpoints stops the flow inside the\nEDA tool. If the step is a command line tool, then the flow\ndrops into a Python interpreter.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Breakpoint list",
            "switch": [
                "-breakpoint <bool>"
            ],
            "type": "bool"
        },
        "builddir": {
            "copy": false,
            "example": [
                "cli: -builddir ./build_the_future",
                "api: chip.set('option', 'builddir', './build_the_future')"
            ],
            "help": "The default build directory is in the local './build' where SC was\nexecuted. The 'builddir' parameter can be used to set an alternate\ncompilation directory path.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "build"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Build directory",
            "switch": [
                "-builddir <dir>"
            ],
            "type": "dir"
        },
        "cfg": {
            "copy": false,
            "example": [
                "cli: -cfg mypdk.json",
                "api: chip.set('option', 'cfg', 'mypdk.json')"
            ],
            "hashalgo": "sha256",
            "help": "List of filepaths to JSON formatted schema configuration\nmanifests. The files are read in automatically when using the\n'sc' command line application. In Python programs, JSON manifests\ncan be merged into the current working manifest using the\nread_manifest() method.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "author": [],
                        "date": [],
                        "filehash": [],
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Configuration manifest",
            "switch": [
                "-cfg <file>"
            ],
            "type": "[file]"
        },
        "clean": {
            "example": [
                "cli: -clean",
                "api: chip.set('option', 'clean', True)"
            ],
            "help": "Clean up all intermediate and non essential files at the end\nof a task, leaving the following:\n\n* log file\n* replay.sh\n* inputs/\n* outputs/\n* reports/\n* autogenerated manifests\n* any files generated by schema-specified regexes\n* files specified by :keypath:`tool, <tool>, task, <task>, keep`",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Clean up after run",
            "switch": [
                "-clean <bool>"
            ],
            "type": "bool"
        },
        "cmdfile": {
            "copy": false,
            "example": [
                "cli: -f design.f",
                "api: chip.set('option', 'cmdfile', 'design.f')"
            ],
            "hashalgo": "sha256",
            "help": "Read the specified file, and act as if all text inside it was specified\nas command line parameters. Supported by most verilog simulators\nincluding Icarus and Verilator. The format of the file is not strongly\nstandardized. Support for comments and environment variables within\nthe file varies and depends on the tool used. SC simply passes on\nthe filepath to the tool executable.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "author": [],
                        "date": [],
                        "filehash": [],
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Design compilation command file",
            "switch": [
                "-f <file>"
            ],
            "type": "[file]"
        },
        "continue": {
            "example": [
                "cli: -continue",
                "api: chip.set('option', 'continue', True)"
            ],
            "help": "Attempt to continue even when errors are encountered in the SC\nimplementation. If errors are encountered, execution will halt\nbefore a run.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Implementation continue-on-error",
            "switch": [
                "-continue"
            ],
            "type": "bool"
        },
        "copyall": {
            "example": [
                "cli: -copyall",
                "api: chip.set('option', 'copyall', True)"
            ],
            "help": "Specifies that all used files should be copied into the\nbuild directory, overriding the per schema entry copy\nsettings.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Copy all inputs to build directory",
            "switch": [
                "-copyall <bool>"
            ],
            "type": "bool"
        },
        "credentials": {
            "copy": false,
            "example": [
                "cli: -credentials /home/user/.sc/credentials",
                "api: chip.set('option', 'credentials', '/home/user/.sc/credentials')"
            ],
            "hashalgo": "sha256",
            "help": "Filepath to credentials used for remote processing. If the\ncredentials parameter is empty, the remote processing client program\ntries to access the \".sc/credentials\" file in the user's home\ndirectory. The file supports the following fields:\n\naddress=<server address>\n\nport=<server port> (optional)\n\nusername=<user id> (optional)\n\npassword=<password / key used for authentication> (optional)",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "author": [],
                        "date": [],
                        "filehash": [],
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "User credentials file",
            "switch": [
                "-credentials <file>"
            ],
            "type": "file"
        },
        "define": {
            "example": [
                "cli: -DCFG_ASIC=1",
                "api: chip.set('option', 'define', 'CFG_ASIC=1')"
            ],
            "help": "Symbol definition for source preprocessor.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Design pre-processor symbol",
            "switch": [
                "-D<str>"
            ],
            "type": "[str]"
        },
        "dir": {
            "default": {
                "copy": false,
                "example": [
                    "cli: -dir 'openroad_tapcell ./tapcell.tcl'",
                    "api: chip.set('option', 'dir', 'openroad_files', './openroad_support/')"
                ],
                "help": "List of named directories specified. Certain tools and\nreference flows require special parameters, this\nparameter should only be used for specifying directories that are\nnot directly supported by the schema.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Custom directories",
                "switch": [
                    "-dir 'key <str>'"
                ],
                "type": "[dir]"
            }
        },
        "entrypoint": {
            "example": [
                "cli: -entrypoint top",
                "api: chip.set('option', 'entrypoint', 'top')"
            ],
            "help": "Alternative entrypoint for compilation and\nsimulation. The default entry point is 'design'.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Program entry point",
            "switch": [
                "-entrypoint <str>"
            ],
            "type": "str"
        },
        "env": {
            "default": {
                "example": [
                    "cli: -env 'PDK_HOME /disk/mypdk'",
                    "api: chip.set('option', 'env', 'PDK_HOME', '/disk/mypdk')"
                ],
                "help": "Certain tools and reference flows require global environment\nvariables to be set. These variables can be managed externally or\nspecified through the env variable.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Environment variables",
                "switch": [
                    "-env 'key <str>'"
                ],
                "type": "str"
            }
        },
        "file": {
            "default": {
                "copy": false,
                "example": [
                    "cli: -file 'openroad_tapcell ./tapcell.tcl'",
                    "api: chip.set('option', 'file', 'openroad_tapcell', './tapcell.tcl')"
                ],
                "hashalgo": "sha256",
                "help": "List of named files specified. Certain tools and\nreference flows require special parameters, this\nparameter should only be used for specifying files that are\nnot directly supported by the schema.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Custom files",
                "switch": [
                    "-file 'key <str>'"
                ],
                "type": "[file]"
            }
        },
        "flow": {
            "example": [
                "cli: -flow asicflow",
                "api: chip.set('option', 'flow', 'asicflow')"
            ],
            "help": "Sets the flow for the current run. The flow name\nmust match up with a 'flow' in the flowgraph",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Flow target",
            "switch": [
                "-flow <str>"
            ],
            "type": "str"
        },
        "flowcontinue": {
            "example": [
                "cli: -flowcontinue",
                "api: chip.set('option', 'flowcontinue', True)"
            ],
            "help": "Continue executing flow after a tool logs errors. The default\nbehavior is to quit executing the flow if a task ends and the errors\nmetric is greater than 0. Note that the flow will always cease\nexecuting if the tool returns a nonzero status code.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Flow continue-on-error",
            "switch": [
                "-flowcontinue"
            ],
            "type": "bool"
        },
        "frontend": {
            "example": [
                "cli: -frontend systemverilog",
                "api: chip.set('option', 'frontend', 'systemverilog')"
            ],
            "help": "Specifies the frontend that flows should use for importing and\nprocessing source files. Default option is 'verilog', also supports\n'systemverilog' and 'chisel'. When using the Python API, this parameter\nmust be configured before calling load_target().",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "verilog"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Compilation frontend",
            "switch": [
                "-frontend <frontend>"
            ],
            "type": "str"
        },
        "hash": {
            "example": [
                "cli: -hash",
                "api: chip.set('option', 'hash', True)"
            ],
            "help": "Enables hashing of all inputs and outputs during\ncompilation. The hash values are stored in the hashvalue\nfield of the individual parameters.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Enable file hashing",
            "switch": [
                "-hash <bool>"
            ],
            "type": "bool"
        },
        "idir": {
            "copy": false,
            "example": [
                "cli: +incdir+./mylib",
                "api: chip.set('option', 'idir', './mylib')"
            ],
            "help": "Search paths to look for files included in the design using\nthe ```include`` statement.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Design search paths",
            "switch": [
                "+incdir+<dir>",
                "-I <dir>"
            ],
            "type": "[dir]"
        },
        "indexlist": {
            "example": [
                "cli: -indexlist 0",
                "api: chip.set('option', 'indexlist', '0')"
            ],
            "help": "List of indices to execute. The default is to execute all\nindices for each step of a run.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Compilation index list",
            "switch": [
                "-indexlist <index>"
            ],
            "type": "[str]"
        },
        "jobincr": {
            "example": [
                "cli: -jobincr",
                "api: chip.set('option', 'jobincr', True)"
            ],
            "help": "Forces an auto-update of the jobname parameter if a directory\nmatching the jobname is found in the build directory. If the\njobname does not include a trailing digit, then the number\n'1' is added to the jobname before updating the jobname\nparameter.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Autoincrement jobname",
            "switch": [
                "-jobincr <bool>"
            ],
            "type": "bool"
        },
        "jobinput": {
            "default": {
                "default": {
                    "example": [
                        "cli: -jobinput 'cts 0 job0'",
                        "api: chip.set('option', 'jobinput', 'cts, '0', 'job0')"
                    ],
                    "help": "Specifies jobname inputs for the current run() on a per step\nand per index basis. During execution, the default behavior is to\ncopy inputs from the current job.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Input job name",
                    "switch": [
                        "-jobinput 'step index <str>'"
                    ],
                    "type": "str"
                }
            }
        },
        "jobname": {
            "example": [
                "cli: -jobname may1",
                "api: chip.set('option', 'jobname', 'may1')"
            ],
            "help": "Jobname during invocation of run(). The jobname combined with a\ndefined director structure (<dir>/<design>/<jobname>/<step>/<index>)\nenables multiple levels of transparent job, step, and index\nintrospection.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "job0"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Job name",
            "switch": [
                "-jobname <str>"
            ],
            "type": "str"
        },
        "libext": {
            "example": [
                "cli: +libext+sv",
                "api: chip.set('option', 'libext', 'sv')"
            ],
            "help": "List of file extensions that should be used for finding modules.\nFor example, if -y is specified as ./lib\", and '.v' is specified as\nlibext then the files ./lib/\\*.v \", will be searched for\nmodule matches.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Design file extensions",
            "switch": [
                "+libext+<str>"
            ],
            "type": "[str]"
        },
        "loglevel": {
            "enum": [
                "NOTSET",
                "INFO",
                "DEBUG",
                "WARNING",
                "ERROR",
                "CRITICAL"
            ],
            "example": [
                "cli: -loglevel INFO",
                "api: chip.set('option', 'loglevel', 'INFO')"
            ],
            "help": "Provides explicit control over the level of debug logging printed.\nValid entries include INFO, DEBUG, WARNING, ERROR.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "INFO"
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "Logging level",
            "switch": [
                "-loglevel <str>"
            ],
            "type": "enum"
        },
        "metricoff": {
            "example": [
                "cli: -metricoff 'wirelength'",
                "api: chip.set('option', 'metricoff', 'wirelength')"
            ],
            "help": "List of metrics to suppress when printing out the run\nsummary.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Metric summary filter",
            "switch": [
                "-metricoff '<str>'"
            ],
            "type": "[str]"
        },
        "mode": {
            "enum": [
                "asic",
                "fpga",
                "sim"
            ],
            "example": [
                "cli: -mode asic",
                "api: chip.set('option', 'mode', 'asic')"
            ],
            "help": "Sets the operating mode of the compiler. Valid modes are:\nasic: RTL to GDS ASIC compilation\nfpga: RTL to bitstream FPGA compilation\nsim: simulation to verify design and compilation",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Compilation mode",
            "switch": [
                "-mode <str>"
            ],
            "type": "enum"
        },
        "nice": {
            "example": [
                "cli: -nice 5",
                "api: chip.set('option', 'nice', 5)"
            ],
            "help": "Sets the type of execution priority of each individual flowgraph steps.\nIf the parameter is undefined, nice will not be used. For more information see\n`Unix 'nice' <https://en.wikipedia.org/wiki/Nice_(Unix)>`_.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": null,
            "scope": "job",
            "shorthelp": "Tool execution scheduling priority",
            "switch": [
                "-nice <int>"
            ],
            "type": "int"
        },
        "nodisplay": {
            "example": [
                "cli: -nodisplay",
                "api: chip.set('option', 'nodisplay', True)"
            ],
            "help": "The '-nodisplay' flag prevents SiliconCompiler from\nopening GUI windows such as the final metrics report.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Headless execution",
            "switch": [
                "-nodisplay <bool>"
            ],
            "type": "bool"
        },
        "novercheck": {
            "example": [
                "cli: -novercheck",
                "api: chip.set('option', 'novercheck', True)"
            ],
            "help": "Disables strict version checking on all invoked tools if True.\nThe list of supported version numbers is defined in the\n'version' parameter in the 'tool' dictionary for each tool.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Disable version checking",
            "switch": [
                "-novercheck <bool>"
            ],
            "type": "bool"
        },
        "optmode": {
            "example": [
                "cli: -O3",
                "api: chip.set('option', 'optmode', 'O3')"
            ],
            "help": "The compiler has modes to prioritize run time and ppa. Modes\ninclude.\n\n(O0) = Exploration mode for debugging setup\n(O1) = Higher effort and better PPA than O0\n(O2) = Higher effort and better PPA than O1\n(O3) = Signoff quality. Better PPA and higher run times than O2\n(O4-O98) = Reserved (compiler/target dependent)\n(O99) = Experimental highest possible effort, may be unstable",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "O0"
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Optimization mode",
            "switch": [
                "-O<str>"
            ],
            "type": "str"
        },
        "param": {
            "default": {
                "example": [
                    "cli: -param 'N 64'",
                    "api: chip.set('option', 'param', 'N', '64')"
                ],
                "help": "Sets a top verilog level design module parameter. The value\nis limited to basic data literals. The parameter override is\npassed into tools such as Verilator and Yosys. The parameters\nsupport Verilog integer literals (64'h4, 2'b0, 4) and strings.\nName of the top level module to compile.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Design parameter",
                "switch": [
                    "-param 'name <str>'"
                ],
                "type": "str"
            }
        },
        "pdk": {
            "example": [
                "cli: -pdk freepdk45",
                "api: chip.set('option', 'pdk', 'freepdk45')"
            ],
            "help": "Target PDK used during compilation.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "PDK target",
            "switch": [
                "-pdk <str>"
            ],
            "type": "str"
        },
        "quiet": {
            "example": [
                "cli: -quiet",
                "api: chip.set('option', 'quiet', True)"
            ],
            "help": "The -quiet option forces all steps to print to a log file.\nThis can be useful with Modern EDA tools which print\nsignificant content to the screen.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Quiet execution",
            "switch": [
                "-quiet <bool>"
            ],
            "type": "bool"
        },
        "registry": {
            "copy": false,
            "example": [
                "cli: -registry '~/myregistry'",
                "api: chip.set('option', 'registry', '~/myregistry')"
            ],
            "help": "List of Silicon Unified Packager (SUP) registry directories.\nDirectories can be local file system folders or\npublicly available registries served up over http. The naming\nconvention for registry packages is:\n<name>/<name>-<version>.json(.<gz>)?",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Option: package registry",
            "switch": [
                "-registry <dir>"
            ],
            "type": "[dir]"
        },
        "relax": {
            "example": [
                "cli: -relax",
                "api: chip.set('option', 'relax', True)"
            ],
            "help": "Global option specifying that tools should be lenient and\nsuppress warnings that may or may not indicate real design\nissues. Extent of leniency is tool/task specific.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Relax design checking",
            "switch": [
                "-relax <bool>"
            ],
            "type": "bool"
        },
        "remote": {
            "example": [
                "cli: -remote",
                "api: chip.set('option', 'remote', True)"
            ],
            "help": "Sends job for remote processing if set to true. The remote\noption requires a credentials file to be placed in the home\ndirectory. Fore more information, see the credentials\nparameter.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Enable remote processing",
            "switch": [
                "-remote <bool>"
            ],
            "type": "bool"
        },
        "resume": {
            "example": [
                "cli: -resume",
                "api: chip.set('option', 'resume', True)"
            ],
            "help": "If results exist for current job, then don't re-run any steps that\nhad at least one index run successfully. Useful for debugging a\nflow that failed partway through.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Resume build",
            "switch": [
                "-resume <bool>"
            ],
            "type": "bool"
        },
        "scheduler": {
            "cores": {
                "example": [
                    "cli: -cores 48",
                    "api: chip.set('option', 'scheduler', 'cores', '48')"
                ],
                "help": "Specifies the number CPU cores required to run the job.\nFor the slurm scheduler, this translates to the '-c'\nswitch. For more information, see the job scheduler\ndocumentation",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Scheduler core constraint",
                "switch": [
                    "-cores <int>"
                ],
                "type": "int"
            },
            "defer": {
                "example": [
                    "cli: -defer 16:00",
                    "api: chip.set('option', 'scheduler', 'defer', '16:00')"
                ],
                "help": "Defer initiation of job until the specified time. The parameter\nis pass through string for remote job scheduler such as slurm.\nFor more information about the exact format specification, see\nthe job scheduler documentation. Examples of valid slurm specific\nvalues include: now+1hour, 16:00, 010-01-20T12:34:00. For more\ninformation, see the job scheduler documentation.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Scheduler start time",
                "switch": [
                    "-defer <str>"
                ],
                "type": "str"
            },
            "memory": {
                "example": [
                    "cli: -memory 8000",
                    "api: chip.set('option', 'scheduler', 'memory', '8000')"
                ],
                "help": "Specifies the amount of memory required to run the job,\nspecified in MB. For the slurm scheduler, this translates to\nthe '--mem' switch. For more information, see the job\nscheduler documentation",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Scheduler memory constraint",
                "switch": [
                    "-memory <str>"
                ],
                "type": "int",
                "unit": "MB"
            },
            "msgcontact": {
                "example": [
                    "cli: -msgcontact 'wile.e.coyote@acme.com'",
                    "api: chip.set('option', 'scheduler', 'msgcontact', 'wiley@acme.com')"
                ],
                "help": "List of email addresses to message on a 'msgevent'. Support for\nemail messages relies on job scheduler daemon support.\nFor more information, see the job scheduler documentation.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Message contact",
                "switch": [
                    "-msgcontact <str>"
                ],
                "type": "[str]"
            },
            "msgevent": {
                "example": [
                    "cli: -msgevent ALL",
                    "api: chip.set('option', 'scheduler', 'msgevent', 'ALL')"
                ],
                "help": "Directs job scheduler to send a message to the user when\ncertain events occur during a task. Supported data types for\nSLURM include NONE, BEGIN, END, FAIL, ALL, TIME_LIMIT. For a\nlist of supported event types, see the job scheduler\ndocumentation. For more information, see the job scheduler\ndocumentation.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": "NONE"
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Message event trigger",
                "switch": [
                    "-msgevent <str>"
                ],
                "type": "str"
            },
            "name": {
                "enum": [
                    "slurm",
                    "lsf",
                    "sge"
                ],
                "example": [
                    "cli: -scheduler slurm",
                    "api: chip.set('option', 'scheduler', 'name', 'slurm')"
                ],
                "help": "Sets the type of job scheduler to be used for each individual\nflowgraph steps. If the parameter is undefined, the steps are executed\non the same machine that the SC was launched on. If 'slurm' is used,\nthe host running the 'sc' command must be running a 'slurmctld' daemon\nmanaging a Slurm cluster. Additionally, the build directory ('-dir')\nmust be located in shared storage which can be accessed by all hosts\nin the cluster.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Scheduler platform",
                "switch": [
                    "-scheduler <str>"
                ],
                "type": "enum"
            },
            "options": {
                "example": [
                    "cli: -scheduler_options \"--pty\"",
                    "api: chip.set('option', 'scheduler', 'options', \"--pty\")"
                ],
                "help": "Advanced/export options passed through unchanged to the job\nscheduler as-is. (The user specified options must be compatible\nwith the rest of the scheduler parameters entered.(memory etc).\nFor more information, see the job scheduler documentation.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Scheduler arguments",
                "switch": [
                    "-scheduler_options <str>"
                ],
                "type": "[str]"
            },
            "queue": {
                "example": [
                    "cli: -queue nightrun",
                    "api: chip.set('option', 'scheduler', 'queue', 'nightrun')"
                ],
                "help": "Send the job to the specified queue. With slurm, this\ntranslates to 'partition'. The queue name must match\nthe name of an existing job scheduler queue. For more information,\nsee the job scheduler documentation",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Option: Scheduler queue",
                "switch": [
                    "-queue <str>"
                ],
                "type": "str"
            }
        },
        "scpath": {
            "copy": false,
            "example": [
                "cli: -scpath '/home/$USER/sclib'",
                "api: chip.set('option', 'scpath', '/home/$USER/sclib')"
            ],
            "help": "Specifies python modules paths for target import.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Search path",
            "switch": [
                "-scpath <dir>"
            ],
            "type": "[dir]"
        },
        "show": {
            "example": [
                "cli: -show",
                "api: chip.set('option', 'show', True)"
            ],
            "help": "Specifies that the final hardware layout should be\nshown after the compilation has been completed. The\nfinal layout and tool used to display the layout is\nflow dependent.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Show layout",
            "switch": [
                "-show <bool>"
            ],
            "type": "bool"
        },
        "showtool": {
            "default": {
                "example": [
                    "cli: -showtool 'gds klayout'",
                    "api: chip.set('option', 'showtool', 'gds', 'klayout')"
                ],
                "help": "Selects the tool to use by the show function for displaying\nthe specified filetype.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Select data display tool",
                "switch": [
                    "-showtool 'filetype <tool>'"
                ],
                "type": "str"
            }
        },
        "skipall": {
            "example": [
                "cli: -skipall",
                "api: chip.set('option', 'skipall', True)"
            ],
            "help": "Skips the execution of all tools in run(), enabling a quick\ncheck of tool and setup without having to run through each\nstep of a flow to completion.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Skip all tasks",
            "switch": [
                "-skipall <bool>"
            ],
            "type": "bool"
        },
        "skipcheck": {
            "example": [
                "cli: -skipcheck",
                "api: chip.set('option', 'skipcheck', True)"
            ],
            "help": "Bypasses the strict runtime manifest check. Can be used for\naccelerating initial bringup of tool/flow/pdk/libs targets.\nThe flag should not be used for production compilation.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Skip manifest check",
            "switch": [
                "-skipcheck <bool>"
            ],
            "type": "bool"
        },
        "skipstep": {
            "example": [
                "cli: -skipstep lvs",
                "api: chip.set('option', 'skipstep', 'lvs')"
            ],
            "help": "List of steps to skip during execution.The default is to\nexecute all steps defined in the flow graph.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Skip step list",
            "switch": [
                "-skipstep <str>"
            ],
            "type": "[str]"
        },
        "stackup": {
            "example": [
                "cli: -stackup 2MA4MB2MC",
                "api: chip.set('option', 'stackup', '2MA4MB2MC')"
            ],
            "help": "Target stackup used during compilation. The stackup is required\nparameter for PDKs with multiple metal stackups.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Stackup target",
            "switch": [
                "-stackup <str>"
            ],
            "type": "str"
        },
        "steplist": {
            "example": [
                "cli: -steplist 'import'",
                "api: chip.set('option', 'steplist', 'import')"
            ],
            "help": "List of steps to execute. The default is to execute all steps\ndefined in the flow graph.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Compilation step list",
            "switch": [
                "-steplist <step>"
            ],
            "type": "[str]"
        },
        "strict": {
            "example": [
                "cli: -strict true",
                "api: chip.set('option', 'strict', True)"
            ],
            "help": "Enable additional strict checking in the SC Python API. When this\nparameter is set to True, users must provide step and index keyword\narguments when reading from parameters with the pernode field set to\n'optional'.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Option: Strict checking",
            "switch": [
                "-strict <bool>"
            ],
            "type": "bool"
        },
        "target": {
            "example": [
                "cli: -target freepdk45_demo",
                "api: chip.set('option', 'target', 'freepdk45_demo')"
            ],
            "help": "Sets a target module to be used for compilation. The target\nmodule must set up all parameters needed. The target module\nmay load multiple flows and libraries.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Compilation target",
            "switch": [
                "-target <str>"
            ],
            "type": "str"
        },
        "timeout": {
            "example": [
                "cli: -timeout 3600",
                "api: chip.set('option', 'timeout', 3600)"
            ],
            "help": "Timeout value in seconds. The timeout value is compared\nagainst the wall time tracked by the SC runtime to determine\nif an operation should continue. The timeout value is also\nused by the jobscheduler to automatically kill jobs.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Option: Timeout value",
            "switch": [
                "-timeout <str>"
            ],
            "type": "float",
            "unit": "s"
        },
        "trace": {
            "example": [
                "cli: -trace",
                "api: chip.set('option', 'trace', True)"
            ],
            "help": "Enables debug tracing during compilation and/or runtime.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Enable debug traces",
            "switch": [
                "-trace <bool>"
            ],
            "type": "bool"
        },
        "track": {
            "example": [
                "cli: -track",
                "api: chip.set('option', 'track', True)"
            ],
            "help": "Turns on tracking of all 'record' parameters during each\ntask, otherwise only tool and runtime information will be recorded.\nTracking will result in potentially sensitive data\nbeing recorded in the manifest so only turn on this feature\nif you have control of the final manifest.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "optional",
            "require": "all",
            "scope": "job",
            "shorthelp": "Enable provenance tracking",
            "switch": [
                "-track <bool>"
            ],
            "type": "bool"
        },
        "uselambda": {
            "example": [
                "cli: -uselambda true",
                "api: chip.set('option', 'uselambda', True)"
            ],
            "help": "Turns on lambda scaling of all dimensional constraints.\n(new value = value * ['pdk', 'lambda']).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": false
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": "all",
            "scope": "job",
            "shorthelp": "Use lambda scaling",
            "switch": [
                "-uselambda <bool>"
            ],
            "type": "bool"
        },
        "var": {
            "default": {
                "example": [
                    "cli: -var 'openroad_place_density 0.4'",
                    "api: chip.set('option', 'var', 'openroad_place_density', '0.4')"
                ],
                "help": "List of key/value strings specified. Certain tools and\nreference flows require special parameters, this\nshould only be used for specifying variables that are\nnot directly supported by the SiliconCompiler schema.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Custom variables",
                "switch": [
                    "-var 'key <str>'"
                ],
                "type": "[str]"
            }
        },
        "vlib": {
            "copy": false,
            "example": [
                "cli: -v './mylib.v'",
                "api: chip.set('option', 'vlib', './mylib.v')"
            ],
            "hashalgo": "sha256",
            "help": "List of library files to be read in. Modules found in the\nlibraries are not interpreted as root modules.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "author": [],
                        "date": [],
                        "filehash": [],
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Design libraries",
            "switch": [
                "-v <file>"
            ],
            "type": "[file]"
        },
        "ydir": {
            "copy": false,
            "example": [
                "cli: -y './mylib'",
                "api: chip.set('option', 'ydir', './mylib')"
            ],
            "help": "Search paths to look for verilog modules found in the the\nsource list. The import engine will look for modules inside\nfiles with the specified +libext+ param suffix.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Design module search paths",
            "switch": [
                "-y <dir>"
            ],
            "type": "[dir]"
        }
    },
    "output": {
        "default": {
            "default": {
                "copy": false,
                "example": [
                    "cli: -output 'rtl verilog hello_world.v'",
                    "api: chip.set('output', 'rtl', 'verilog', 'hello_world.v')"
                ],
                "hashalgo": "sha256",
                "help": "List of files of type ('filetype') grouped as a named set ('fileset').\nThe exact names of filetypes and filesets must match the string names\nused by the tasks called during flowgraph execution. By convention,\nthe fileset names should match the the name of the flowgraph being\nexecuted.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Output: files",
                "switch": [
                    "-output 'fileset filetype <file>'"
                ],
                "type": "[file]"
            }
        }
    },
    "package": {
        "author": {
            "default": {
                "email": {
                    "example": [
                        "cli: -package_author_email 'wiley wiley@acme.com'",
                        "api: chip.set('package', 'author', 'wiley', 'email', 'wiley@acme.com')"
                    ],
                    "help": "Package author email provided with full name as key and\nemail as value.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package: author email",
                    "switch": [
                        "-package_author_email 'userid <str>'"
                    ],
                    "type": "str"
                },
                "location": {
                    "example": [
                        "cli: -package_author_location 'wiley wiley@acme.com'",
                        "api: chip.set('package', 'author', 'wiley', 'location', 'wiley@acme.com')"
                    ],
                    "help": "Package author location provided with full name as key and\nlocation as value.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package: author location",
                    "switch": [
                        "-package_author_location 'userid <str>'"
                    ],
                    "type": "str"
                },
                "name": {
                    "example": [
                        "cli: -package_author_name 'wiley wiley@acme.com'",
                        "api: chip.set('package', 'author', 'wiley', 'name', 'wiley@acme.com')"
                    ],
                    "help": "Package author name provided with full name as key and\nname as value.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package: author name",
                    "switch": [
                        "-package_author_name 'userid <str>'"
                    ],
                    "type": "str"
                },
                "organization": {
                    "example": [
                        "cli: -package_author_organization 'wiley wiley@acme.com'",
                        "api: chip.set('package', 'author', 'wiley', 'organization', 'wiley@acme.com')"
                    ],
                    "help": "Package author organization provided with full name as key and\norganization as value.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package: author organization",
                    "switch": [
                        "-package_author_organization 'userid <str>'"
                    ],
                    "type": "str"
                },
                "publickey": {
                    "example": [
                        "cli: -package_author_publickey 'wiley wiley@acme.com'",
                        "api: chip.set('package', 'author', 'wiley', 'publickey', 'wiley@acme.com')"
                    ],
                    "help": "Package author publickey provided with full name as key and\npublickey as value.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package: author publickey",
                    "switch": [
                        "-package_author_publickey 'userid <str>'"
                    ],
                    "type": "str"
                },
                "username": {
                    "example": [
                        "cli: -package_author_username 'wiley wiley@acme.com'",
                        "api: chip.set('package', 'author', 'wiley', 'username', 'wiley@acme.com')"
                    ],
                    "help": "Package author username provided with full name as key and\nusername as value.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "Package: author username",
                    "switch": [
                        "-package_author_username 'userid <str>'"
                    ],
                    "type": "str"
                }
            }
        },
        "dependency": {
            "default": {
                "example": [
                    "cli: -package_dependency 'hello 1.0'",
                    "api: chip.set('package', 'dependency', 'hello', '1.0')"
                ],
                "help": "Package dependencies specified as a key value pair.\nVersions shall follow the semver standard.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: version dependencies",
                "switch": [
                    "-package_dependency 'module <str>'"
                ],
                "type": "[str]"
            }
        },
        "depgraph": {
            "default": {
                "example": [
                    "cli: -package_depgraph 'top (cpu,1.0.1)'",
                    "api: chip.set('package', 'depgraph', 'top', ('cpu', '1.0.1'))"
                ],
                "help": "List of Silicon Unified Packager (SUP) dependencies\nused by the design specified on a per module basis a\nlist of string tuples ('name', 'version').",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: dependency list",
                "switch": [
                    "-package_depgraph 'module <(str,str)>'"
                ],
                "type": "[(str,str)]"
            }
        },
        "description": {
            "example": [
                "cli: -package_description 'Yet another cpu'",
                "api: chip.set('package', 'description', 'Yet another cpu')"
            ],
            "help": "Package short one line description for package\nmanagers and summary reports.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: description",
            "switch": [
                "-package_description <str>"
            ],
            "type": "str"
        },
        "doc": {
            "datasheet": {
                "copy": false,
                "example": [
                    "cli: -package_doc_datasheet datasheet.pdf",
                    "api: chip.set('package', 'doc', 'datasheet', 'datasheet.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of datasheet documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: datasheet document",
                "switch": [
                    "-package_doc_datasheet <str>"
                ],
                "type": "[file]"
            },
            "homepage": {
                "example": [
                    "cli: -package_doc_homepage index.html",
                    "api: chip.set('package', 'doc', 'homepage', 'index.html')"
                ],
                "help": "Package documentation homepage. Filepath to design docs homepage.\nComplex designs can can include a long non standard list of\ndocuments dependent. A single html entry point can be used to\npresent an organized documentation dashboard to the designer.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: documentation homepage",
                "switch": [
                    "-package_doc_homepage <str>"
                ],
                "type": "str"
            },
            "quickstart": {
                "copy": false,
                "example": [
                    "cli: -package_doc_quickstart quickstart.pdf",
                    "api: chip.set('package', 'doc', 'quickstart', 'quickstart.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of quickstart documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: quickstart document",
                "switch": [
                    "-package_doc_quickstart <str>"
                ],
                "type": "[file]"
            },
            "reference": {
                "copy": false,
                "example": [
                    "cli: -package_doc_reference reference.pdf",
                    "api: chip.set('package', 'doc', 'reference', 'reference.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of reference documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: reference document",
                "switch": [
                    "-package_doc_reference <str>"
                ],
                "type": "[file]"
            },
            "releasenotes": {
                "copy": false,
                "example": [
                    "cli: -package_doc_releasenotes releasenotes.pdf",
                    "api: chip.set('package', 'doc', 'releasenotes', 'releasenotes.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of releasenotes documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: releasenotes document",
                "switch": [
                    "-package_doc_releasenotes <str>"
                ],
                "type": "[file]"
            },
            "signoff": {
                "copy": false,
                "example": [
                    "cli: -package_doc_signoff signoff.pdf",
                    "api: chip.set('package', 'doc', 'signoff', 'signoff.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of signoff documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: signoff document",
                "switch": [
                    "-package_doc_signoff <str>"
                ],
                "type": "[file]"
            },
            "testplan": {
                "copy": false,
                "example": [
                    "cli: -package_doc_testplan testplan.pdf",
                    "api: chip.set('package', 'doc', 'testplan', 'testplan.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of testplan documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: testplan document",
                "switch": [
                    "-package_doc_testplan <str>"
                ],
                "type": "[file]"
            },
            "tutorial": {
                "copy": false,
                "example": [
                    "cli: -package_doc_tutorial tutorial.pdf",
                    "api: chip.set('package', 'doc', 'tutorial', 'tutorial.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of tutorial documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: tutorial document",
                "switch": [
                    "-package_doc_tutorial <str>"
                ],
                "type": "[file]"
            },
            "userguide": {
                "copy": false,
                "example": [
                    "cli: -package_doc_userguide userguide.pdf",
                    "api: chip.set('package', 'doc', 'userguide', 'userguide.pdf')"
                ],
                "hashalgo": "sha256",
                "help": "Package list of userguide documents.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "author": [],
                            "date": [],
                            "filehash": [],
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "Package: userguide document",
                "switch": [
                    "-package_doc_userguide <str>"
                ],
                "type": "[file]"
            }
        },
        "homepage": {
            "example": [
                "cli: -package_homepage index.html",
                "api: chip.set('package', 'homepage', 'index.html')"
            ],
            "help": "Package homepage.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: project homepage",
            "switch": [
                "-package_homepage <str>"
            ],
            "type": "str"
        },
        "keyword": {
            "example": [
                "cli: -package_keyword cpu",
                "api: chip.set('package', 'keyword', 'cpu')"
            ],
            "help": "Package keyword(s) used to characterize package.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: keyword",
            "switch": [
                "-package_keyword <str>"
            ],
            "type": "str"
        },
        "license": {
            "example": [
                "cli: -package_license 'Apache-2.0'",
                "api: chip.set('package', 'license', 'Apache-2.0')"
            ],
            "help": "Package list of SPDX license identifiers.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: license identifiers",
            "switch": [
                "-package_license <str>"
            ],
            "type": "[str]"
        },
        "licensefile": {
            "copy": false,
            "example": [
                "cli: -package_licensefile './LICENSE'",
                "api: chip.set('package', 'licensefile', './LICENSE')"
            ],
            "hashalgo": "sha256",
            "help": "Package list of license files for to be\napplied in cases when a SPDX identifier is not available.\n(eg. proprietary licenses).list of SPDX license identifiers.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "author": [],
                        "date": [],
                        "filehash": [],
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: license files",
            "switch": [
                "-package_licensefile <file>"
            ],
            "type": "[file]"
        },
        "location": {
            "example": [
                "cli: -package_location 'mars'",
                "api: chip.set('package', 'location', 'mars')"
            ],
            "help": "Package country of origin specified as standardized\ninternational country codes. The field can be left blank\nif the location is unknown or global.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: location",
            "switch": [
                "-package_location <file>"
            ],
            "type": "[str]"
        },
        "name": {
            "example": [
                "cli: -package_name yac",
                "api: chip.set('package', 'name', 'yac')"
            ],
            "help": "Package name.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: name",
            "switch": [
                "-package_name <str>"
            ],
            "type": "str"
        },
        "organization": {
            "example": [
                "cli: -package_organization 'humanity'",
                "api: chip.set('package', 'organization', 'humanity')"
            ],
            "help": "Package sponsoring organization. The field can be left\nblank if not applicable.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: sponsoring organization",
            "switch": [
                "-package_organization <str>"
            ],
            "type": "[str]"
        },
        "publickey": {
            "example": [
                "cli: -package_publickey '6EB695706EB69570'",
                "api: chip.set('package', 'publickey', '6EB695706EB69570')"
            ],
            "help": "Package public project key.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: public key",
            "switch": [
                "-package_publickey <str>"
            ],
            "type": "str"
        },
        "repo": {
            "example": [
                "cli: -package_repo 'git@github.com:aolofsson/oh.git'",
                "api: chip.set('package', 'repo', 'git@github.com:aolofsson/oh.git')"
            ],
            "help": "Package IP address to source code repository.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: code repository",
            "switch": [
                "-package_repo <str>"
            ],
            "type": "[str]"
        },
        "target": {
            "example": [
                "cli: -package_target 'asicflow_freepdk45'",
                "api: chip.set('package', 'target', 'asicflow_freepdk45')"
            ],
            "help": "Package list of qualified compilation targets.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": [],
                        "value": []
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: qualified targets",
            "switch": [
                "-package_target <str>"
            ],
            "type": "[str]"
        },
        "version": {
            "example": [
                "cli: -package_version 1.0",
                "api: chip.set('package', 'version', '1.0')"
            ],
            "help": "Package version. Can be a branch, tag, commit hash,\nor a semver compatible version.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "global",
            "shorthelp": "Package: version",
            "switch": [
                "-package_version <str>"
            ],
            "type": "str"
        }
    },
    "pdk": {
        "default": {
            "aprtech": {
                "default": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_aprtech 'asap7 openroad M10 12t lef tech.lef'",
                                    "api: chip.set('pdk', 'asap7', 'aprtech', 'openroad', 'M10', '12t', 'lef', 'tech.lef')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Technology file containing setup information needed to enable DRC clean APR\nfor the specified stackup, libarch, and format. The 'libarch' specifies the\nlibrary architecture (e.g. library height). For example a PDK with support\nfor 9 and 12 track libraries might have 'libarchs' called 9t and 12t.\nThe standard filetype for specifying place and route design rules for a\nprocess node is through a 'lef' format technology file. The\n'filetype' used in the aprtech is used by the tool specific APR TCL scripts\nto set up the technology parameters. Some tools may require additional\nfiles beyond the tech.lef file. Examples of extra file types include\nantenna, tracks, tapcell, viarules, em.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: APR technology files",
                                "switch": [
                                    "-pdk_aprtech 'pdkname tool stackup libarch filetype <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                }
            },
            "d0": {
                "example": [
                    "cli: -pdk_d0 'asap7 0.1'",
                    "api: chip.set('pdk', 'asap7', 'd0', 0.1)"
                ],
                "help": "Process defect density (d0) expressed as random defects per cm^2. The\nvalue is used to calculate yield losses as a function of area, which in\nturn affects the chip full factory costs. Two yield models are\nsupported: Poisson (default), and Murphy. The Poisson based yield is\ncalculated as dy = exp(-area * d0/100). The Murphy based yield is\ncalculated as dy = ((1-exp(-area * d0/100))/(area * d0/100))^2.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: process defect density",
                "switch": [
                    "-pdk_d0 'pdkname <float>'"
                ],
                "type": "float"
            },
            "density": {
                "example": [
                    "cli: -pdk_density 'asap7 100e6'",
                    "api: chip.set('pdk', 'asap7', 'density', 10e6)"
                ],
                "help": "Approximate logic density expressed as # transistors / mm^2\ncalculated as:\n0.6 * (Nand2 Transistor Count) / (Nand2 Cell Area) +\n0.4 * (Register Transistor Count) / (Register Cell Area)\nThe value is specified for a fixed standard cell library within a node\nand will differ depending on the library vendor, library track height\nand library type. The value can be used to to normalize the effective\ndensity reported for the design across different process nodes. The\nvalue can be derived from a variety of sources, including the PDK DRM,\nlibrary LEFs, conference presentations, and public analysis.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: transistor density",
                "switch": [
                    "-pdk_density 'pdkname <float>'"
                ],
                "type": "float"
            },
            "devmodel": {
                "default": {
                    "default": {
                        "default": {
                            "copy": false,
                            "example": [
                                "cli: -pdk_devmodel 'asap7 xyce spice M10 asap7.sp'",
                                "api: chip.set('pdk', 'asap7', 'devmodel', 'xyce', 'spice', 'M10', 'asap7.sp')"
                            ],
                            "hashalgo": "sha256",
                            "help": "List of filepaths to PDK device models for different simulation\npurposes and for different tools. Examples of device model types\ninclude spice, aging, electromigration, radiation. An example of a\n'spice' tool is xyce. Device models are specified on a per metal stack\nbasis. Process nodes with a single device model across all stacks will\nhave a unique parameter record per metal stack pointing to the same\ndevice model file. Device types and tools are dynamic entries\nthat depend on the tool setup and device technology. Pseudo-standardized\ndevice types include spice, em (electromigration), and aging.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "author": [],
                                        "date": [],
                                        "filehash": [],
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK: device models",
                            "switch": [
                                "-pdk_devmodel 'pdkname tool simtype stackup <file>'"
                            ],
                            "type": "[file]"
                        }
                    }
                }
            },
            "directory": {
                "default": {
                    "default": {
                        "default": {
                            "copy": false,
                            "example": [
                                "cli: -pdk_directory 'asap7 xyce rfmodel M10 rftechdir'",
                                "api: chip.set('pdk', 'asap7', 'directory', 'xyce', 'rfmodel', 'M10', 'rftechdir')"
                            ],
                            "help": "List of named directories specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying files that are\nnot directly supported by the SiliconCompiler PDK schema.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK: special directory",
                            "switch": [
                                "-pdk_directory 'pdkname tool key stackup <file>'"
                            ],
                            "type": "[dir]"
                        }
                    }
                }
            },
            "display": {
                "default": {
                    "default": {
                        "copy": false,
                        "example": [
                            "cli: -pdk_display 'asap7 klayout M10 display.lyt'",
                            "api: chip.set('pdk', 'asap7', 'display', 'klayout', 'M10', 'display.cfg')"
                        ],
                        "hashalgo": "sha256",
                        "help": "Display configuration files describing colors and pattern schemes for\nall layers in the PDK. The display configuration file is entered on a\nstackup and tool basis.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "author": [],
                                    "date": [],
                                    "filehash": [],
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "never",
                        "require": null,
                        "scope": "global",
                        "shorthelp": "PDK: display file",
                        "switch": [
                            "-pdk_display 'pdkname tool stackup <file>'"
                        ],
                        "type": "[file]"
                    }
                }
            },
            "doc": {
                "datasheet": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_datasheet 'asap7 datasheet.pdf'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'datasheet', 'datasheet.pdf')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to datasheet document.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: datasheet",
                    "switch": [
                        "-pdk_doc_datasheet 'pdkname <file>'"
                    ],
                    "type": "[file]"
                },
                "homepage": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_homepage 'asap7 index.html'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'homepage', 'index.html')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to PDK docs homepage. Modern PDKs can include tens or\nhundreds of individual documents. A single html entry point can\nbe used to present an organized documentation dashboard to the\ndesigner.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: documentation homepage",
                    "switch": [
                        "-pdk_doc_homepage 'pdkname <file>'"
                    ],
                    "type": "[file]"
                },
                "install": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_install 'asap7 install.pdf'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'install', 'install.pdf')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to install document.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: install",
                    "switch": [
                        "-pdk_doc_install 'pdkname <file>'"
                    ],
                    "type": "[file]"
                },
                "quickstart": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_quickstart 'asap7 quickstart.pdf'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'quickstart', 'quickstart.pdf')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to quickstart document.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: quickstart",
                    "switch": [
                        "-pdk_doc_quickstart 'pdkname <file>'"
                    ],
                    "type": "[file]"
                },
                "reference": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_reference 'asap7 reference.pdf'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'reference', 'reference.pdf')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to reference document.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: reference",
                    "switch": [
                        "-pdk_doc_reference 'pdkname <file>'"
                    ],
                    "type": "[file]"
                },
                "releasenotes": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_releasenotes 'asap7 releasenotes.pdf'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'releasenotes', 'releasenotes.pdf')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to releasenotes document.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: releasenotes",
                    "switch": [
                        "-pdk_doc_releasenotes 'pdkname <file>'"
                    ],
                    "type": "[file]"
                },
                "tutorial": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_tutorial 'asap7 tutorial.pdf'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'tutorial', 'tutorial.pdf')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to tutorial document.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: tutorial",
                    "switch": [
                        "-pdk_doc_tutorial 'pdkname <file>'"
                    ],
                    "type": "[file]"
                },
                "userguide": {
                    "copy": false,
                    "example": [
                        "cli: -pdk_doc_userguide 'asap7 userguide.pdf'",
                        "api: chip.set('pdk', 'asap7', 'doc', 'userguide', 'userguide.pdf')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Filepath to userguide document.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: userguide",
                    "switch": [
                        "-pdk_doc_userguide 'pdkname <file>'"
                    ],
                    "type": "[file]"
                }
            },
            "drc": {
                "runset": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_drc_runset 'asap7 magic M10 basic $PDK/drc.rs'",
                                    "api: chip.set('pdk', 'asap7', 'drc', 'runset', 'magic', 'M10', 'basic', '$PDK/drc.rs')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Runset files for DRC task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: DRC runset files",
                                "switch": [
                                    "-pdk_drc_runset 'pdkname tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                },
                "waiver": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_drc_waiver 'asap7 magic M10 basic $PDK/drc.txt'",
                                    "api: chip.set('pdk', 'asap7', 'drc', 'waiver', 'magic', 'M10', 'basic', '$PDK/drc.txt')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Waiver files for DRC task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: DRC waiver files",
                                "switch": [
                                    "-pdk_drc_waiver 'tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                }
            },
            "edgemargin": {
                "example": [
                    "cli: -pdk_edgemargin 'asap7 1'",
                    "api: chip.set('pdk', 'asap7', 'edgemargin', 1)"
                ],
                "help": "Keep-out distance/margin from the edge inwards. The edge\nis prone to chipping and need special treatment that preclude\nplacement of designs in this area. The edge value is used to\ncalculate effective units per wafer/panel and full factory cost.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: wafer edge keep-out margin",
                "switch": [
                    "-pdk_edgemargin 'pdkname <float>'"
                ],
                "type": "float",
                "unit": "mm"
            },
            "erc": {
                "runset": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_erc_runset 'asap7 magic M10 basic $PDK/erc.rs'",
                                    "api: chip.set('pdk', 'asap7', 'erc', 'runset', 'magic', 'M10', 'basic', '$PDK/erc.rs')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Runset files for ERC task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: ERC runset files",
                                "switch": [
                                    "-pdk_erc_runset 'pdkname tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                },
                "waiver": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_erc_waiver 'asap7 magic M10 basic $PDK/erc.txt'",
                                    "api: chip.set('pdk', 'asap7', 'erc', 'waiver', 'magic', 'M10', 'basic', '$PDK/erc.txt')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Waiver files for ERC task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: ERC waiver files",
                                "switch": [
                                    "-pdk_erc_waiver 'tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                }
            },
            "file": {
                "default": {
                    "default": {
                        "default": {
                            "copy": false,
                            "example": [
                                "cli: -pdk_file 'asap7 xyce spice M10 asap7.sp'",
                                "api: chip.set('pdk', 'asap7', 'file', 'xyce', 'spice', 'M10', 'asap7.sp')"
                            ],
                            "hashalgo": "sha256",
                            "help": "List of named files specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying files that are\nnot directly supported by the SiliconCompiler PDK schema.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "author": [],
                                        "date": [],
                                        "filehash": [],
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK: special file",
                            "switch": [
                                "-pdk_file 'pdkname tool key stackup <file>'"
                            ],
                            "type": "[file]"
                        }
                    }
                }
            },
            "fill": {
                "runset": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_fill_runset 'asap7 magic M10 basic $PDK/fill.rs'",
                                    "api: chip.set('pdk', 'asap7', 'fill', 'runset', 'magic', 'M10', 'basic', '$PDK/fill.rs')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Runset files for FILL task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: FILL runset files",
                                "switch": [
                                    "-pdk_fill_runset 'pdkname tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                },
                "waiver": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_fill_waiver 'asap7 magic M10 basic $PDK/fill.txt'",
                                    "api: chip.set('pdk', 'asap7', 'fill', 'waiver', 'magic', 'M10', 'basic', '$PDK/fill.txt')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Waiver files for FILL task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: FILL waiver files",
                                "switch": [
                                    "-pdk_fill_waiver 'tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                }
            },
            "foundry": {
                "example": [
                    "cli: -pdk_foundry 'asap7 virtual'",
                    "api: chip.set('pdk', 'asap7', 'foundry', 'virtual')"
                ],
                "help": "Name of foundry corporation. Examples include intel, gf, tsmc,\nsamsung, skywater, virtual. The 'virtual' keyword is reserved for\nsimulated non-manufacturable processes.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": "asic",
                "scope": "global",
                "shorthelp": "PDK: foundry name",
                "switch": [
                    "-pdk_foundry 'pdkname <str>'"
                ],
                "type": "str"
            },
            "hscribe": {
                "example": [
                    "cli: -pdk_hscribe 'asap7 0.1'",
                    "api: chip.set('pdk', 'asap7', 'hscribe', 0.1)"
                ],
                "help": "Width of the horizontal scribe line used during die separation.\nThe process is generally completed using a mechanical saw, but can be\ndone through combinations of mechanical saws, lasers, wafer thinning,\nand chemical etching in more advanced technologies. The value is used\nto calculate effective dies per wafer and full factory cost.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: horizontal scribe line width",
                "switch": [
                    "-pdk_hscribe 'pdkname <float>'"
                ],
                "type": "float",
                "unit": "mm"
            },
            "lambda": {
                "example": [
                    "cli: -pdk_lambda 'asap7 1e-06'",
                    "api: chip.set('pdk', 'asap7', 'lambda', 1e-06)"
                ],
                "help": "Elementary distance unit used for scaling user\nspecified physical schema parameters such as layout\nconstraints.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": "1e-06"
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": "asic",
                "scope": "global",
                "shorthelp": "PDK: Lambda value",
                "switch": [
                    "-pdk_lambda 'pdkname <float>"
                ],
                "type": "float"
            },
            "layermap": {
                "default": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_layermap 'asap7 klayout db gds M10 asap7.map'",
                                    "api: chip.set('pdk', 'asap7', 'layermap', 'klayout', 'db', 'gds', 'M10', 'asap7.map')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Files describing input/output mapping for streaming layout data from\none format to another. A foundry PDK will include an official layer\nlist for all user entered and generated layers supported in the GDS\naccepted by the foundry for processing, but there is no standardized\nlayer definition format that can be read and written by all EDA tools.\nTo ensure mask layer matching, key/value type mapping files are needed\nto convert EDA databases to/from GDS and to convert between different\ntypes of EDA databases. Layer maps are specified on a per metal\nstackup basis. The 'src' and 'dst' can be names of SC supported tools\nor file formats (like 'gds').",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: layer map file",
                                "switch": [
                                    "-pdk_layermap 'pdkname tool src dst stackup <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                }
            },
            "lvs": {
                "runset": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_lvs_runset 'asap7 magic M10 basic $PDK/lvs.rs'",
                                    "api: chip.set('pdk', 'asap7', 'lvs', 'runset', 'magic', 'M10', 'basic', '$PDK/lvs.rs')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Runset files for LVS task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: LVS runset files",
                                "switch": [
                                    "-pdk_lvs_runset 'pdkname tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                },
                "waiver": {
                    "default": {
                        "default": {
                            "default": {
                                "copy": false,
                                "example": [
                                    "cli: -pdk_lvs_waiver 'asap7 magic M10 basic $PDK/lvs.txt'",
                                    "api: chip.set('pdk', 'asap7', 'lvs', 'waiver', 'magic', 'M10', 'basic', '$PDK/lvs.txt')"
                                ],
                                "hashalgo": "sha256",
                                "help": "Waiver files for LVS task.",
                                "lock": false,
                                "node": {
                                    "default": {
                                        "default": {
                                            "author": [],
                                            "date": [],
                                            "filehash": [],
                                            "signature": [],
                                            "value": []
                                        }
                                    }
                                },
                                "notes": null,
                                "pernode": "never",
                                "require": null,
                                "scope": "global",
                                "shorthelp": "PDK: LVS waiver files",
                                "switch": [
                                    "-pdk_lvs_waiver 'tool stackup name <file>'"
                                ],
                                "type": "[file]"
                            }
                        }
                    }
                }
            },
            "maxlayer": {
                "default": {
                    "example": [
                        "cli: -pdk_maxlayer 'asap7 2MA4MB2MC M8'",
                        "api: chip.set('pdk', 'asap7', 'maxlayer', 'MA4MB2MC', 'M8')"
                    ],
                    "help": "Maximum metal layer to be used for automated place and route\nspecified on a per stackup basis.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": "asic",
                    "scope": "global",
                    "shorthelp": "PDK: maximum routing layer",
                    "switch": [
                        "-pdk_maxlayer 'pdk stackup <str>'"
                    ],
                    "type": "str"
                }
            },
            "minlayer": {
                "default": {
                    "example": [
                        "cli: -pdk_minlayer 'asap7 2MA4MB2MC M2'",
                        "api: chip.set('pdk', 'asap7', 'minlayer', '2MA4MB2MC', 'M2')"
                    ],
                    "help": "Minimum metal layer to be used for automated place and route\nspecified on a per stackup basis.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": "asic",
                    "scope": "global",
                    "shorthelp": "PDK: minimum routing layer",
                    "switch": [
                        "-pdk_minlayer 'pdk stackup <str>'"
                    ],
                    "type": "str"
                }
            },
            "node": {
                "example": [
                    "cli: -pdk_node 'asap7 130'",
                    "api: chip.set('pdk', 'asap7', 'node', 130)"
                ],
                "help": "Approximate relative minimum dimension of the process target specified\nin nanometers. The parameter is required for flows and tools that\nleverage the value to drive technology dependent synthesis and APR\noptimization. Node examples include 180, 130, 90, 65, 45, 32, 22 14,\n10, 7, 5, 3.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": "asic",
                "scope": "global",
                "shorthelp": "PDK: process node",
                "switch": [
                    "-pdk_node 'pdkname <float>'"
                ],
                "type": "float"
            },
            "panelsize": {
                "example": [
                    "cli: -pdk_panelsize 'asap7 (45.72,60.96)'",
                    "api: chip.set('pdk', 'asap7', 'panelsize', (45.72, 60.96))"
                ],
                "help": "List of panel sizes supported in the manufacturing process.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: panel size",
                "switch": [
                    "-pdk_panelsize 'pdkname <(float,float)>'"
                ],
                "type": "[(float,float)]",
                "unit": "mm"
            },
            "pexmodel": {
                "default": {
                    "default": {
                        "default": {
                            "copy": false,
                            "example": [
                                "cli: -pdk_pexmodel 'asap7 fastcap M10 max wire.mod'",
                                "api: chip.set('pdk', 'asap7', 'pexmodel', 'fastcap', 'M10', 'max', 'wire.mod')"
                            ],
                            "hashalgo": "sha256",
                            "help": "List of filepaths to PDK wire TCAD models used during automated\nsynthesis, APR, and signoff verification. Pexmodels are specified on\na per metal stack basis. Corner values depend on the process being\nused, but typically include nomenclature such as min, max, nominal.\nFor exact names, refer to the DRM. Pexmodels are generally not\nstandardized and specified on a per tool basis. An example of pexmodel\ntype is 'fastcap'.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "author": [],
                                        "date": [],
                                        "filehash": [],
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK: parasitic TCAD models",
                            "switch": [
                                "-pdk_pexmodel 'pdkname tool stackup corner <file>'"
                            ],
                            "type": "[file]"
                        }
                    }
                }
            },
            "stackup": {
                "example": [
                    "cli: -pdk_stackup 'asap7 2MA4MB2MC'",
                    "api: chip.add('pdk', 'asap7', 'stackup', '2MA4MB2MC')"
                ],
                "help": "List of all metal stackups offered in the process node. Older process\nnodes may only offer a single metal stackup, while advanced nodes\noffer a large but finite list of metal stacks with varying combinations\nof metal line pitches and thicknesses. Stackup naming is unique to a\nfoundry, but is generally a long string or code. For example, a 10\nmetal stackup with two 1x wide, four 2x wide, and 4x wide metals,\nmight be identified as 2MA4MB2MC, where MA, MB, and MC denote wiring\nlayers with different properties (thickness, width, space). Each\nstackup will come with its own set of routing technology files and\nparasitic models specified in the pdk_pexmodel and pdk_aprtech\nparameters.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": "asic",
                "scope": "global",
                "shorthelp": "PDK: metal stackups",
                "switch": [
                    "-pdk_stackup 'pdkname <str>'"
                ],
                "type": "[str]"
            },
            "thickness": {
                "default": {
                    "example": [
                        "cli: -pdk_thickness 'asap7 2MA4MB2MC 1.57'",
                        "api: chip.set('pdk', 'asap7', 'thickness', '2MA4MB2MC', 1.57)"
                    ],
                    "help": "Thickness of a manufactured unit specified on a per stackup.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": null,
                                "value": null
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "never",
                    "require": null,
                    "scope": "global",
                    "shorthelp": "PDK: unit thickness",
                    "switch": [
                        "-pdk_thickness 'pdkname stackup <float>'"
                    ],
                    "type": "float",
                    "unit": "mm"
                }
            },
            "unitcost": {
                "example": [
                    "cli: -pdk_unitcost 'asap7 10000'",
                    "api: chip.set('pdk', 'asap7', 'unitcost', 10000)"
                ],
                "help": "Raw cost per unit shipped by the factory, not accounting for yield\nloss.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: unit cost",
                "switch": [
                    "-pdk_unitcost 'pdkname <float>'"
                ],
                "type": "float",
                "unit": "USD"
            },
            "var": {
                "default": {
                    "default": {
                        "default": {
                            "example": [
                                "cli: -pdk_var 'asap7 xyce modeltype M10 bsim4'",
                                "api: chip.set('pdk', 'asap7', 'var', 'xyce', 'modeltype', 'M10', 'bsim4')"
                            ],
                            "help": "List of key/value strings specified on a per tool and per stackup basis.\nThe parameter should only be used for specifying variables that are\nnot directly supported by the SiliconCompiler PDK schema.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "never",
                            "require": null,
                            "scope": "global",
                            "shorthelp": "PDK: special variable",
                            "switch": [
                                "-pdk_var 'pdkname tool stackup key <str>'"
                            ],
                            "type": "[str]"
                        }
                    }
                }
            },
            "version": {
                "example": [
                    "cli: -pdk_version 'asap7 1.0'",
                    "api: chip.set('pdk', 'asap7', 'version', '1.0')"
                ],
                "help": "Alphanumeric string specifying the version of the PDK. Verification of\ncorrect PDK and IP versions is a hard ASIC tapeout require in all\ncommercial foundries. The version number can be used for design manifest\ntracking and tapeout checklists.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: version",
                "switch": [
                    "-pdk_version 'pdkname <str>'"
                ],
                "type": "str"
            },
            "vscribe": {
                "example": [
                    "cli: -pdk_vscribe 'asap7 0.1'",
                    "api: chip.set('pdk', 'asap7', 'vscribe', 0.1)"
                ],
                "help": " Width of the vertical scribe line used during die separation.\nThe process is generally completed using a mechanical saw, but can be\ndone through combinations of mechanical saws, lasers, wafer thinning,\nand chemical etching in more advanced technologies. The value is used\nto calculate effective dies per wafer and full factory cost.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "global",
                "shorthelp": "PDK: vertical scribe line width",
                "switch": [
                    "-pdk_vscribe 'pdkname <float>'"
                ],
                "type": "float",
                "unit": "mm"
            },
            "wafersize": {
                "example": [
                    "cli: -pdk_wafersize 'asap7 300'",
                    "api: chip.set('pdk', 'asap7', 'wafersize', 300)"
                ],
                "help": "Wafer diameter used in wafer based manufacturing process.\nThe standard diameter for leading edge manufacturing is 300mm. For\nolder process technologies and specialty fabs, smaller diameters\nsuch as 200, 100, 125, 100 are common. The value is used to\ncalculate dies per wafer and full factory chip costs.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": "asic",
                "scope": "global",
                "shorthelp": "PDK: wafer size",
                "switch": [
                    "-pdk_wafersize 'pdkname <float>'"
                ],
                "type": "float",
                "unit": "mm"
            }
        }
    },
    "record": {
        "arch": {
            "example": [
                "cli: -record_arch 'dfm 0 x86_64'",
                "api: chip.set('record', 'arch', 'x86_64', step='dfm', index=0)"
            ],
            "help": "Record tracking the hardware architecture per step and index basis. (x86_64, rv64imafdc)",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: hardware architecture",
            "switch": [
                "-record_arch 'step index <str>'"
            ],
            "type": "str"
        },
        "distro": {
            "example": [
                "cli: -record_distro 'dfm 0 ubuntu'",
                "api: chip.set('record', 'distro', 'ubuntu', step='dfm', index=0)"
            ],
            "help": "Record tracking the distro name per step and index basis. (ubuntu, redhat, centos)",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: distro name",
            "switch": [
                "-record_distro 'step index <str>'"
            ],
            "type": "str"
        },
        "endtime": {
            "example": [
                "cli: -record_endtime 'dfm 0 2021-09-06 12:20:20'",
                "api: chip.set('record', 'endtime', '2021-09-06 12:20:20', step='dfm', index=0)"
            ],
            "help": "Record tracking the end time per step and index basis. Time is reported in the ISO 8601 format YYYY-MM-DD HR:MIN:SEC",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: end time",
            "switch": [
                "-record_endtime 'step index <str>'"
            ],
            "type": "str"
        },
        "ipaddr": {
            "example": [
                "cli: -record_ipaddr 'dfm 0 <addr>'",
                "api: chip.set('record', 'ipaddr', '<addr>', step='dfm', index=0)"
            ],
            "help": "Record tracking the IP address per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: IP address",
            "switch": [
                "-record_ipaddr 'step index <str>'"
            ],
            "type": "str"
        },
        "kernelversion": {
            "example": [
                "cli: -record_kernelversion 'dfm 0 5.11.0-34-generic'",
                "api: chip.set('record', 'kernelversion', '5.11.0-34-generic', step='dfm', index=0)"
            ],
            "help": "Record tracking the O/S kernel version per step and index basis. Used for platforms that support a distinction\nbetween os kernels and os distributions.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: O/S kernel version",
            "switch": [
                "-record_kernelversion 'step index <str>'"
            ],
            "type": "str"
        },
        "macaddr": {
            "example": [
                "cli: -record_macaddr 'dfm 0 <addr>'",
                "api: chip.set('record', 'macaddr', '<addr>', step='dfm', index=0)"
            ],
            "help": "Record tracking the MAC address per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: MAC address",
            "switch": [
                "-record_macaddr 'step index <str>'"
            ],
            "type": "str"
        },
        "machine": {
            "example": [
                "cli: -record_machine 'dfm 0 carbon'",
                "api: chip.set('record', 'machine', 'carbon', step='dfm', index=0)"
            ],
            "help": "Record tracking the machine name per step and index basis. (myhost, localhost, ...",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: machine name",
            "switch": [
                "-record_machine 'step index <str>'"
            ],
            "type": "str"
        },
        "osversion": {
            "example": [
                "cli: -record_osversion 'dfm 0 20.04.1-Ubuntu'",
                "api: chip.set('record', 'osversion', '20.04.1-Ubuntu', step='dfm', index=0)"
            ],
            "help": "Record tracking the O/S version per step and index basis. Since there is not standard version system for operating\nsystems, extracting information from is platform dependent.\nFor Linux based operating systems, the 'osversion' is the\nversion of the distro.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: O/S version",
            "switch": [
                "-record_osversion 'step index <str>'"
            ],
            "type": "str"
        },
        "platform": {
            "example": [
                "cli: -record_platform 'dfm 0 linux'",
                "api: chip.set('record', 'platform', 'linux', step='dfm', index=0)"
            ],
            "help": "Record tracking the platform name per step and index basis. (linux, windows, freebsd)",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: platform name",
            "switch": [
                "-record_platform 'step index <str>'"
            ],
            "type": "str"
        },
        "publickey": {
            "example": [
                "cli: -record_publickey 'dfm 0 <key>'",
                "api: chip.set('record', 'publickey', '<key>', step='dfm', index=0)"
            ],
            "help": "Record tracking the public key per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: public key",
            "switch": [
                "-record_publickey 'step index <str>'"
            ],
            "type": "str"
        },
        "region": {
            "example": [
                "cli: -record_region 'dfm 0 US Gov Boston'",
                "api: chip.set('record', 'region', 'US Gov Boston', step='dfm', index=0)"
            ],
            "help": "Record tracking the cloud region per step and index basis. Recommended naming methodology:\n\n* local: node is the local machine\n* onprem: node in on-premises IT infrastructure\n* public: generic public cloud\n* govcloud: generic US government cloud\n* <region>: cloud and entity specific region string name",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: cloud region",
            "switch": [
                "-record_region 'step index <str>'"
            ],
            "type": "str"
        },
        "scversion": {
            "example": [
                "cli: -record_scversion 'dfm 0 1.0'",
                "api: chip.set('record', 'scversion', '1.0', step='dfm', index=0)"
            ],
            "help": "Record tracking the software version per step and index basis. Version number for the SiliconCompiler software.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: software version",
            "switch": [
                "-record_scversion 'step index <str>'"
            ],
            "type": "str"
        },
        "starttime": {
            "example": [
                "cli: -record_starttime 'dfm 0 2021-09-06 12:20:20'",
                "api: chip.set('record', 'starttime', '2021-09-06 12:20:20', step='dfm', index=0)"
            ],
            "help": "Record tracking the start time per step and index basis. Time is reported in the ISO 8601 format YYYY-MM-DD HR:MIN:SEC",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: start time",
            "switch": [
                "-record_starttime 'step index <str>'"
            ],
            "type": "str"
        },
        "toolargs": {
            "example": [
                "cli: -record_toolargs 'dfm 0 -I include/ foo.v'",
                "api: chip.set('record', 'toolargs', '-I include/ foo.v', step='dfm', index=0)"
            ],
            "help": "Record tracking the tool CLI arguments per step and index basis. Arguments passed to tool via CLI.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: tool CLI arguments",
            "switch": [
                "-record_toolargs 'step index <str>'"
            ],
            "type": "str"
        },
        "toolpath": {
            "example": [
                "cli: -record_toolpath 'dfm 0 /usr/bin/openroad'",
                "api: chip.set('record', 'toolpath', '/usr/bin/openroad', step='dfm', index=0)"
            ],
            "help": "Record tracking the tool path per step and index basis. Full path to tool executable used to run this\ntask.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: tool path",
            "switch": [
                "-record_toolpath 'step index <str>'"
            ],
            "type": "str"
        },
        "toolversion": {
            "example": [
                "cli: -record_toolversion 'dfm 0 1.0'",
                "api: chip.set('record', 'toolversion', '1.0', step='dfm', index=0)"
            ],
            "help": "Record tracking the tool version per step and index basis. The tool version captured corresponds to the 'tool'\nparameter within the 'tool' dictionary.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: tool version",
            "switch": [
                "-record_toolversion 'step index <str>'"
            ],
            "type": "str"
        },
        "userid": {
            "example": [
                "cli: -record_userid 'dfm 0 wiley'",
                "api: chip.set('record', 'userid', 'wiley', step='dfm', index=0)"
            ],
            "help": "Record tracking the userid per step and index basis.",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": null
                    }
                }
            },
            "notes": null,
            "pernode": "required",
            "require": null,
            "scope": "job",
            "shorthelp": "Record: userid",
            "switch": [
                "-record_userid 'step index <str>'"
            ],
            "type": "str"
        }
    },
    "schemaversion": {
        "example": [
            "api: chip.get('schemaversion')"
        ],
        "help": "SiliconCompiler schema version number.",
        "lock": true,
        "node": {
            "default": {
                "default": {
                    "signature": null,
                    "value": "0.35.0"
                }
            }
        },
        "notes": null,
        "pernode": "never",
        "require": "all",
        "scope": "global",
        "shorthelp": "Schema version number",
        "switch": [
            "-schemaversion <str>"
        ],
        "type": "str"
    },
    "tool": {
        "default": {
            "exe": {
                "example": [
                    "cli: -tool_exe 'openroad openroad'",
                    "api: chip.set('tool', 'openroad', 'exe', 'openroad')"
                ],
                "help": "Tool executable name.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool: executable name",
                "switch": [
                    "-tool_exe 'tool <str>'"
                ],
                "type": "str"
            },
            "format": {
                "enum": [
                    "json",
                    "tcl",
                    "yaml"
                ],
                "example": [
                    "cli: -tool_format 'yosys tcl'",
                    "api: chip.set('tool', 'yosys', 'format', 'tcl')"
                ],
                "help": "File format for tool manifest handoff.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool: file format",
                "switch": [
                    "-tool_format 'tool <file>'"
                ],
                "type": "enum"
            },
            "licenseserver": {
                "default": {
                    "example": [
                        "cli: -tool_licenseserver 'atask ACME_LICENSE 1700@server'",
                        "api: chip.set('tool', 'acme', 'licenseserver', 'ACME_LICENSE', '1700@server')"
                    ],
                    "help": "Defines a set of tool specific environment variables used by the executable\nthat depend on license key servers to control access. For multiple servers,\nseparate each server by a 'colon'. The named license variable are read at\nruntime (run()) and the environment variables are set.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Tool: license servers",
                    "switch": [
                        "-tool_licenseserver 'name key <str>'"
                    ],
                    "type": "[str]"
                }
            },
            "path": {
                "copy": false,
                "example": [
                    "cli: -tool_path 'openroad /usr/local/bin'",
                    "api: chip.set('tool', 'openroad', 'path', '/usr/local/bin')"
                ],
                "help": "File system path to tool executable. The path is prepended to the\nsystem PATH environment variable for batch and interactive runs. The\npath parameter can be left blank if the 'exe' is already in the\nenvironment search path.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool: executable path",
                "switch": [
                    "-tool_path 'tool <dir>'"
                ],
                "type": "dir"
            },
            "sbom": {
                "default": {
                    "copy": false,
                    "example": [
                        "cli: -tool_sbom 'yosys 1.0.1 ys_sbom.json'",
                        "api: chip.set('tool', 'yosys', 'sbom', '1.0', 'ys_sbom.json')"
                    ],
                    "hashalgo": "sha256",
                    "help": "Paths to software bill of material (SBOM) document file of the tool\nspecified on a per version basis. The SBOM includes critical\npackage information about the tool including the list of included\ncomponents, licenses, and copyright. The SBOM file is generally\nprovided as in a a standardized open data format such as SPDX.",
                    "lock": false,
                    "node": {
                        "default": {
                            "default": {
                                "author": [],
                                "date": [],
                                "filehash": [],
                                "signature": [],
                                "value": []
                            }
                        }
                    },
                    "notes": null,
                    "pernode": "optional",
                    "require": null,
                    "scope": "job",
                    "shorthelp": "Tool: software BOM",
                    "switch": [
                        "-tool_sbom 'tool version <file>'"
                    ],
                    "type": "[file]"
                }
            },
            "task": {
                "default": {
                    "continue": {
                        "example": [
                            "cli: -tool_task_continue 'verilator lint true'",
                            "api: chip.set('tool', 'verilator', 'task', 'lint', 'continue', True)"
                        ],
                        "help": "Directs flow to continue even if errors are encountered during task. The default\nbehavior is for SC to exit on error.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": false
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": "all",
                        "scope": "job",
                        "shorthelp": "Task: continue option",
                        "switch": [
                            "-tool_task_continue 'tool task <bool>'"
                        ],
                        "type": "bool"
                    },
                    "dir": {
                        "default": {
                            "copy": false,
                            "example": [
                                "cli: -tool_task_dir 'verilator compile cincludes include'",
                                "api: chip.set('tool', 'verilator', 'task', 'compile', 'dir', 'cincludes', 'include')"
                            ],
                            "help": "Paths to user supplied directories mapped to keys. Keys must match\nwhat's expected by the task/reference script consuming the\ndirectory.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: setup directories",
                            "switch": [
                                "-tool_task_dir 'tool task key <dir>'"
                            ],
                            "type": "[dir]"
                        }
                    },
                    "env": {
                        "default": {
                            "example": [
                                "cli: -tool_task_env 'openroad cts MYVAR 42'",
                                "api: chip.set('tool', 'openroad', 'task', 'cts', 'env', 'MYVAR', '42')"
                            ],
                            "help": "Environment variables to set for individual tasks. Keys and values\nshould be set in accordance with the task's documentation. Most\ntasks do not require extra environment variables to function.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": null
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: environment variables",
                            "switch": [
                                "-tool_task_env 'tool task step index name <str>'"
                            ],
                            "type": "str"
                        }
                    },
                    "file": {
                        "default": {
                            "copy": false,
                            "example": [
                                "cli: -tool_task_file 'openroad floorplan macroplace macroplace.tcl'",
                                "api: chip.set('tool', 'openroad', 'task', 'floorplan', 'file', 'macroplace', 'macroplace.tcl')"
                            ],
                            "hashalgo": "sha256",
                            "help": "Paths to user supplied files mapped to keys. Keys and filetypes must\nmatch what's expected by the task/reference script consuming the\nfile.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "author": [],
                                        "date": [],
                                        "filehash": [],
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: setup files",
                            "switch": [
                                "-tool_task_file 'tool task key <file>'"
                            ],
                            "type": "[file]"
                        }
                    },
                    "input": {
                        "copy": false,
                        "example": [
                            "cli: -tool_task_input 'openroad place place 0 oh_add.def'",
                            "api: chip.set('tool', 'openroad', 'task', 'place', 'input', 'oh_add.def', step='place', index='0')"
                        ],
                        "hashalgo": "sha256",
                        "help": "List of data files to be copied from previous flowgraph steps 'output'\ndirectory. The list of steps to copy files from is defined by the\nlist defined by the dictionary key ['flowgraph', step, index, 'input'].\nAll files must be available for flow to continue. If a file\nis missing, the program exists on an error.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "author": [],
                                    "date": [],
                                    "filehash": [],
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "required",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: inputs",
                        "switch": [
                            "-tool_task_input 'tool task step index <str>'"
                        ],
                        "type": "[file]"
                    },
                    "keep": {
                        "example": [
                            "cli: -tool_task_keep 'surelog import slp_all'",
                            "api: chip.set('tool', 'surelog', 'task', 'import', 'keep', 'slpp_all')"
                        ],
                        "help": "Names of additional files and directories in the work directory that\nshould be kept when :keypath:`option, clean` is true.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: files to keep",
                        "switch": [
                            "-tool_task_keep 'task <str>'"
                        ],
                        "type": "[str]"
                    },
                    "option": {
                        "example": [
                            "cli: -tool_task_option 'openroad cts -no_init'",
                            "api: chip.set('tool', 'openroad', 'task', 'cts', 'option', '-no_init')"
                        ],
                        "help": "List of command line options for the task executable, specified on\na per task and per step basis. Options must not include spaces.\nFor multiple argument options, each option is a separate list element.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: executable options",
                        "switch": [
                            "-tool_task_option 'tool task <str>'"
                        ],
                        "type": "[str]"
                    },
                    "output": {
                        "copy": false,
                        "example": [
                            "cli: -tool_task_output 'openroad place place 0 oh_add.def'",
                            "api: chip.set('tool', 'openroad', 'task', 'place', 'output', 'oh_add.def', step='place', index='0')"
                        ],
                        "hashalgo": "sha256",
                        "help": "List of data files written to the 'output' directory of the\ntool/task/step/index used in the keypath. All files must be available\nfor flow to continue. If a file is missing, the program exists on an error.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "author": [],
                                    "date": [],
                                    "filehash": [],
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "required",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: outputs",
                        "switch": [
                            "-tool_task_output 'tool task step index <str>'"
                        ],
                        "type": "[file]"
                    },
                    "postscript": {
                        "copy": false,
                        "example": [
                            "cli: -tool_task_postscript 'yosys syn syn_post.tcl'",
                            "api: chip.set('tool', 'yosys', 'task', 'syn_asic', 'postscript', 'syn_post.tcl')"
                        ],
                        "hashalgo": "sha256",
                        "help": "Path to a user supplied script to execute after the main execution\nstage of the step but before the design is saved.\nExact entry point depends on the step and main script being\nexecuted. An example of a postscript entry point would be immediately\nafter global placement.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "author": [],
                                    "date": [],
                                    "filehash": [],
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: post-step script",
                        "switch": [
                            "-tool_task_postscript 'task <file>'"
                        ],
                        "type": "[file]"
                    },
                    "prescript": {
                        "copy": false,
                        "example": [
                            "cli: -tool_task_prescript 'yosys syn syn_pre.tcl'",
                            "api: chip.set('tool', 'yosys', 'task', 'syn_asic', 'prescript', 'syn_pre.tcl')"
                        ],
                        "hashalgo": "sha256",
                        "help": "Path to a user supplied script to execute after reading in the design\nbut before the main execution stage of the step. Exact entry point\ndepends on the step and main script being executed. An example\nof a prescript entry point would be immediately before global\nplacement.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "author": [],
                                    "date": [],
                                    "filehash": [],
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: pre-step script",
                        "switch": [
                            "-tool_task_prescript 'task <file>'"
                        ],
                        "type": "[file]"
                    },
                    "refdir": {
                        "copy": false,
                        "example": [
                            "cli: -tool_task_refdir 'yosys syn ./myref'",
                            "api: chip.set('tool', 'yosys', 'task', 'syn_asic', 'refdir', './myref')"
                        ],
                        "help": "Path to directories containing reference flow scripts, specified\non a per step and index basis.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: script directory",
                        "switch": [
                            "-tool_task_refdir 'task <dir>'"
                        ],
                        "type": "[dir]"
                    },
                    "regex": {
                        "default": {
                            "example": [
                                "cli: -tool_task_regex 'openroad place errors \"-v ERROR\"'",
                                "api: chip.set('tool', 'openroad', 'task', 'place', 'regex', 'errors', '-v ERROR')"
                            ],
                            "help": "A list of piped together grep commands. Each entry represents a set\nof command line arguments for grep including the regex pattern to\nmatch. Starting with the first list entry, each grep output is piped\ninto the following grep command in the list. Supported grep options\ninclude ``-v`` and ``-e``. Patterns starting with \"-\" should be\ndirectly preceded by the ``-e`` option. The following example\nillustrates the concept.\n\nUNIX grep:\n\n.. code-block:: bash\n\n    $ grep WARNING place.log | grep -v \"bbox\" > place.warnings\n\nSiliconCompiler::\n\n    chip.set('task', 'openroad', 'regex', 'place', '0', 'warnings',\n             [\"WARNING\", \"-v bbox\"])\n\nThe \"errors\" and \"warnings\" suffixes are special cases. When set,\nthe number of matches found for these regexes will be added to the\nerrors and warnings metrics for the task, respectively. This will\nalso cause the logfile to be added to the :keypath:`tool, <tool>,\ntask, <task>, report` parameter for those metrics, if not already present.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: regex filter",
                            "switch": [
                                "-tool_task_regex 'tool task suffix <str>'"
                            ],
                            "type": "[str]"
                        }
                    },
                    "report": {
                        "default": {
                            "copy": false,
                            "example": [
                                "cli: -tool_task_report 'openroad place holdtns place 0 place.log'",
                                "api: chip.set('tool', 'openroad', 'task', 'place', 'report', 'holdtns', 'place.log', step='place', index='0')"
                            ],
                            "hashalgo": "sha256",
                            "help": "List of report files associated with a specific 'metric'. The file path\nspecified is relative to the run directory of the current task.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "author": [],
                                        "date": [],
                                        "filehash": [],
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "required",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: reports",
                            "switch": [
                                "-tool_task_report 'task metric step index <str>'"
                            ],
                            "type": "[file]"
                        }
                    },
                    "require": {
                        "example": [
                            "cli: -tool_task_require 'openroad cts design'",
                            "api: chip.set('tool', 'openroad', 'task', 'cts', 'require', 'design')"
                        ],
                        "help": "List of keypaths to required task parameters. The list is used\nby check_manifest() to verify that all parameters have been set up before\nstep execution begins.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: parameter requirements",
                        "switch": [
                            "-tool_task_require 'task step index <str>'"
                        ],
                        "type": "[str]"
                    },
                    "script": {
                        "copy": false,
                        "example": [
                            "cli: -tool_task_script 'yosys syn syn.tcl'",
                            "api: chip.set('tool', 'yosys', 'task', 'syn_asic', 'script', 'syn.tcl')"
                        ],
                        "hashalgo": "sha256",
                        "help": "Path to the entry script called by the executable specified\non a per task and per step basis.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "author": [],
                                    "date": [],
                                    "filehash": [],
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: entry script",
                        "switch": [
                            "-tool_task_script 'task step index <file>'"
                        ],
                        "type": "[file]"
                    },
                    "stderr": {
                        "destination": {
                            "example": [
                                "cli: -tool_task_stderr_destination 'ghdl import log'",
                                "api: chip.set('tool', ghdl', 'task', 'import', 'stderr', 'destination', 'log')"
                            ],
                            "help": "Defines where to direct the output generated over stderr.\nSupported options are:\nnone: the stream generated to STDERR is ignored\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display output: the generated stream is\nstored in outputs/<design>.<suffix>",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": "log"
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: Destination for stderr",
                            "switch": [
                                "-tool_task_stderr_destination 'task [log|output|none]'"
                            ],
                            "type": "str"
                        },
                        "suffix": {
                            "example": [
                                "cli: -tool_task_stderr_suffix 'ghdl import log'",
                                "api: chip.set('tool', 'ghdl', 'task', 'import', 'stderr', 'suffix', 'log')"
                            ],
                            "help": "Specifies the file extension for the content redirected from stderr.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": "log"
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: File suffix for redirected stderr",
                            "switch": [
                                "-tool_task_stderr_suffix 'task <str>'"
                            ],
                            "type": "str"
                        }
                    },
                    "stdout": {
                        "destination": {
                            "example": [
                                "cli: -tool_task_stdout_destination 'ghdl import log'",
                                "api: chip.set('tool', 'ghdl', 'task', 'import', 'stdout', 'destination', 'log')"
                            ],
                            "help": "Defines where to direct the output generated over stdout.\nSupported options are:\nnone: the stream generated to STDOUT is ignored\nlog: the generated stream is stored in <step>.<suffix>; if not in quiet mode,\nit is additionally dumped to the display output: the generated stream is stored\nin outputs/<design>.<suffix>",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": "log"
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: Destination for stdout",
                            "switch": [
                                "-tool_task_stdout_destination 'task [log|output|none]'"
                            ],
                            "type": "str"
                        },
                        "suffix": {
                            "example": [
                                "cli: -tool_task_stdout_suffix 'ghdl import log'",
                                "api: chip.set('tool', ghdl', 'task', 'import', 'stdout', 'suffix', 'log')"
                            ],
                            "help": "Specifies the file extension for the content redirected from stdout.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": null,
                                        "value": "log"
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: File suffix for redirected stdout",
                            "switch": [
                                "-tool_task_stdout_suffix 'task <str>'"
                            ],
                            "type": "str"
                        }
                    },
                    "threads": {
                        "example": [
                            "cli: -tool_task_threads 'magic drc 64'",
                            "api: chip.set('tool', 'magic', 'task', 'drc', 'threads', '64')"
                        ],
                        "help": "Thread parallelism to use for execution specified on a per task and per\nstep basis. If not specified, SC queries the operating system and sets\nthe threads based on the maximum thread count supported by the\nhardware.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": null,
                                    "value": null
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: thread parallelism",
                        "switch": [
                            "-tool_task_threads 'task <int>'"
                        ],
                        "type": "int"
                    },
                    "var": {
                        "default": {
                            "example": [
                                "cli: -tool_task_var 'openroad cts myvar 42'",
                                "api: chip.set('tool', 'openroad', 'task', 'cts', 'var', 'myvar', '42')"
                            ],
                            "help": "Task script variables specified as key value pairs. Variable\nnames and value types must match the name and type of task and reference\nscript consuming the variable.",
                            "lock": false,
                            "node": {
                                "default": {
                                    "default": {
                                        "signature": [],
                                        "value": []
                                    }
                                }
                            },
                            "notes": null,
                            "pernode": "optional",
                            "require": null,
                            "scope": "job",
                            "shorthelp": "Task: script variables",
                            "switch": [
                                "-tool_task_var 'tool task key <str>'"
                            ],
                            "type": "[str]"
                        }
                    },
                    "warningoff": {
                        "example": [
                            "cli: -tool_task_warningoff 'verilator lint COMBDLY'",
                            "api: chip.set('tool', 'verilator', 'task', 'lint', 'warningoff', 'COMBDLY')"
                        ],
                        "help": "A list of tool warnings for which printing should be suppressed.\nGenerally this is done on a per design basis after review has\ndetermined that warning can be safely ignored The code for turning\noff warnings can be found in the specific task reference manual.",
                        "lock": false,
                        "node": {
                            "default": {
                                "default": {
                                    "signature": [],
                                    "value": []
                                }
                            }
                        },
                        "notes": null,
                        "pernode": "optional",
                        "require": null,
                        "scope": "job",
                        "shorthelp": "Task: warning filter",
                        "switch": [
                            "-tool_task_warningoff 'tool task <str>'"
                        ],
                        "type": "[str]"
                    }
                }
            },
            "vendor": {
                "example": [
                    "cli: -tool_vendor 'yosys yosys'",
                    "api: chip.set('tool', 'yosys', 'vendor', 'yosys')"
                ],
                "help": "Name of the tool vendor. Parameter can be used to set vendor\nspecific technology variables in the PDK and libraries. For\nopen source projects, the project name should be used in\nplace of vendor.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": null,
                            "value": null
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool: vendor",
                "switch": [
                    "-tool_vendor 'tool <str>'"
                ],
                "type": "str"
            },
            "version": {
                "example": [
                    "cli: -tool_version 'openroad >=v2.0'",
                    "api: chip.set('tool', 'openroad', 'version', '>=v2.0')"
                ],
                "help": "List of acceptable versions of the tool executable to be used. Each\nentry in this list must be a version specifier as described by Python\n`PEP-440 <https://peps.python.org/pep-0440/#version-specifiers>`_.\nDuring task execution, the tool is called with the 'vswitch' to\ncheck the runtime executable version. If the version of the system\nexecutable is not allowed by any of the specifiers in 'version',\nthen the job is halted pre-execution. For backwards compatibility,\nentries that do not conform to the standard will be interpreted as a\nversion with an '==' specifier. This check can be disabled by\nsetting 'novercheck' to True.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "optional",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool: version",
                "switch": [
                    "-tool_version 'tool <str>'"
                ],
                "type": "[str]"
            },
            "vswitch": {
                "example": [
                    "cli: -tool_vswitch 'openroad -version'",
                    "api: chip.set('tool', 'openroad', 'vswitch', '-version')"
                ],
                "help": "Command line switch to use with executable used to print out\nthe version number. Common switches include -v, -version,\n--version. Some tools may require extra flags to run in batch mode.",
                "lock": false,
                "node": {
                    "default": {
                        "default": {
                            "signature": [],
                            "value": []
                        }
                    }
                },
                "notes": null,
                "pernode": "never",
                "require": null,
                "scope": "job",
                "shorthelp": "Tool: executable version switch",
                "switch": [
                    "-tool_vswitch 'tool <str>'"
                ],
                "type": "[str]"
            }
        }
    },
    "unit": {
        "capacitance": {
            "example": [
                "cli: -unit_capacitance 'pf'",
                "api: chip.set('unit', 'capacitance', pf)"
            ],
            "help": "Units used for capacitance when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "pf"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: capacitance",
            "switch": [
                "-unit_capacitance '<str>'"
            ],
            "type": "str"
        },
        "current": {
            "example": [
                "cli: -unit_current 'mA'",
                "api: chip.set('unit', 'current', mA)"
            ],
            "help": "Units used for current when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "mA"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: current",
            "switch": [
                "-unit_current '<str>'"
            ],
            "type": "str"
        },
        "energy": {
            "example": [
                "cli: -unit_energy 'pj'",
                "api: chip.set('unit', 'energy', pj)"
            ],
            "help": "Units used for energy when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "pj"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: energy",
            "switch": [
                "-unit_energy '<str>'"
            ],
            "type": "str"
        },
        "inductance": {
            "example": [
                "cli: -unit_inductance 'nh'",
                "api: chip.set('unit', 'inductance', nh)"
            ],
            "help": "Units used for inductance when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "nh"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: inductance",
            "switch": [
                "-unit_inductance '<str>'"
            ],
            "type": "str"
        },
        "length": {
            "example": [
                "cli: -unit_length 'um'",
                "api: chip.set('unit', 'length', um)"
            ],
            "help": "Units used for length when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "um"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: length",
            "switch": [
                "-unit_length '<str>'"
            ],
            "type": "str"
        },
        "mass": {
            "example": [
                "cli: -unit_mass 'g'",
                "api: chip.set('unit', 'mass', g)"
            ],
            "help": "Units used for mass when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "g"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: mass",
            "switch": [
                "-unit_mass '<str>'"
            ],
            "type": "str"
        },
        "power": {
            "example": [
                "cli: -unit_power 'mw'",
                "api: chip.set('unit', 'power', mw)"
            ],
            "help": "Units used for power when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "mw"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: power",
            "switch": [
                "-unit_power '<str>'"
            ],
            "type": "str"
        },
        "resistance": {
            "example": [
                "cli: -unit_resistance 'ohm'",
                "api: chip.set('unit', 'resistance', ohm)"
            ],
            "help": "Units used for resistance when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "ohm"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: resistance",
            "switch": [
                "-unit_resistance '<str>'"
            ],
            "type": "str"
        },
        "temperature": {
            "example": [
                "cli: -unit_temperature 'C'",
                "api: chip.set('unit', 'temperature', C)"
            ],
            "help": "Units used for temperature when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "C"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: temperature",
            "switch": [
                "-unit_temperature '<str>'"
            ],
            "type": "str"
        },
        "time": {
            "example": [
                "cli: -unit_time 'ns'",
                "api: chip.set('unit', 'time', ns)"
            ],
            "help": "Units used for time when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "ns"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: time",
            "switch": [
                "-unit_time '<str>'"
            ],
            "type": "str"
        },
        "voltage": {
            "example": [
                "cli: -unit_voltage 'mv'",
                "api: chip.set('unit', 'voltage', mv)"
            ],
            "help": "Units used for voltage when not explicitly specified. Units\nare case insensitive (ie. pF == pf).",
            "lock": false,
            "node": {
                "default": {
                    "default": {
                        "signature": null,
                        "value": "mv"
                    }
                }
            },
            "notes": null,
            "pernode": "never",
            "require": null,
            "scope": "job",
            "shorthelp": "Unit: voltage",
            "switch": [
                "-unit_voltage '<str>'"
            ],
            "type": "str"
        }
    }
}
