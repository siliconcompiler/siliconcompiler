# Copyright (C) 2023 Zero ASIC

FROM ubuntu:22.04

LABEL org.opencontainers.image.source="https://github.com/siliconcompiler/siliconcompiler"
LABEL org.opencontainers.image.description="SiliconCompiler container with all supported OpenSource tools"

ARG SC_PREFIX=/sc_tools
ARG SC_BUILD=/sc_build

ARG DEBIAN_FRONTEND=noninteractive
RUN echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections

# Ensure we only install the required tools to keep images small
RUN echo "APT::Install-Recommends \"false\";" >> /etc/apt/apt.conf
RUN echo "APT::Install-Suggests \"false\";" >> /etc/apt/apt.conf

# Install minimum tools needed by SC and support scripts
RUN apt-get update
RUN apt-get install -y sudo \
                       git \
                       python3 python3-pip \
                       xvfb \
                       munge libmunge-dev build-essential libmariadb-dev lbzip2 libjson-c-dev && \
    apt-get clean

# Ensure we use https instead of git@github.com since that causes failures
RUN git config --global url."https://github.com/".insteadOf git@github.com:

{% for tool in tools %}
COPY --from={{ tool }} $SC_PREFIX $SC_PREFIX
RUN cat $SC_PREFIX/apt.txt | xargs apt-get install --ignore-missing -y && \
    apt-get clean && \
    rm $SC_PREFIX/apt.txt
{% endfor %}

# Execute scripts needed by tools
RUN find $SC_PREFIX -name "*.sh" -maxdepth 1 -exec {} + && \
    rm -f $SC_PREFIX/*.sh

{% if skip_build|length > 0 %}
# Install tools without build
RUN mkdir -p $SC_BUILD
WORKDIR $SC_BUILD

# Copy in support scripts
COPY _tools.py $SC_BUILD/..
COPY _tools.json $SC_BUILD/..

{% for tool in skip_build %}
COPY install-{{ tool }}.sh $SC_BUILD
RUN chmod +x $SC_BUILD/install-{{ tool }}.sh && \
    $SC_BUILD/install-{{ tool }}.sh && \
    apt-get clean && \
    rm -rf $SC_BUILD/deps
{% endfor %}
{% endif %}

{% if slurm_version is defined %}
######################
# Install slurm
######################
RUN mv $SC_PREFIX/slurm_cfg/start_slurm.sh /
RUN chmod +x /start_slurm.sh
{% endif %}

######################
# Setup running env
######################

# Cleanup builds
WORKDIR /
RUN rm -rf $SC_BUILD

# Setup work environment
RUN mkdir -p /sc_work
WORKDIR /sc_work

ENV SC_PREFIX=$SC_PREFIX
ENV PATH="$SC_PREFIX/bin:$SC_PREFIX/sbin:$PATH"
ENV LD_LIBRARY_PATH="$SC_PREFIX/lib:$SC_PREFIX/lib64"

# headless options for GUI
ENV QT_QPA_PLATFORM="offscreen"
