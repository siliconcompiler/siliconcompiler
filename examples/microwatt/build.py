import siliconcompiler as sc
import os

def add_sources(chip):
    chip.add('source', 'decode_types.vhdl')
    chip.add('source', 'common.vhdl')
    chip.add('source', 'wishbone_types.vhdl')
    chip.add('source', 'fetch1.vhdl')
    chip.add('source', 'utils.vhdl')
    chip.add('source', 'plru.vhdl')
    chip.add('source', 'cache_ram.vhdl')
    chip.add('source', 'icache.vhdl')
    chip.add('source', 'decode1.vhdl')
    chip.add('source', 'helpers.vhdl')
    chip.add('source', 'insn_helpers.vhdl')
    chip.add('source', 'control.vhdl')
    chip.add('source', 'decode2.vhdl')
    chip.add('source', 'register_file.vhdl')
    chip.add('source', 'cr_file.vhdl')
    chip.add('source', 'crhelpers.vhdl')
    chip.add('source', 'ppc_fx_insns.vhdl')
    chip.add('source', 'rotator.vhdl')
    chip.add('source', 'logical.vhdl')
    chip.add('source', 'countzero.vhdl')
    chip.add('source', 'multiply.vhdl')
    chip.add('source', 'divider.vhdl')
    chip.add('source', 'execute1.vhdl')
    chip.add('source', 'loadstore1.vhdl')
    chip.add('source', 'mmu.vhdl')
    chip.add('source', 'dcache.vhdl')
    chip.add('source', 'writeback.vhdl')
    chip.add('source', 'core_debug.vhdl')
    chip.add('source', 'core.vhdl')
    chip.add('source', 'fpu.vhdl')
    chip.add('source', 'wishbone_arbiter.vhdl')
    chip.add('source', 'wishbone_bram_wrapper.vhdl')
    chip.add('source', 'sync_fifo.vhdl')
    chip.add('source', 'wishbone_debug_master.vhdl')
    chip.add('source', 'xics.vhdl')
    chip.add('source', 'syscon.vhdl')
    chip.add('source', 'gpio.vhdl')
    chip.add('source', 'soc.vhdl')
    chip.add('source', 'spi_rxtx.vhdl')
    chip.add('source', 'spi_flash_ctrl.vhdl')
    chip.add('source', 'fpga/soc_reset.vhdl')
    chip.add('source', 'fpga/pp_fifo.vhd')
    chip.add('source', 'fpga/pp_soc_uart.vhd')
    chip.add('source', 'fpga/main_bram.vhdl')
    chip.add('source', 'nonrandom.vhdl')
    chip.add('source', 'fpga/clk_gen_ecp5.vhd')
    chip.add('source', 'fpga/top-generic.vhdl')
    chip.add('source', 'dmi_dtm_dummy.vhdl')

def configure_fpga(chip):
    chip.add('design', 'toplevel')
    add_sources(chip)

    cwd = os.getcwd()
    chip.add('define', 'MEMORY_SIZE=8192')
    chip.add('define', 'RAM_INIT_FILE='+cwd+'/hello_world/hello_world.hex')
    chip.add('define', 'RESET_LOW=true')
    chip.add('define', 'CLK_INPUT=50000000')
    chip.add('define', 'CLK_FREQUENCY=40000000')

    chip.set('target', 'ice40_nextpnrvhdl')
    chip.set('constraint', 'fpga/icebreaker.pcf')

def main():
    chip = sc.Chip()

    configure_fpga(chip)

    chip.set_jobid()
    chip.target()
    chip.run()

if __name__ == '__main__':
    main()
